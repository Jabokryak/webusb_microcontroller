
m3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800d484  0800d484  0001d484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d538  0800d538  00030174  2**0
                  CONTENTS
  4 .ARM          00000008  0800d538  0800d538  0001d538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d540  0800d540  00030174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d540  0800d540  0001d540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d544  0800d544  0001d544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  0800d548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000174  10000000  0800d678  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000dc4  20000130  20000130  00040130  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  10000174  10000174  00030174  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030174  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ba67  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d53  00000000  00000000  0004bc0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e0  00000000  00000000  0004f960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001540  00000000  00000000  00051040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025be6  00000000  00000000  00052580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d3dd  00000000  00000000  00078166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d69f2  00000000  00000000  00095543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016bf35  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006024  00000000  00000000  0016bf88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000130 	.word	0x20000130
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d46c 	.word	0x0800d46c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000134 	.word	0x20000134
 80001c4:	0800d46c 	.word	0x0800d46c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	db0b      	blt.n	80004f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	f003 021f 	and.w	r2, r3, #31
 80004e4:	4907      	ldr	r1, [pc, #28]	; (8000504 <__NVIC_EnableIRQ+0x38>)
 80004e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ea:	095b      	lsrs	r3, r3, #5
 80004ec:	2001      	movs	r0, #1
 80004ee:	fa00 f202 	lsl.w	r2, r0, r2
 80004f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	e000e100 	.word	0xe000e100

08000508 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000516:	2b00      	cmp	r3, #0
 8000518:	db12      	blt.n	8000540 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	f003 021f 	and.w	r2, r3, #31
 8000520:	490a      	ldr	r1, [pc, #40]	; (800054c <__NVIC_DisableIRQ+0x44>)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	095b      	lsrs	r3, r3, #5
 8000528:	2001      	movs	r0, #1
 800052a:	fa00 f202 	lsl.w	r2, r0, r2
 800052e:	3320      	adds	r3, #32
 8000530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000534:	f3bf 8f4f 	dsb	sy
}
 8000538:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800053a:	f3bf 8f6f 	isb	sy
}
 800053e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	e000e100 	.word	0xe000e100

08000550 <QMC5883L_set_continuous_mode>:

HAL_StatusTypeDef QMC5883L_soft_reset(I2C_HandleTypeDef *hi2c);
HAL_StatusTypeDef QMC5883L_init(I2C_HandleTypeDef *hi2c);
HAL_StatusTypeDef QMC5883L_set_mode(I2C_HandleTypeDef *hi2c, uint8_t mode, uint8_t odr, uint8_t rng, uint8_t osr);

static inline HAL_StatusTypeDef QMC5883L_set_continuous_mode(I2C_HandleTypeDef *hi2c){
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	return HAL_I2C_Master_Transmit_IT(hi2c, QMC5883L_Addr, p_continuous_mode_buf, 2);
 8000558:	2302      	movs	r3, #2
 800055a:	4a05      	ldr	r2, [pc, #20]	; (8000570 <QMC5883L_set_continuous_mode+0x20>)
 800055c:	211b      	movs	r1, #27
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f002 fe9a 	bl	8003298 <HAL_I2C_Master_Transmit_IT>
 8000564:	4603      	mov	r3, r0
}
 8000566:	4618      	mov	r0, r3
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000000 	.word	0x20000000

08000574 <QMC5883L_set_standby_mode>:

static inline HAL_StatusTypeDef QMC5883L_set_standby_mode(I2C_HandleTypeDef *hi2c){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	return HAL_I2C_Master_Transmit_IT(hi2c, QMC5883L_Addr, p_standby_mode_buf, 2);
 800057c:	2302      	movs	r3, #2
 800057e:	4a05      	ldr	r2, [pc, #20]	; (8000594 <QMC5883L_set_standby_mode+0x20>)
 8000580:	211b      	movs	r1, #27
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f002 fe88 	bl	8003298 <HAL_I2C_Master_Transmit_IT>
 8000588:	4603      	mov	r3, r0
}
 800058a:	4618      	mov	r0, r3
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000004 	.word	0x20000004

08000598 <QMC5883L_read>:

static inline HAL_StatusTypeDef QMC5883L_read_init(I2C_HandleTypeDef *hi2c){
	return HAL_I2C_Master_Transmit_IT(hi2c, QMC5883L_Addr, p_read_init_buf, 1);
}

static inline HAL_StatusTypeDef QMC5883L_read(I2C_HandleTypeDef *hi2c, uint8_t *p_in_buf){
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af02      	add	r7, sp, #8
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read_IT(hi2c, QMC5883L_Addr, 0, 1, p_in_buf, 7);
 80005a2:	2307      	movs	r3, #7
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2301      	movs	r3, #1
 80005ac:	2200      	movs	r2, #0
 80005ae:	211b      	movs	r1, #27
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f002 ffc5 	bl	8003540 <HAL_I2C_Mem_Read_IT>
 80005b6:	4603      	mov	r3, r0
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <TLV493D_A1B6_read>:
#define TLV493D_A1B6_Low_power_period_100_ms	0

#define TLV493D_A1B6_Parity_test_enabled		0x20
#define TLV493D_A1B6_Parity_test_disabled		0

static inline HAL_StatusTypeDef TLV493D_A1B6_read(I2C_HandleTypeDef *p_hi2c, uint8_t p_addr, uint8_t *p_in_buf) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	460b      	mov	r3, r1
 80005ca:	607a      	str	r2, [r7, #4]
 80005cc:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Master_Receive_IT(p_hi2c, p_addr, p_in_buf, 7);
 80005ce:	7afb      	ldrb	r3, [r7, #11]
 80005d0:	b299      	uxth	r1, r3
 80005d2:	2307      	movs	r3, #7
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	68f8      	ldr	r0, [r7, #12]
 80005d8:	f002 ff04 	bl	80033e4 <HAL_I2C_Master_Receive_IT>
 80005dc:	4603      	mov	r3, r0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <TLV493D_A1B6_preread>:

static inline HAL_StatusTypeDef TLV493D_A1B6_preread(I2C_HandleTypeDef *p_hi2c, uint8_t p_addr){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
	static uint8_t l_in_buf[1];

	return HAL_I2C_Master_Receive_IT(p_hi2c, p_addr, l_in_buf, 1);
 80005f4:	78fb      	ldrb	r3, [r7, #3]
 80005f6:	b299      	uxth	r1, r3
 80005f8:	2301      	movs	r3, #1
 80005fa:	4a04      	ldr	r2, [pc, #16]	; (800060c <TLV493D_A1B6_preread+0x24>)
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f002 fef1 	bl	80033e4 <HAL_I2C_Master_Receive_IT>
 8000602:	4603      	mov	r3, r0
}
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000460 	.word	0x20000460

08000610 <init_variables_in_ccmram>:
t_i2c_ext l_i2c2_ext __attribute__((section(".ccmram"))) = {&hi2c2,	init_state,	&htim7, (uint8_t *)&l_report[32], (uint8_t *)&l_report[39], TLV493D_A1B6_Slave_3_addr, (uint8_t *)&l_report[46], TLV493D_A1B6_Slave_7_addr,	no_error};
t_i2c_ext l_i2c3_ext __attribute__((section(".ccmram"))) = {&hi2c3,	init_state,	&htim13,                       0, (uint8_t *)&l_report[54], TLV493D_A1B6_Slave_3_addr, (uint8_t *)&l_report[61], TLV493D_A1B6_Slave_7_addr,	no_error};

extern USBD_ClassTypeDef  USBD_CUSTOM_HID;

void init_variables_in_ccmram() {
 8000610:	b4b0      	push	{r4, r5, r7}
 8000612:	b099      	sub	sp, #100	; 0x64
 8000614:	af00      	add	r7, sp, #0
	l_dbg_pos	= 2;
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <init_variables_in_ccmram+0x60>)
 8000618:	2202      	movs	r2, #2
 800061a:	701a      	strb	r2, [r3, #0]
	l_error		= no_error;
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <init_variables_in_ccmram+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
	l_command	= 0;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <init_variables_in_ccmram+0x68>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]

	l_i2c1_ext = (t_i2c_ext){&hi2c1,	init_state,	&htim6, (uint8_t *)&l_report[10], (uint8_t *)&l_report[17], TLV493D_A1B6_Slave_3_addr, (uint8_t *)&l_report[24], TLV493D_A1B6_Slave_7_addr,	no_error};
 8000628:	4a14      	ldr	r2, [pc, #80]	; (800067c <init_variables_in_ccmram+0x6c>)
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <init_variables_in_ccmram+0x70>)
 800062c:	4614      	mov	r4, r2
 800062e:	461d      	mov	r5, r3
 8000630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000634:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	l_i2c2_ext = (t_i2c_ext){&hi2c2,	init_state,	&htim7, (uint8_t *)&l_report[32], (uint8_t *)&l_report[39], TLV493D_A1B6_Slave_3_addr, (uint8_t *)&l_report[46], TLV493D_A1B6_Slave_7_addr,	no_error};
 800063c:	4a11      	ldr	r2, [pc, #68]	; (8000684 <init_variables_in_ccmram+0x74>)
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <init_variables_in_ccmram+0x78>)
 8000640:	4614      	mov	r4, r2
 8000642:	461d      	mov	r5, r3
 8000644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000648:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800064c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	l_i2c3_ext = (t_i2c_ext){&hi2c3,	init_state,	&htim13,                       0, (uint8_t *)&l_report[54], TLV493D_A1B6_Slave_3_addr, (uint8_t *)&l_report[61], TLV493D_A1B6_Slave_7_addr,	no_error};
 8000650:	4a0e      	ldr	r2, [pc, #56]	; (800068c <init_variables_in_ccmram+0x7c>)
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <init_variables_in_ccmram+0x80>)
 8000654:	4614      	mov	r4, r2
 8000656:	461d      	mov	r5, r3
 8000658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000660:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000664:	bf00      	nop
 8000666:	3764      	adds	r7, #100	; 0x64
 8000668:	46bd      	mov	sp, r7
 800066a:	bcb0      	pop	{r4, r5, r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	100000a7 	.word	0x100000a7
 8000674:	100000a8 	.word	0x100000a8
 8000678:	100000a9 	.word	0x100000a9
 800067c:	10000114 	.word	0x10000114
 8000680:	0800d484 	.word	0x0800d484
 8000684:	10000134 	.word	0x10000134
 8000688:	0800d4a4 	.word	0x0800d4a4
 800068c:	10000154 	.word	0x10000154
 8000690:	0800d4c4 	.word	0x0800d4c4

08000694 <USBD_CUSTOM_HID_DataIn>:

//Copy from usbd_customhid.c and added user code
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	32b0      	adds	r2, #176	; 0xb0
 80006aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006ae:	2200      	movs	r2, #0
 80006b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	//user code begin
	if (	4 == l_command		//ON_SENSORS
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <USBD_CUSTOM_HID_DataIn+0x3c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b04      	cmp	r3, #4
 80006ba:	d002      	beq.n	80006c2 <USBD_CUSTOM_HID_DataIn+0x2e>
		||	6 == l_command		//COMMON_ON
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <USBD_CUSTOM_HID_DataIn+0x3c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b06      	cmp	r3, #6
	}

	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	//user code end

  return (uint8_t)USBD_OK;
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	100000a9 	.word	0x100000a9

080006d4 <get_time>:
	l_report[53] = l_i2c2_ext.error;
	l_report[68] = l_i2c3_ext.error;
	l_report[69] = l_error;
}

void static inline get_time() {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &l_time, RTC_FORMAT_BCD);
 80006d8:	2201      	movs	r2, #1
 80006da:	4918      	ldr	r1, [pc, #96]	; (800073c <get_time+0x68>)
 80006dc:	4818      	ldr	r0, [pc, #96]	; (8000740 <get_time+0x6c>)
 80006de:	f006 ff91 	bl	8007604 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &l_date, RTC_FORMAT_BCD);
 80006e2:	2201      	movs	r2, #1
 80006e4:	4917      	ldr	r1, [pc, #92]	; (8000744 <get_time+0x70>)
 80006e6:	4816      	ldr	r0, [pc, #88]	; (8000740 <get_time+0x6c>)
 80006e8:	f007 f86e 	bl	80077c8 <HAL_RTC_GetDate>

	l_report[2] = l_time.Hours;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <get_time+0x68>)
 80006ee:	781a      	ldrb	r2, [r3, #0]
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <get_time+0x74>)
 80006f2:	709a      	strb	r2, [r3, #2]
	l_report[3] = l_time.Minutes;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <get_time+0x68>)
 80006f6:	785a      	ldrb	r2, [r3, #1]
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <get_time+0x74>)
 80006fa:	70da      	strb	r2, [r3, #3]
	l_report[4] = l_time.Seconds;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <get_time+0x68>)
 80006fe:	789a      	ldrb	r2, [r3, #2]
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <get_time+0x74>)
 8000702:	711a      	strb	r2, [r3, #4]
	l_report[5] = l_time.SubSeconds >> 8;
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <get_time+0x68>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <get_time+0x74>)
 800070e:	715a      	strb	r2, [r3, #5]
	l_report[6] = l_time.SubSeconds;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <get_time+0x68>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <get_time+0x74>)
 8000718:	719a      	strb	r2, [r3, #6]
	l_report[7] = l_time.SecondFraction >> 8;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <get_time+0x68>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	0a1b      	lsrs	r3, r3, #8
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <get_time+0x74>)
 8000724:	71da      	strb	r2, [r3, #7]
	l_report[8] = l_time.SecondFraction;
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <get_time+0x68>)
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <get_time+0x74>)
 800072e:	721a      	strb	r2, [r3, #8]
	l_report[9] = l_date.Date;
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <get_time+0x70>)
 8000732:	789a      	ldrb	r2, [r3, #2]
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <get_time+0x74>)
 8000736:	725a      	strb	r2, [r3, #9]
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	10000000 	.word	0x10000000
 8000740:	20000248 	.word	0x20000248
 8000744:	10000014 	.word	0x10000014
 8000748:	10000018 	.word	0x10000018

0800074c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	80fb      	strh	r3, [r7, #6]
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);

	t_i2c_ext *l_i2c_ext = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]

	switch (GPIO_Pin) {
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000760:	d003      	beq.n	800076a <HAL_GPIO_EXTI_Callback+0x1e>
 8000762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000766:	d017      	beq.n	8000798 <HAL_GPIO_EXTI_Callback+0x4c>
 8000768:	e02d      	b.n	80007c6 <HAL_GPIO_EXTI_Callback+0x7a>
		case QMC5883L_1_DRDY_Pin:
			NVIC_DisableIRQ(EXTI9_5_IRQn);
 800076a:	2017      	movs	r0, #23
 800076c:	f7ff fecc 	bl	8000508 <__NVIC_DisableIRQ>

			l_i2c_ext = &l_i2c1_ext;
 8000770:	4b5f      	ldr	r3, [pc, #380]	; (80008f0 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000772:	60fb      	str	r3, [r7, #12]
			dbg(58)
 8000774:	4b5f      	ldr	r3, [pc, #380]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b46      	cmp	r3, #70	; 0x46
 800077a:	d902      	bls.n	8000782 <HAL_GPIO_EXTI_Callback+0x36>
 800077c:	4b5d      	ldr	r3, [pc, #372]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800077e:	2202      	movs	r2, #2
 8000780:	701a      	strb	r2, [r3, #0]
 8000782:	4b5c      	ldr	r3, [pc, #368]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	b2d1      	uxtb	r1, r2
 800078a:	4a5a      	ldr	r2, [pc, #360]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800078c:	7011      	strb	r1, [r2, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	4b59      	ldr	r3, [pc, #356]	; (80008f8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000792:	213a      	movs	r1, #58	; 0x3a
 8000794:	5499      	strb	r1, [r3, r2]

			break;
 8000796:	e031      	b.n	80007fc <HAL_GPIO_EXTI_Callback+0xb0>
		case QMC5883L_2_DRDY_Pin:
			NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000798:	2028      	movs	r0, #40	; 0x28
 800079a:	f7ff feb5 	bl	8000508 <__NVIC_DisableIRQ>

			l_i2c_ext = &l_i2c2_ext;
 800079e:	4b57      	ldr	r3, [pc, #348]	; (80008fc <HAL_GPIO_EXTI_Callback+0x1b0>)
 80007a0:	60fb      	str	r3, [r7, #12]
			dbg(59)
 80007a2:	4b54      	ldr	r3, [pc, #336]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b46      	cmp	r3, #70	; 0x46
 80007a8:	d902      	bls.n	80007b0 <HAL_GPIO_EXTI_Callback+0x64>
 80007aa:	4b52      	ldr	r3, [pc, #328]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	4b50      	ldr	r3, [pc, #320]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	b2d1      	uxtb	r1, r2
 80007b8:	4a4e      	ldr	r2, [pc, #312]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80007ba:	7011      	strb	r1, [r2, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	4b4e      	ldr	r3, [pc, #312]	; (80008f8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80007c0:	213b      	movs	r1, #59	; 0x3b
 80007c2:	5499      	strb	r1, [r3, r2]

			break;
 80007c4:	e01a      	b.n	80007fc <HAL_GPIO_EXTI_Callback+0xb0>
		default :
			l_error = unknown_HAL_GPIO_EXTI_Callback;
 80007c6:	4b4e      	ldr	r3, [pc, #312]	; (8000900 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80007c8:	220f      	movs	r2, #15
 80007ca:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d2:	484c      	ldr	r0, [pc, #304]	; (8000904 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80007d4:	f002 fad2 	bl	8002d7c <HAL_GPIO_WritePin>
			dbg(60)
 80007d8:	4b46      	ldr	r3, [pc, #280]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b46      	cmp	r3, #70	; 0x46
 80007de:	d902      	bls.n	80007e6 <HAL_GPIO_EXTI_Callback+0x9a>
 80007e0:	4b44      	ldr	r3, [pc, #272]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80007e2:	2202      	movs	r2, #2
 80007e4:	701a      	strb	r2, [r3, #0]
 80007e6:	4b43      	ldr	r3, [pc, #268]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	b2d1      	uxtb	r1, r2
 80007ee:	4a41      	ldr	r2, [pc, #260]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80007f0:	7011      	strb	r1, [r2, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b40      	ldr	r3, [pc, #256]	; (80008f8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80007f6:	213c      	movs	r1, #60	; 0x3c
 80007f8:	5499      	strb	r1, [r3, r2]

			return;
 80007fa:	e076      	b.n	80008ea <HAL_GPIO_EXTI_Callback+0x19e>
	}

	if (l_i2c_ext->state == init_state) {
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	791b      	ldrb	r3, [r3, #4]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d151      	bne.n	80008aa <HAL_GPIO_EXTI_Callback+0x15e>
		/*for (uint8_t i = 0; l_i2c_ext->i2c_pointer->State != HAL_I2C_STATE_READY && i < 200; i++) {
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
		}

		if (l_i2c_ext->i2c_pointer->State != HAL_I2C_STATE_READY) {*/
			dbg(21)
 8000806:	4b3b      	ldr	r3, [pc, #236]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b46      	cmp	r3, #70	; 0x46
 800080c:	d902      	bls.n	8000814 <HAL_GPIO_EXTI_Callback+0xc8>
 800080e:	4b39      	ldr	r3, [pc, #228]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000810:	2202      	movs	r2, #2
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	4b37      	ldr	r3, [pc, #220]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	b2d1      	uxtb	r1, r2
 800081c:	4a35      	ldr	r2, [pc, #212]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800081e:	7011      	strb	r1, [r2, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	4b35      	ldr	r3, [pc, #212]	; (80008f8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000824:	2115      	movs	r1, #21
 8000826:	5499      	strb	r1, [r3, r2]
			dbg(l_i2c_ext->i2c_pointer->State)
 8000828:	4b32      	ldr	r3, [pc, #200]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b46      	cmp	r3, #70	; 0x46
 800082e:	d902      	bls.n	8000836 <HAL_GPIO_EXTI_Callback+0xea>
 8000830:	4b30      	ldr	r3, [pc, #192]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000832:	2202      	movs	r2, #2
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	1c59      	adds	r1, r3, #1
 8000840:	b2c8      	uxtb	r0, r1
 8000842:	492c      	ldr	r1, [pc, #176]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000844:	7008      	strb	r0, [r1, #0]
 8000846:	4619      	mov	r1, r3
 8000848:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000850:	545a      	strb	r2, [r3, r1]
		//}

		l_i2c_ext->state = need_read_QMC5883L;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	2201      	movs	r2, #1
 8000856:	711a      	strb	r2, [r3, #4]

		if (QMC5883L_set_standby_mode(l_i2c_ext->i2c_pointer) != HAL_OK) {
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fe89 	bl	8000574 <QMC5883L_set_standby_mode>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d040      	beq.n	80008ea <HAL_GPIO_EXTI_Callback+0x19e>
			l_i2c_ext->error = QMC5883L_set_standby_mode_error;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2204      	movs	r2, #4
 800086c:	775a      	strb	r2, [r3, #29]

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000874:	4823      	ldr	r0, [pc, #140]	; (8000904 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000876:	f002 fa81 	bl	8002d7c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000880:	4820      	ldr	r0, [pc, #128]	; (8000904 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000882:	f002 fa7b 	bl	8002d7c <HAL_GPIO_WritePin>
			dbg(61)
 8000886:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b46      	cmp	r3, #70	; 0x46
 800088c:	d902      	bls.n	8000894 <HAL_GPIO_EXTI_Callback+0x148>
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000890:	2202      	movs	r2, #2
 8000892:	701a      	strb	r2, [r3, #0]
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	1c5a      	adds	r2, r3, #1
 800089a:	b2d1      	uxtb	r1, r2
 800089c:	4a15      	ldr	r2, [pc, #84]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800089e:	7011      	strb	r1, [r2, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80008a4:	213d      	movs	r1, #61	; 0x3d
 80008a6:	5499      	strb	r1, [r3, r2]
 80008a8:	e01f      	b.n	80008ea <HAL_GPIO_EXTI_Callback+0x19e>
		}
	} else {
		l_i2c_ext->error = unattended_state_when_set_standby_mode_QMC5883L;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	2206      	movs	r2, #6
 80008ae:	775a      	strb	r2, [r3, #29]

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b6:	4813      	ldr	r0, [pc, #76]	; (8000904 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80008b8:	f002 fa60 	bl	8002d7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008c2:	4810      	ldr	r0, [pc, #64]	; (8000904 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80008c4:	f002 fa5a 	bl	8002d7c <HAL_GPIO_WritePin>
		dbg(62)
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b46      	cmp	r3, #70	; 0x46
 80008ce:	d902      	bls.n	80008d6 <HAL_GPIO_EXTI_Callback+0x18a>
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80008d2:	2202      	movs	r2, #2
 80008d4:	701a      	strb	r2, [r3, #0]
 80008d6:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	1c5a      	adds	r2, r3, #1
 80008dc:	b2d1      	uxtb	r1, r2
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80008e0:	7011      	strb	r1, [r2, #0]
 80008e2:	461a      	mov	r2, r3
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80008e6:	213e      	movs	r1, #62	; 0x3e
 80008e8:	5499      	strb	r1, [r3, r2]
	}
}
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	10000114 	.word	0x10000114
 80008f4:	100000a7 	.word	0x100000a7
 80008f8:	10000060 	.word	0x10000060
 80008fc:	10000134 	.word	0x10000134
 8000900:	100000a8 	.word	0x100000a8
 8000904:	40020c00 	.word	0x40020c00

08000908 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f003 f92b 	bl	8003b6c <HAL_I2C_GetError>
 8000916:	4603      	mov	r3, r0
 8000918:	2b04      	cmp	r3, #4
 800091a:	d012      	beq.n	8000942 <HAL_I2C_ErrorCallback+0x3a>
		t_i2c_ext *l_i2c_ext =
				(hi2c == &hi2c1) ? &l_i2c1_ext
			:	(hi2c == &hi2c2) ? &l_i2c2_ext
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a0b      	ldr	r2, [pc, #44]	; (800094c <HAL_I2C_ErrorCallback+0x44>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d007      	beq.n	8000934 <HAL_I2C_ErrorCallback+0x2c>
			:	&l_i2c3_ext;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <HAL_I2C_ErrorCallback+0x48>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d101      	bne.n	8000930 <HAL_I2C_ErrorCallback+0x28>
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_I2C_ErrorCallback+0x4c>)
 800092e:	e002      	b.n	8000936 <HAL_I2C_ErrorCallback+0x2e>
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_I2C_ErrorCallback+0x50>)
 8000932:	e000      	b.n	8000936 <HAL_I2C_ErrorCallback+0x2e>
			:	(hi2c == &hi2c2) ? &l_i2c2_ext
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_I2C_ErrorCallback+0x54>)
		t_i2c_ext *l_i2c_ext =
 8000936:	60fb      	str	r3, [r7, #12]

		l_i2c_ext->error = i2c_error;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2216      	movs	r2, #22
 800093c:	775a      	strb	r2, [r3, #29]

		Error_Handler();
 800093e:	f001 fb4d 	bl	8001fdc <Error_Handler>
	}
}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000014c 	.word	0x2000014c
 8000950:	200001a0 	.word	0x200001a0
 8000954:	10000134 	.word	0x10000134
 8000958:	10000154 	.word	0x10000154
 800095c:	10000114 	.word	0x10000114

08000960 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);

	t_i2c_ext *l_i2c_ext =
			(hi2c == &hi2c1) ? &l_i2c1_ext
		:	(hi2c == &hi2c2) ? &l_i2c2_ext
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <HAL_I2C_MasterTxCpltCallback+0x94>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d007      	beq.n	8000980 <HAL_I2C_MasterTxCpltCallback+0x20>
		:	0;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <HAL_I2C_MasterTxCpltCallback+0x98>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d101      	bne.n	800097c <HAL_I2C_MasterTxCpltCallback+0x1c>
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <HAL_I2C_MasterTxCpltCallback+0x9c>)
 800097a:	e002      	b.n	8000982 <HAL_I2C_MasterTxCpltCallback+0x22>
 800097c:	2300      	movs	r3, #0
 800097e:	e000      	b.n	8000982 <HAL_I2C_MasterTxCpltCallback+0x22>
		:	(hi2c == &hi2c2) ? &l_i2c2_ext
 8000980:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <HAL_I2C_MasterTxCpltCallback+0xa0>)
	t_i2c_ext *l_i2c_ext =
 8000982:	60fb      	str	r3, [r7, #12]

	if (l_i2c_ext !=0 && l_i2c_ext->state == need_read_QMC5883L) {
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d030      	beq.n	80009ec <HAL_I2C_MasterTxCpltCallback+0x8c>
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	791b      	ldrb	r3, [r3, #4]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b01      	cmp	r3, #1
 8000992:	d12b      	bne.n	80009ec <HAL_I2C_MasterTxCpltCallback+0x8c>
		l_i2c_ext->state = need_preread_first_TLV493D_A1B6;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2203      	movs	r2, #3
 8000998:	711a      	strb	r2, [r3, #4]

		if (QMC5883L_read(hi2c, l_i2c_ext->QMC5883L_array_pointer) != HAL_OK) {			//get magnetic induction
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	4619      	mov	r1, r3
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff fdf9 	bl	8000598 <QMC5883L_read>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d01f      	beq.n	80009ec <HAL_I2C_MasterTxCpltCallback+0x8c>

			l_i2c_ext->error = QMC5883L_read_error;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2205      	movs	r2, #5
 80009b0:	775a      	strb	r2, [r3, #29]

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b8:	4812      	ldr	r0, [pc, #72]	; (8000a04 <HAL_I2C_MasterTxCpltCallback+0xa4>)
 80009ba:	f002 f9df 	bl	8002d7c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c4:	480f      	ldr	r0, [pc, #60]	; (8000a04 <HAL_I2C_MasterTxCpltCallback+0xa4>)
 80009c6:	f002 f9d9 	bl	8002d7c <HAL_GPIO_WritePin>
			dbg(63)
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <HAL_I2C_MasterTxCpltCallback+0xa8>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b46      	cmp	r3, #70	; 0x46
 80009d0:	d902      	bls.n	80009d8 <HAL_I2C_MasterTxCpltCallback+0x78>
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <HAL_I2C_MasterTxCpltCallback+0xa8>)
 80009d4:	2202      	movs	r2, #2
 80009d6:	701a      	strb	r2, [r3, #0]
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <HAL_I2C_MasterTxCpltCallback+0xa8>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	b2d1      	uxtb	r1, r2
 80009e0:	4a09      	ldr	r2, [pc, #36]	; (8000a08 <HAL_I2C_MasterTxCpltCallback+0xa8>)
 80009e2:	7011      	strb	r1, [r2, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_I2C_MasterTxCpltCallback+0xac>)
 80009e8:	213f      	movs	r1, #63	; 0x3f
 80009ea:	5499      	strb	r1, [r3, r2]
		}

		//dbg(22)
	}
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	2000014c 	.word	0x2000014c
 80009f8:	200001a0 	.word	0x200001a0
 80009fc:	10000134 	.word	0x10000134
 8000a00:	10000114 	.word	0x10000114
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	100000a7 	.word	0x100000a7
 8000a0c:	10000060 	.word	0x10000060

08000a10 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	HAL_I2C_MasterRxCpltCallback(hi2c);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f000 f805 	bl	8000a28 <HAL_I2C_MasterRxCpltCallback>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {	// I2C data ready!
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	t_i2c_ext *l_i2c_ext =
			(hi2c == &hi2c1) ? &l_i2c1_ext
		:	(hi2c == &hi2c2) ? &l_i2c2_ext
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a6b      	ldr	r2, [pc, #428]	; (8000be0 <HAL_I2C_MasterRxCpltCallback+0x1b8>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d007      	beq.n	8000a48 <HAL_I2C_MasterRxCpltCallback+0x20>
		:	&l_i2c3_ext;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a6a      	ldr	r2, [pc, #424]	; (8000be4 <HAL_I2C_MasterRxCpltCallback+0x1bc>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d101      	bne.n	8000a44 <HAL_I2C_MasterRxCpltCallback+0x1c>
 8000a40:	4b69      	ldr	r3, [pc, #420]	; (8000be8 <HAL_I2C_MasterRxCpltCallback+0x1c0>)
 8000a42:	e002      	b.n	8000a4a <HAL_I2C_MasterRxCpltCallback+0x22>
 8000a44:	4b69      	ldr	r3, [pc, #420]	; (8000bec <HAL_I2C_MasterRxCpltCallback+0x1c4>)
 8000a46:	e000      	b.n	8000a4a <HAL_I2C_MasterRxCpltCallback+0x22>
		:	(hi2c == &hi2c2) ? &l_i2c2_ext
 8000a48:	4b69      	ldr	r3, [pc, #420]	; (8000bf0 <HAL_I2C_MasterRxCpltCallback+0x1c8>)
	t_i2c_ext *l_i2c_ext =
 8000a4a:	60fb      	str	r3, [r7, #12]

	switch (l_i2c_ext->state) {
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	791b      	ldrb	r3, [r3, #4]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	f200 80a1 	bhi.w	8000b9a <HAL_I2C_MasterRxCpltCallback+0x172>
 8000a58:	a201      	add	r2, pc, #4	; (adr r2, 8000a60 <HAL_I2C_MasterRxCpltCallback+0x38>)
 8000a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5e:	bf00      	nop
 8000a60:	08000bd1 	.word	0x08000bd1
 8000a64:	08000b9b 	.word	0x08000b9b
 8000a68:	08000ad9 	.word	0x08000ad9
 8000a6c:	08000a7d 	.word	0x08000a7d
 8000a70:	08000b09 	.word	0x08000b09
 8000a74:	08000b63 	.word	0x08000b63
 8000a78:	08000b93 	.word	0x08000b93

			break;
		case need_preread_first_TLV493D_A1B6:
			//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);

			l_i2c_ext->state = wait_read_first_TLV493D_A1B6;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2202      	movs	r2, #2
 8000a80:	711a      	strb	r2, [r3, #4]

			//dbg(30)

			//Start measuring first TLV493D-A1B6 and wait 105 us
			if (TLV493D_A1B6_preread(hi2c, l_i2c_ext->first_TLV493D_A1B6_address) != HAL_OK) {
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	7d1b      	ldrb	r3, [r3, #20]
 8000a86:	4619      	mov	r1, r3
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff fdad 	bl	80005e8 <TLV493D_A1B6_preread>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	f000 809f 	beq.w	8000bd4 <HAL_I2C_MasterRxCpltCallback+0x1ac>
				l_i2c_ext->error = first_TLV493D_A1B6_preread_error;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	2209      	movs	r2, #9
 8000a9a:	775a      	strb	r2, [r3, #29]

				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa2:	4854      	ldr	r0, [pc, #336]	; (8000bf4 <HAL_I2C_MasterRxCpltCallback+0x1cc>)
 8000aa4:	f002 f96a 	bl	8002d7c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aae:	4851      	ldr	r0, [pc, #324]	; (8000bf4 <HAL_I2C_MasterRxCpltCallback+0x1cc>)
 8000ab0:	f002 f964 	bl	8002d7c <HAL_GPIO_WritePin>
				dbg(64)
 8000ab4:	4b50      	ldr	r3, [pc, #320]	; (8000bf8 <HAL_I2C_MasterRxCpltCallback+0x1d0>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b46      	cmp	r3, #70	; 0x46
 8000aba:	d902      	bls.n	8000ac2 <HAL_I2C_MasterRxCpltCallback+0x9a>
 8000abc:	4b4e      	ldr	r3, [pc, #312]	; (8000bf8 <HAL_I2C_MasterRxCpltCallback+0x1d0>)
 8000abe:	2202      	movs	r2, #2
 8000ac0:	701a      	strb	r2, [r3, #0]
 8000ac2:	4b4d      	ldr	r3, [pc, #308]	; (8000bf8 <HAL_I2C_MasterRxCpltCallback+0x1d0>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	1c5a      	adds	r2, r3, #1
 8000ac8:	b2d1      	uxtb	r1, r2
 8000aca:	4a4b      	ldr	r2, [pc, #300]	; (8000bf8 <HAL_I2C_MasterRxCpltCallback+0x1d0>)
 8000acc:	7011      	strb	r1, [r2, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b4a      	ldr	r3, [pc, #296]	; (8000bfc <HAL_I2C_MasterRxCpltCallback+0x1d4>)
 8000ad2:	2140      	movs	r1, #64	; 0x40
 8000ad4:	5499      	strb	r1, [r3, r2]
			}

			break;
 8000ad6:	e07d      	b.n	8000bd4 <HAL_I2C_MasterRxCpltCallback+0x1ac>
		case wait_read_first_TLV493D_A1B6:
			l_i2c_ext->state = need_read_first_TLV493D_A1B6;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2204      	movs	r2, #4
 8000adc:	711a      	strb	r2, [r3, #4]
			//dbg(25)

			//__HAL_TIM_CLEAR_FLAG(l_i2c_ext->timer, TIM_FLAG_UPDATE);
			//__HAL_TIM_SET_COUNTER(l_i2c_ext->timer, 0);
			//HAL_TIM_Base_Start_IT(l_i2c_ext->timer);
			l_i2c_ext->timer->Instance->SR = 0;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
			l_i2c_ext->timer->Instance->CNT = 0;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
			//l_i2c_ext->timer->State = HAL_TIM_STATE_BUSY;
			l_i2c_ext->timer->Instance->CR1 |= TIM_CR1_CEN;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f042 0201 	orr.w	r2, r2, #1
 8000b04:	601a      	str	r2, [r3, #0]

			break;
 8000b06:	e068      	b.n	8000bda <HAL_I2C_MasterRxCpltCallback+0x1b2>
		case need_read_first_TLV493D_A1B6:
			//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);

			l_i2c_ext->state = wait_read_second_TLV493D_A1B6;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2205      	movs	r2, #5
 8000b0c:	711a      	strb	r2, [r3, #4]

			//dbg(26)

			if (TLV493D_A1B6_preread(hi2c, l_i2c_ext->second_TLV493D_A1B6_address) != HAL_OK) {
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	7f1b      	ldrb	r3, [r3, #28]
 8000b12:	4619      	mov	r1, r3
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff fd67 	bl	80005e8 <TLV493D_A1B6_preread>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d05b      	beq.n	8000bd8 <HAL_I2C_MasterRxCpltCallback+0x1b0>
				l_i2c_ext->error = second_TLV493D_A1B6_preread_error;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	220a      	movs	r2, #10
 8000b24:	775a      	strb	r2, [r3, #29]

				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b2c:	4831      	ldr	r0, [pc, #196]	; (8000bf4 <HAL_I2C_MasterRxCpltCallback+0x1cc>)
 8000b2e:	f002 f925 	bl	8002d7c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b38:	482e      	ldr	r0, [pc, #184]	; (8000bf4 <HAL_I2C_MasterRxCpltCallback+0x1cc>)
 8000b3a:	f002 f91f 	bl	8002d7c <HAL_GPIO_WritePin>
				dbg(65)
 8000b3e:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <HAL_I2C_MasterRxCpltCallback+0x1d0>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b46      	cmp	r3, #70	; 0x46
 8000b44:	d902      	bls.n	8000b4c <HAL_I2C_MasterRxCpltCallback+0x124>
 8000b46:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <HAL_I2C_MasterRxCpltCallback+0x1d0>)
 8000b48:	2202      	movs	r2, #2
 8000b4a:	701a      	strb	r2, [r3, #0]
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <HAL_I2C_MasterRxCpltCallback+0x1d0>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	b2d1      	uxtb	r1, r2
 8000b54:	4a28      	ldr	r2, [pc, #160]	; (8000bf8 <HAL_I2C_MasterRxCpltCallback+0x1d0>)
 8000b56:	7011      	strb	r1, [r2, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <HAL_I2C_MasterRxCpltCallback+0x1d4>)
 8000b5c:	2141      	movs	r1, #65	; 0x41
 8000b5e:	5499      	strb	r1, [r3, r2]
			}

			break;
 8000b60:	e03a      	b.n	8000bd8 <HAL_I2C_MasterRxCpltCallback+0x1b0>
		case wait_read_second_TLV493D_A1B6:
			l_i2c_ext->state = need_read_second_TLV493D_A1B6;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	2206      	movs	r2, #6
 8000b66:	711a      	strb	r2, [r3, #4]

			//dbg(27)

			l_i2c_ext->timer->Instance->SR = 0;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
			l_i2c_ext->timer->Instance->CNT = 0;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24
			//__HAL_TIM_CLEAR_FLAG(l_i2c_ext->timer, TIM_FLAG_UPDATE);
			//__HAL_TIM_SET_COUNTER(l_i2c_ext->timer, 0);
			//HAL_TIM_Base_Start_IT(l_i2c_ext->timer);
			//l_i2c_ext->timer->State = HAL_TIM_STATE_BUSY;
			l_i2c_ext->timer->Instance->CR1 |= TIM_CR1_CEN;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f042 0201 	orr.w	r2, r2, #1
 8000b8e:	601a      	str	r2, [r3, #0]

			break;
 8000b90:	e023      	b.n	8000bda <HAL_I2C_MasterRxCpltCallback+0x1b2>
		case need_read_second_TLV493D_A1B6:
			l_i2c_ext->state = data_ready;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2207      	movs	r2, #7
 8000b96:	711a      	strb	r2, [r3, #4]

			//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);

			//dbg(23)

			break;
 8000b98:	e01f      	b.n	8000bda <HAL_I2C_MasterRxCpltCallback+0x1b2>
		default:
			l_i2c_ext->error = unattended_state_after_reading_i2c;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	775a      	strb	r2, [r3, #29]

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba6:	4813      	ldr	r0, [pc, #76]	; (8000bf4 <HAL_I2C_MasterRxCpltCallback+0x1cc>)
 8000ba8:	f002 f8e8 	bl	8002d7c <HAL_GPIO_WritePin>
			dbg(66)
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_I2C_MasterRxCpltCallback+0x1d0>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b46      	cmp	r3, #70	; 0x46
 8000bb2:	d902      	bls.n	8000bba <HAL_I2C_MasterRxCpltCallback+0x192>
 8000bb4:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_I2C_MasterRxCpltCallback+0x1d0>)
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <HAL_I2C_MasterRxCpltCallback+0x1d0>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	b2d1      	uxtb	r1, r2
 8000bc2:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <HAL_I2C_MasterRxCpltCallback+0x1d0>)
 8000bc4:	7011      	strb	r1, [r2, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_I2C_MasterRxCpltCallback+0x1d4>)
 8000bca:	2142      	movs	r1, #66	; 0x42
 8000bcc:	5499      	strb	r1, [r3, r2]
 8000bce:	e004      	b.n	8000bda <HAL_I2C_MasterRxCpltCallback+0x1b2>
			return;
 8000bd0:	bf00      	nop
 8000bd2:	e002      	b.n	8000bda <HAL_I2C_MasterRxCpltCallback+0x1b2>
			break;
 8000bd4:	bf00      	nop
 8000bd6:	e000      	b.n	8000bda <HAL_I2C_MasterRxCpltCallback+0x1b2>
			break;
 8000bd8:	bf00      	nop
	}
}
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2000014c 	.word	0x2000014c
 8000be4:	200001a0 	.word	0x200001a0
 8000be8:	10000134 	.word	0x10000134
 8000bec:	10000154 	.word	0x10000154
 8000bf0:	10000114 	.word	0x10000114
 8000bf4:	40020c00 	.word	0x40020c00
 8000bf8:	100000a7 	.word	0x100000a7
 8000bfc:	10000060 	.word	0x10000060

08000c00 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a31      	ldr	r2, [pc, #196]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d15a      	bne.n	8000cc6 <HAL_TIM_OC_DelayElapsedCallback+0xc6>
		if (l_sensors_points.current_point_index < l_sensors_points.number_of_poits) {
 8000c10:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8000c12:	785a      	ldrb	r2, [r3, #1]
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d23b      	bcs.n	8000c94 <HAL_TIM_OC_DelayElapsedCallback+0x94>
			//*(&TIM1->CCR1 + l_sensors_points.current_point_index % 4 * 4) = l_sensors_points.on_points_word_arr[l_sensors_points.current_point_index];

			switch (l_sensors_points.current_point_index % 4) {
 8000c1c:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8000c1e:	785b      	ldrb	r3, [r3, #1]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	d82f      	bhi.n	8000c88 <HAL_TIM_OC_DelayElapsedCallback+0x88>
 8000c28:	a201      	add	r2, pc, #4	; (adr r2, 8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 8000c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2e:	bf00      	nop
 8000c30:	08000c41 	.word	0x08000c41
 8000c34:	08000c53 	.word	0x08000c53
 8000c38:	08000c65 	.word	0x08000c65
 8000c3c:	08000c77 	.word	0x08000c77
				case 0: TIM1->CCR1 = l_sensors_points.on_points_word_arr[l_sensors_points.current_point_index]; break;
 8000c40:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8000c42:	785b      	ldrb	r3, [r3, #1]
 8000c44:	4a23      	ldr	r2, [pc, #140]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	889a      	ldrh	r2, [r3, #4]
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0xd8>)
 8000c4e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c50:	e01a      	b.n	8000c88 <HAL_TIM_OC_DelayElapsedCallback+0x88>
				case 1: TIM1->CCR2 = l_sensors_points.on_points_word_arr[l_sensors_points.current_point_index]; break;
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8000c54:	785b      	ldrb	r3, [r3, #1]
 8000c56:	4a1f      	ldr	r2, [pc, #124]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	889a      	ldrh	r2, [r3, #4]
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0xd8>)
 8000c60:	639a      	str	r2, [r3, #56]	; 0x38
 8000c62:	e011      	b.n	8000c88 <HAL_TIM_OC_DelayElapsedCallback+0x88>
				case 2: TIM1->CCR3 = l_sensors_points.on_points_word_arr[l_sensors_points.current_point_index]; break;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8000c66:	785b      	ldrb	r3, [r3, #1]
 8000c68:	4a1a      	ldr	r2, [pc, #104]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	889a      	ldrh	r2, [r3, #4]
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0xd8>)
 8000c72:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c74:	e008      	b.n	8000c88 <HAL_TIM_OC_DelayElapsedCallback+0x88>
				case 3: TIM1->CCR4 = l_sensors_points.on_points_word_arr[l_sensors_points.current_point_index]; break;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8000c78:	785b      	ldrb	r3, [r3, #1]
 8000c7a:	4a16      	ldr	r2, [pc, #88]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	889a      	ldrh	r2, [r3, #4]
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0xd8>)
 8000c84:	641a      	str	r2, [r3, #64]	; 0x40
 8000c86:	bf00      	nop
			}

			l_sensors_points.current_point_index++;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8000c8a:	785b      	ldrb	r3, [r3, #1]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8000c92:	705a      	strb	r2, [r3, #1]
		}

		l_sensors_points.point_number++;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8000c96:	789b      	ldrb	r3, [r3, #2]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8000c9e:	709a      	strb	r2, [r3, #2]

		dbg(28)
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0xdc>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b46      	cmp	r3, #70	; 0x46
 8000ca6:	d902      	bls.n	8000cae <HAL_TIM_OC_DelayElapsedCallback+0xae>
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0xdc>)
 8000caa:	2202      	movs	r2, #2
 8000cac:	701a      	strb	r2, [r3, #0]
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0xdc>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	b2d1      	uxtb	r1, r2
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0xdc>)
 8000cb8:	7011      	strb	r1, [r2, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0xe0>)
 8000cbe:	211c      	movs	r1, #28
 8000cc0:	5499      	strb	r1, [r3, r2]

		do_read();
 8000cc2:	f000 fa91 	bl	80011e8 <do_read>
				//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
				//dbg(55)
				//break;
		//}
	}
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000268 	.word	0x20000268
 8000cd4:	100000ac 	.word	0x100000ac
 8000cd8:	40010000 	.word	0x40010000
 8000cdc:	100000a7 	.word	0x100000a7
 8000ce0:	10000060 	.word	0x10000060

08000ce4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	static uint16_t	l_slots;
	//static uint16_t i = 0;

	if (htim == &htim5) {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a2d      	ldr	r2, [pc, #180]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	f000 825f 	beq.w	80011b4 <HAL_TIM_PeriodElapsedCallback+0x4d0>
			i = 0;
		}*/

		return;
	} else
	if (htim == &htim1) {
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a2b      	ldr	r2, [pc, #172]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d15e      	bne.n	8000dbc <HAL_TIM_PeriodElapsedCallback+0xd8>
		//dbg(56)

		if (l_sensors_points.point_number != l_sensors_points.number_of_poits) {
 8000cfe:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d00:	789a      	ldrb	r2, [r3, #2]
 8000d02:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d02e      	beq.n	8000d68 <HAL_TIM_PeriodElapsedCallback+0x84>
			l_error = (l_sensors_points.point_number > l_sensors_points.number_of_poits) ? sensor_point_overread : sensor_point_timer_underread;
 8000d0a:	4b28      	ldr	r3, [pc, #160]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d0c:	789a      	ldrb	r2, [r3, #2]
 8000d0e:	4b27      	ldr	r3, [pc, #156]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d901      	bls.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0x36>
 8000d16:	2211      	movs	r2, #17
 8000d18:	e000      	b.n	8000d1c <HAL_TIM_PeriodElapsedCallback+0x38>
 8000d1a:	2212      	movs	r2, #18
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000d1e:	701a      	strb	r2, [r3, #0]

			dbg(57)
 8000d20:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b46      	cmp	r3, #70	; 0x46
 8000d26:	d902      	bls.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0x4a>
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	b2d1      	uxtb	r1, r2
 8000d36:	4a1f      	ldr	r2, [pc, #124]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d38:	7011      	strb	r1, [r2, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000d3e:	2139      	movs	r1, #57	; 0x39
 8000d40:	5499      	strb	r1, [r3, r2]
			dbg(l_sensors_points.point_number)
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b46      	cmp	r3, #70	; 0x46
 8000d48:	d902      	bls.n	8000d50 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	701a      	strb	r2, [r3, #0]
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	1c5a      	adds	r2, r3, #1
 8000d56:	b2d1      	uxtb	r1, r2
 8000d58:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d5a:	7011      	strb	r1, [r2, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d60:	7899      	ldrb	r1, [r3, #2]
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000d64:	5499      	strb	r1, [r3, r2]
				init_compare_registers_for_sensors_timer();

			//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
		}

		return;
 8000d66:	e227      	b.n	80011b8 <HAL_TIM_PeriodElapsedCallback+0x4d4>
		} else if (l_sensors_points.current_point_index != l_sensors_points.number_of_poits) {
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d6a:	785a      	ldrb	r2, [r3, #1]
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d00b      	beq.n	8000d8c <HAL_TIM_PeriodElapsedCallback+0xa8>
				l_error = (l_sensors_points.current_point_index > l_sensors_points.number_of_poits) ? sensor_point_timer_overflow : sensor_point_timer_underflow;
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d76:	785a      	ldrb	r2, [r3, #1]
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d901      	bls.n	8000d84 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8000d80:	2213      	movs	r2, #19
 8000d82:	e000      	b.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8000d84:	2214      	movs	r2, #20
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000d88:	701a      	strb	r2, [r3, #0]
		return;
 8000d8a:	e215      	b.n	80011b8 <HAL_TIM_PeriodElapsedCallback+0x4d4>
			l_sensors_points.point_number = 0;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	709a      	strb	r2, [r3, #2]
			if (l_sensors_points.number_of_poits > 4)
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	f240 820e 	bls.w	80011b8 <HAL_TIM_PeriodElapsedCallback+0x4d4>
				init_compare_registers_for_sensors_timer();
 8000d9c:	f00b fa08 	bl	800c1b0 <init_compare_registers_for_sensors_timer>
		return;
 8000da0:	e20a      	b.n	80011b8 <HAL_TIM_PeriodElapsedCallback+0x4d4>
 8000da2:	bf00      	nop
 8000da4:	200002f8 	.word	0x200002f8
 8000da8:	20000268 	.word	0x20000268
 8000dac:	100000ac 	.word	0x100000ac
 8000db0:	100000a8 	.word	0x100000a8
 8000db4:	100000a7 	.word	0x100000a7
 8000db8:	10000060 	.word	0x10000060
	} else if (htim == &htim3) {
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a94      	ldr	r2, [pc, #592]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	f040 80ea 	bne.w	8000f9a <HAL_TIM_PeriodElapsedCallback+0x2b6>

		#define slot_set(a)									\
			if (l_slots & 1U << (a - 1))					\
				Led##a##_GPIO_Port->BSRR = Led##a##_Pin;

		l_slots	= l_slots_tick.tick[l_slots_tick.current_tick].off_slots;
 8000dc6:	4b93      	ldr	r3, [pc, #588]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000dc8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000dcc:	4a91      	ldr	r2, [pc, #580]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	889a      	ldrh	r2, [r3, #4]
 8000dd4:	4b90      	ldr	r3, [pc, #576]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000dd6:	801a      	strh	r2, [r3, #0]

		slot_reset(10)
 8000dd8:	4b8f      	ldr	r3, [pc, #572]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d003      	beq.n	8000dec <HAL_TIM_PeriodElapsedCallback+0x108>
 8000de4:	4b8d      	ldr	r3, [pc, #564]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000de6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000dea:	619a      	str	r2, [r3, #24]
		slot_reset(9)
 8000dec:	4b8a      	ldr	r3, [pc, #552]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_TIM_PeriodElapsedCallback+0x11c>
 8000df8:	4b88      	ldr	r3, [pc, #544]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000dfa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000dfe:	619a      	str	r2, [r3, #24]
		slot_reset(8)
 8000e00:	4b85      	ldr	r3, [pc, #532]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d003      	beq.n	8000e14 <HAL_TIM_PeriodElapsedCallback+0x130>
 8000e0c:	4b83      	ldr	r3, [pc, #524]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000e0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e12:	619a      	str	r2, [r3, #24]
		slot_reset(7)
 8000e14:	4b80      	ldr	r3, [pc, #512]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d003      	beq.n	8000e28 <HAL_TIM_PeriodElapsedCallback+0x144>
 8000e20:	4b7e      	ldr	r3, [pc, #504]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000e22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e26:	619a      	str	r2, [r3, #24]
		slot_reset(6)
 8000e28:	4b7b      	ldr	r3, [pc, #492]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	f003 0320 	and.w	r3, r3, #32
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_TIM_PeriodElapsedCallback+0x158>
 8000e34:	4b79      	ldr	r3, [pc, #484]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000e36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e3a:	619a      	str	r2, [r3, #24]
		slot_reset(5)
 8000e3c:	4b76      	ldr	r3, [pc, #472]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	f003 0310 	and.w	r3, r3, #16
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8000e48:	4b74      	ldr	r3, [pc, #464]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000e4a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e4e:	619a      	str	r2, [r3, #24]
		slot_reset(4)
 8000e50:	4b71      	ldr	r3, [pc, #452]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_TIM_PeriodElapsedCallback+0x180>
 8000e5c:	4b6f      	ldr	r3, [pc, #444]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000e5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e62:	619a      	str	r2, [r3, #24]
		slot_reset(3)
 8000e64:	4b6c      	ldr	r3, [pc, #432]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x194>
 8000e70:	4b6b      	ldr	r3, [pc, #428]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000e72:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e76:	619a      	str	r2, [r3, #24]
		slot_reset(2)
 8000e78:	4b67      	ldr	r3, [pc, #412]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000e84:	4b66      	ldr	r3, [pc, #408]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000e86:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e8a:	619a      	str	r2, [r3, #24]
		slot_reset(1)
 8000e8c:	4b62      	ldr	r3, [pc, #392]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_TIM_PeriodElapsedCallback+0x1bc>
 8000e98:	4b61      	ldr	r3, [pc, #388]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000e9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e9e:	619a      	str	r2, [r3, #24]

		l_slots	= l_slots_tick.tick[l_slots_tick.current_tick].on_slots;
 8000ea0:	4b5c      	ldr	r3, [pc, #368]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000ea2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000ea6:	4a5b      	ldr	r2, [pc, #364]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	88da      	ldrh	r2, [r3, #6]
 8000eae:	4b5a      	ldr	r3, [pc, #360]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000eb0:	801a      	strh	r2, [r3, #0]

		slot_set(10)
 8000eb2:	4b59      	ldr	r3, [pc, #356]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <HAL_TIM_PeriodElapsedCallback+0x1e0>
 8000ebe:	4b57      	ldr	r3, [pc, #348]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000ec0:	2280      	movs	r2, #128	; 0x80
 8000ec2:	619a      	str	r2, [r3, #24]
		slot_set(9)
 8000ec4:	4b54      	ldr	r3, [pc, #336]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <HAL_TIM_PeriodElapsedCallback+0x1f2>
 8000ed0:	4b52      	ldr	r3, [pc, #328]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000ed2:	2240      	movs	r2, #64	; 0x40
 8000ed4:	619a      	str	r2, [r3, #24]
		slot_set(8)
 8000ed6:	4b50      	ldr	r3, [pc, #320]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d002      	beq.n	8000ee8 <HAL_TIM_PeriodElapsedCallback+0x204>
 8000ee2:	4b4e      	ldr	r3, [pc, #312]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000ee4:	2220      	movs	r2, #32
 8000ee6:	619a      	str	r2, [r3, #24]
		slot_set(7)
 8000ee8:	4b4b      	ldr	r3, [pc, #300]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d002      	beq.n	8000efa <HAL_TIM_PeriodElapsedCallback+0x216>
 8000ef4:	4b49      	ldr	r3, [pc, #292]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000ef6:	2210      	movs	r2, #16
 8000ef8:	619a      	str	r2, [r3, #24]
		slot_set(6)
 8000efa:	4b47      	ldr	r3, [pc, #284]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	f003 0320 	and.w	r3, r3, #32
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <HAL_TIM_PeriodElapsedCallback+0x228>
 8000f06:	4b45      	ldr	r3, [pc, #276]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000f08:	2208      	movs	r2, #8
 8000f0a:	619a      	str	r2, [r3, #24]
		slot_set(5)
 8000f0c:	4b42      	ldr	r3, [pc, #264]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	f003 0310 	and.w	r3, r3, #16
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <HAL_TIM_PeriodElapsedCallback+0x23a>
 8000f18:	4b40      	ldr	r3, [pc, #256]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	619a      	str	r2, [r3, #24]
		slot_set(4)
 8000f1e:	4b3e      	ldr	r3, [pc, #248]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	f003 0308 	and.w	r3, r3, #8
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d002      	beq.n	8000f30 <HAL_TIM_PeriodElapsedCallback+0x24c>
 8000f2a:	4b3c      	ldr	r3, [pc, #240]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	619a      	str	r2, [r3, #24]
		slot_set(3)
 8000f30:	4b39      	ldr	r3, [pc, #228]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <HAL_TIM_PeriodElapsedCallback+0x25e>
 8000f3c:	4b38      	ldr	r3, [pc, #224]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000f3e:	2208      	movs	r2, #8
 8000f40:	619a      	str	r2, [r3, #24]
		slot_set(2)
 8000f42:	4b35      	ldr	r3, [pc, #212]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d002      	beq.n	8000f54 <HAL_TIM_PeriodElapsedCallback+0x270>
 8000f4e:	4b34      	ldr	r3, [pc, #208]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000f50:	2204      	movs	r2, #4
 8000f52:	619a      	str	r2, [r3, #24]
		slot_set(1)
 8000f54:	4b30      	ldr	r3, [pc, #192]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <HAL_TIM_PeriodElapsedCallback+0x282>
 8000f60:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000f62:	2202      	movs	r2, #2
 8000f64:	619a      	str	r2, [r3, #24]

		l_slots_tick.current_tick++;
 8000f66:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000f68:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	b25a      	sxtb	r2, r3
 8000f74:	4b27      	ldr	r3, [pc, #156]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000f76:	709a      	strb	r2, [r3, #2]

		if (l_slots_tick.current_tick >= l_slots_tick.number_of_ticks)
 8000f78:	4b26      	ldr	r3, [pc, #152]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000f7a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	db02      	blt.n	8000f8e <HAL_TIM_PeriodElapsedCallback+0x2aa>
			l_slots_tick.current_tick = 0;
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	709a      	strb	r2, [r3, #2]

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000f8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f92:	4824      	ldr	r0, [pc, #144]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000f94:	f001 ff0b 	bl	8002dae <HAL_GPIO_TogglePin>

		//dbg(14)

		return;
 8000f98:	e115      	b.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x4e2>
	} else if (htim == &htim14) {
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a22      	ldr	r2, [pc, #136]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d14e      	bne.n	8001040 <HAL_TIM_PeriodElapsedCallback+0x35c>
		if (
			(		(l_i2c1_ext.state == data_ready	|| l_i2c1_ext.error != no_error)
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000fa4:	791b      	ldrb	r3, [r3, #4]
 8000fa6:	b2db      	uxtb	r3, r3
		if (
 8000fa8:	2b07      	cmp	r3, #7
 8000faa:	d004      	beq.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0x2d2>
			(		(l_i2c1_ext.state == data_ready	|| l_i2c1_ext.error != no_error)
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000fae:	7f5b      	ldrb	r3, [r3, #29]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d013      	beq.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x2fa>
				&&	(l_i2c2_ext.state == data_ready	|| l_i2c2_ext.error != no_error)
 8000fb6:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000fb8:	791b      	ldrb	r3, [r3, #4]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b07      	cmp	r3, #7
 8000fbe:	d004      	beq.n	8000fca <HAL_TIM_PeriodElapsedCallback+0x2e6>
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000fc2:	7f5b      	ldrb	r3, [r3, #29]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d009      	beq.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x2fa>
				&&	(l_i2c3_ext.state == data_ready	|| l_i2c3_ext.error != no_error)
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000fcc:	791b      	ldrb	r3, [r3, #4]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b07      	cmp	r3, #7
 8000fd2:	d009      	beq.n	8000fe8 <HAL_TIM_PeriodElapsedCallback+0x304>
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000fd6:	7f5b      	ldrb	r3, [r3, #29]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d104      	bne.n	8000fe8 <HAL_TIM_PeriodElapsedCallback+0x304>
			)
			||	l_error != no_error
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 80ea 	beq.w	80011bc <HAL_TIM_PeriodElapsedCallback+0x4d8>
		) {
			//dbg(15)
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000fe8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000fee:	f001 fede 	bl	8002dae <HAL_GPIO_TogglePin>

			TIM14->CR1 &= ~TIM_CR1_CEN;
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a11      	ldr	r2, [pc, #68]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	6013      	str	r3, [r2, #0]
			TIM14->SR &= ~TIM_FLAG_UPDATE;
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	4a0e      	ldr	r2, [pc, #56]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001004:	f023 0301 	bic.w	r3, r3, #1
 8001008:	6113      	str	r3, [r2, #16]

			//dbg(40)
			need_send_data();
 800100a:	f00b f9bd 	bl	800c388 <need_send_data>
		}

		return;
 800100e:	e0d5      	b.n	80011bc <HAL_TIM_PeriodElapsedCallback+0x4d8>
 8001010:	200002b0 	.word	0x200002b0
 8001014:	100000d0 	.word	0x100000d0
 8001018:	20000462 	.word	0x20000462
 800101c:	40020000 	.word	0x40020000
 8001020:	40020800 	.word	0x40020800
 8001024:	40020c00 	.word	0x40020c00
 8001028:	20000418 	.word	0x20000418
 800102c:	10000114 	.word	0x10000114
 8001030:	10000134 	.word	0x10000134
 8001034:	10000154 	.word	0x10000154
 8001038:	100000a8 	.word	0x100000a8
 800103c:	40002000 	.word	0x40002000
	}

	t_i2c_ext *l_i2c_ext =
			(htim == l_i2c1_ext.timer) ? &l_i2c1_ext
 8001040:	4b62      	ldr	r3, [pc, #392]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001042:	689b      	ldr	r3, [r3, #8]
		:	(htim == l_i2c2_ext.timer) ? &l_i2c2_ext
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	d00f      	beq.n	800106a <HAL_TIM_PeriodElapsedCallback+0x386>
 800104a:	4b61      	ldr	r3, [pc, #388]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 800104c:	689b      	ldr	r3, [r3, #8]
		:	(htim == l_i2c3_ext.timer) ? &l_i2c3_ext
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	d008      	beq.n	8001066 <HAL_TIM_PeriodElapsedCallback+0x382>
 8001054:	4b5f      	ldr	r3, [pc, #380]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001056:	689b      	ldr	r3, [r3, #8]
		:	0;
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	429a      	cmp	r2, r3
 800105c:	d101      	bne.n	8001062 <HAL_TIM_PeriodElapsedCallback+0x37e>
 800105e:	4b5d      	ldr	r3, [pc, #372]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001060:	e004      	b.n	800106c <HAL_TIM_PeriodElapsedCallback+0x388>
 8001062:	2300      	movs	r3, #0
 8001064:	e002      	b.n	800106c <HAL_TIM_PeriodElapsedCallback+0x388>
		:	(htim == l_i2c3_ext.timer) ? &l_i2c3_ext
 8001066:	4b5a      	ldr	r3, [pc, #360]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001068:	e000      	b.n	800106c <HAL_TIM_PeriodElapsedCallback+0x388>
		:	(htim == l_i2c2_ext.timer) ? &l_i2c2_ext
 800106a:	4b58      	ldr	r3, [pc, #352]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x4e8>)
	t_i2c_ext *l_i2c_ext =
 800106c:	60fb      	str	r3, [r7, #12]

	if (l_i2c_ext != 0) {
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 8084 	beq.w	800117e <HAL_TIM_PeriodElapsedCallback+0x49a>
		//HAL_TIM_Base_Stop_IT(htim);

		switch (l_i2c_ext->state) {
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	791b      	ldrb	r3, [r3, #4]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b04      	cmp	r3, #4
 800107e:	d002      	beq.n	8001086 <HAL_TIM_PeriodElapsedCallback+0x3a2>
 8001080:	2b06      	cmp	r3, #6
 8001082:	d02e      	beq.n	80010e2 <HAL_TIM_PeriodElapsedCallback+0x3fe>
 8001084:	e05a      	b.n	800113c <HAL_TIM_PeriodElapsedCallback+0x458>
			case need_read_first_TLV493D_A1B6:
				if (TLV493D_A1B6_read(l_i2c_ext->i2c_pointer, l_i2c_ext->first_TLV493D_A1B6_address, l_i2c_ext->first_TLV493D_A1B6_array_pointer) != HAL_OK) {
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	7d19      	ldrb	r1, [r3, #20]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	461a      	mov	r2, r3
 8001094:	f7ff fa94 	bl	80005c0 <TLV493D_A1B6_read>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8090 	beq.w	80011c0 <HAL_TIM_PeriodElapsedCallback+0x4dc>
					l_i2c_ext->error = first_TLV493D_A1B6_read_error;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	220b      	movs	r2, #11
 80010a4:	775a      	strb	r2, [r3, #29]

					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ac:	484a      	ldr	r0, [pc, #296]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 80010ae:	f001 fe65 	bl	8002d7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b8:	4847      	ldr	r0, [pc, #284]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 80010ba:	f001 fe5f 	bl	8002d7c <HAL_GPIO_WritePin>
					dbg(67)
 80010be:	4b47      	ldr	r3, [pc, #284]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b46      	cmp	r3, #70	; 0x46
 80010c4:	d902      	bls.n	80010cc <HAL_TIM_PeriodElapsedCallback+0x3e8>
 80010c6:	4b45      	ldr	r3, [pc, #276]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80010c8:	2202      	movs	r2, #2
 80010ca:	701a      	strb	r2, [r3, #0]
 80010cc:	4b43      	ldr	r3, [pc, #268]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	b2d1      	uxtb	r1, r2
 80010d4:	4a41      	ldr	r2, [pc, #260]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80010d6:	7011      	strb	r1, [r2, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b41      	ldr	r3, [pc, #260]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 80010dc:	2143      	movs	r1, #67	; 0x43
 80010de:	5499      	strb	r1, [r3, r2]
				}
				//dbg(16)

				break;
 80010e0:	e06e      	b.n	80011c0 <HAL_TIM_PeriodElapsedCallback+0x4dc>
			case need_read_second_TLV493D_A1B6:
				if (TLV493D_A1B6_read(l_i2c_ext->i2c_pointer, l_i2c_ext->second_TLV493D_A1B6_address, l_i2c_ext->second_TLV493D_A1B6_array_pointer) != HAL_OK) {
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	7f19      	ldrb	r1, [r3, #28]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	461a      	mov	r2, r3
 80010f0:	f7ff fa66 	bl	80005c0 <TLV493D_A1B6_read>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d064      	beq.n	80011c4 <HAL_TIM_PeriodElapsedCallback+0x4e0>
					l_i2c_ext->error = second_TLV493D_A1B6_read_error;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	220c      	movs	r2, #12
 80010fe:	775a      	strb	r2, [r3, #29]

					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001106:	4834      	ldr	r0, [pc, #208]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001108:	f001 fe38 	bl	8002d7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001112:	4831      	ldr	r0, [pc, #196]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001114:	f001 fe32 	bl	8002d7c <HAL_GPIO_WritePin>
					dbg(68)
 8001118:	4b30      	ldr	r3, [pc, #192]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b46      	cmp	r3, #70	; 0x46
 800111e:	d902      	bls.n	8001126 <HAL_TIM_PeriodElapsedCallback+0x442>
 8001120:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001122:	2202      	movs	r2, #2
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	b2d1      	uxtb	r1, r2
 800112e:	4a2b      	ldr	r2, [pc, #172]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001130:	7011      	strb	r1, [r2, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8001136:	2144      	movs	r1, #68	; 0x44
 8001138:	5499      	strb	r1, [r3, r2]
				}
				//dbg(17)

				break;
 800113a:	e043      	b.n	80011c4 <HAL_TIM_PeriodElapsedCallback+0x4e0>
			default:
				l_i2c_ext->error = unattended_state_after_timer_overflow;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	220e      	movs	r2, #14
 8001140:	775a      	strb	r2, [r3, #29]

				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001148:	4823      	ldr	r0, [pc, #140]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 800114a:	f001 fe17 	bl	8002d7c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001154:	4820      	ldr	r0, [pc, #128]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001156:	f001 fe11 	bl	8002d7c <HAL_GPIO_WritePin>
				dbg(69)
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b46      	cmp	r3, #70	; 0x46
 8001160:	d902      	bls.n	8001168 <HAL_TIM_PeriodElapsedCallback+0x484>
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001164:	2202      	movs	r2, #2
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	b2d1      	uxtb	r1, r2
 8001170:	4a1a      	ldr	r2, [pc, #104]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001172:	7011      	strb	r1, [r2, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8001178:	2145      	movs	r1, #69	; 0x45
 800117a:	5499      	strb	r1, [r3, r2]
 800117c:	e023      	b.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x4e2>
		}
	} else {
		l_error = unknown_timer;
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001180:	220d      	movs	r2, #13
 8001182:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001184:	2201      	movs	r2, #1
 8001186:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118a:	4813      	ldr	r0, [pc, #76]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 800118c:	f001 fdf6 	bl	8002d7c <HAL_GPIO_WritePin>
		dbg(70)
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b46      	cmp	r3, #70	; 0x46
 8001196:	d902      	bls.n	800119e <HAL_TIM_PeriodElapsedCallback+0x4ba>
 8001198:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800119a:	2202      	movs	r2, #2
 800119c:	701a      	strb	r2, [r3, #0]
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	b2d1      	uxtb	r1, r2
 80011a6:	4a0d      	ldr	r2, [pc, #52]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80011a8:	7011      	strb	r1, [r2, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 80011ae:	2146      	movs	r1, #70	; 0x46
 80011b0:	5499      	strb	r1, [r3, r2]
 80011b2:	e008      	b.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x4e2>
		return;
 80011b4:	bf00      	nop
 80011b6:	e006      	b.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x4e2>
		return;
 80011b8:	bf00      	nop
 80011ba:	e004      	b.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x4e2>
		return;
 80011bc:	bf00      	nop
 80011be:	e002      	b.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x4e2>
				break;
 80011c0:	bf00      	nop
 80011c2:	e000      	b.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x4e2>
				break;
 80011c4:	bf00      	nop
	}
}
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	10000114 	.word	0x10000114
 80011d0:	10000134 	.word	0x10000134
 80011d4:	10000154 	.word	0x10000154
 80011d8:	40020c00 	.word	0x40020c00
 80011dc:	100000a7 	.word	0x100000a7
 80011e0:	10000060 	.word	0x10000060
 80011e4:	100000a8 	.word	0x100000a8

080011e8 <do_read>:

void do_read() {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	//NVIC_DisableIRQ(OTG_FS_IRQn);		//Disable USB interrupt

	if (	l_i2c1_ext.state != init_state
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <do_read+0x88>)
 80011ee:	791b      	ldrb	r3, [r3, #4]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d109      	bne.n	800120a <do_read+0x22>
		||	l_i2c2_ext.state != init_state
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <do_read+0x8c>)
 80011f8:	791b      	ldrb	r3, [r3, #4]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d104      	bne.n	800120a <do_read+0x22>
		||	l_i2c3_ext.state != init_state
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <do_read+0x90>)
 8001202:	791b      	ldrb	r3, [r3, #4]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d011      	beq.n	800122e <do_read+0x46>
	) {
		dbg(8)
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <do_read+0x94>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b46      	cmp	r3, #70	; 0x46
 8001210:	d902      	bls.n	8001218 <do_read+0x30>
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <do_read+0x94>)
 8001214:	2202      	movs	r2, #2
 8001216:	701a      	strb	r2, [r3, #0]
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <do_read+0x94>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	b2d1      	uxtb	r1, r2
 8001220:	4a16      	ldr	r2, [pc, #88]	; (800127c <do_read+0x94>)
 8001222:	7011      	strb	r1, [r2, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <do_read+0x98>)
 8001228:	2108      	movs	r1, #8
 800122a:	5499      	strb	r1, [r3, r2]

		return;
 800122c:	e01f      	b.n	800126e <do_read+0x86>
	}

	NVIC_EnableIRQ(EXTI9_5_IRQn);
 800122e:	2017      	movs	r0, #23
 8001230:	f7ff f94c 	bl	80004cc <__NVIC_EnableIRQ>
	if (QMC5883L_set_continuous_mode(&hi2c1) != HAL_OK) {
 8001234:	4813      	ldr	r0, [pc, #76]	; (8001284 <do_read+0x9c>)
 8001236:	f7ff f98b 	bl	8000550 <QMC5883L_set_continuous_mode>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <do_read+0x5e>
		l_i2c1_ext.error = QMC5883L_set_continuous_mode_error;
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <do_read+0x88>)
 8001242:	2203      	movs	r2, #3
 8001244:	775a      	strb	r2, [r3, #29]
	}

	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001246:	2028      	movs	r0, #40	; 0x28
 8001248:	f7ff f940 	bl	80004cc <__NVIC_EnableIRQ>
	if (QMC5883L_set_continuous_mode(&hi2c2) != HAL_OK) {
 800124c:	480e      	ldr	r0, [pc, #56]	; (8001288 <do_read+0xa0>)
 800124e:	f7ff f97f 	bl	8000550 <QMC5883L_set_continuous_mode>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <do_read+0x76>
		l_i2c2_ext.error = QMC5883L_set_continuous_mode_error;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <do_read+0x8c>)
 800125a:	2203      	movs	r2, #3
 800125c:	775a      	strb	r2, [r3, #29]
	}

	l_i2c3_ext.state = need_preread_first_TLV493D_A1B6;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <do_read+0x90>)
 8001260:	2203      	movs	r2, #3
 8001262:	711a      	strb	r2, [r3, #4]
	HAL_I2C_MasterRxCpltCallback(&hi2c3);
 8001264:	4809      	ldr	r0, [pc, #36]	; (800128c <do_read+0xa4>)
 8001266:	f7ff fbdf 	bl	8000a28 <HAL_I2C_MasterRxCpltCallback>

	get_time();		//get time from RTC
 800126a:	f7ff fa33 	bl	80006d4 <get_time>
}
 800126e:	bd80      	pop	{r7, pc}
 8001270:	10000114 	.word	0x10000114
 8001274:	10000134 	.word	0x10000134
 8001278:	10000154 	.word	0x10000154
 800127c:	100000a7 	.word	0x100000a7
 8001280:	10000060 	.word	0x10000060
 8001284:	2000014c 	.word	0x2000014c
 8001288:	200001a0 	.word	0x200001a0
 800128c:	200001f4 	.word	0x200001f4

08001290 <QMC5883L_soft_reset_and_init>:

void QMC5883L_soft_reset_and_init(I2C_HandleTypeDef *hi2c) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	t_i2c_ext *l_i2c_ext =
			(hi2c == &hi2c1) ? &l_i2c1_ext
		:	(hi2c == &hi2c2) ? &l_i2c2_ext
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a2f      	ldr	r2, [pc, #188]	; (8001358 <QMC5883L_soft_reset_and_init+0xc8>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d007      	beq.n	80012b0 <QMC5883L_soft_reset_and_init+0x20>
		:	&l_i2c3_ext;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a2e      	ldr	r2, [pc, #184]	; (800135c <QMC5883L_soft_reset_and_init+0xcc>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d101      	bne.n	80012ac <QMC5883L_soft_reset_and_init+0x1c>
 80012a8:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <QMC5883L_soft_reset_and_init+0xd0>)
 80012aa:	e002      	b.n	80012b2 <QMC5883L_soft_reset_and_init+0x22>
 80012ac:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <QMC5883L_soft_reset_and_init+0xd4>)
 80012ae:	e000      	b.n	80012b2 <QMC5883L_soft_reset_and_init+0x22>
		:	(hi2c == &hi2c2) ? &l_i2c2_ext
 80012b0:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <QMC5883L_soft_reset_and_init+0xd8>)
	t_i2c_ext *l_i2c_ext =
 80012b2:	60fb      	str	r3, [r7, #12]

	if (QMC5883L_soft_reset(hi2c) == HAL_OK) {
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f00a fea9 	bl	800c00c <QMC5883L_soft_reset>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d126      	bne.n	800130e <QMC5883L_soft_reset_and_init+0x7e>
		if (QMC5883L_init(hi2c) != HAL_OK) {
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f00a feb1 	bl	800c028 <QMC5883L_init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d040      	beq.n	800134e <QMC5883L_soft_reset_and_init+0xbe>
			l_i2c_ext->error = QMC5883L_init_error;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2201      	movs	r2, #1
 80012d0:	775a      	strb	r2, [r3, #29]

			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d8:	4824      	ldr	r0, [pc, #144]	; (800136c <QMC5883L_soft_reset_and_init+0xdc>)
 80012da:	f001 fd4f 	bl	8002d7c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e4:	4821      	ldr	r0, [pc, #132]	; (800136c <QMC5883L_soft_reset_and_init+0xdc>)
 80012e6:	f001 fd49 	bl	8002d7c <HAL_GPIO_WritePin>
			dbg(71)
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <QMC5883L_soft_reset_and_init+0xe0>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b46      	cmp	r3, #70	; 0x46
 80012f0:	d902      	bls.n	80012f8 <QMC5883L_soft_reset_and_init+0x68>
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <QMC5883L_soft_reset_and_init+0xe0>)
 80012f4:	2202      	movs	r2, #2
 80012f6:	701a      	strb	r2, [r3, #0]
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <QMC5883L_soft_reset_and_init+0xe0>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	1c5a      	adds	r2, r3, #1
 80012fe:	b2d1      	uxtb	r1, r2
 8001300:	4a1b      	ldr	r2, [pc, #108]	; (8001370 <QMC5883L_soft_reset_and_init+0xe0>)
 8001302:	7011      	strb	r1, [r2, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <QMC5883L_soft_reset_and_init+0xe4>)
 8001308:	2147      	movs	r1, #71	; 0x47
 800130a:	5499      	strb	r1, [r3, r2]

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
		dbg(72)
	}
}
 800130c:	e01f      	b.n	800134e <QMC5883L_soft_reset_and_init+0xbe>
 		l_i2c_ext->error = QMC5883L_soft_reset_error;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2202      	movs	r2, #2
 8001312:	775a      	strb	r2, [r3, #29]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001314:	2201      	movs	r2, #1
 8001316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800131a:	4814      	ldr	r0, [pc, #80]	; (800136c <QMC5883L_soft_reset_and_init+0xdc>)
 800131c:	f001 fd2e 	bl	8002d7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001320:	2201      	movs	r2, #1
 8001322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001326:	4811      	ldr	r0, [pc, #68]	; (800136c <QMC5883L_soft_reset_and_init+0xdc>)
 8001328:	f001 fd28 	bl	8002d7c <HAL_GPIO_WritePin>
		dbg(72)
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <QMC5883L_soft_reset_and_init+0xe0>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b46      	cmp	r3, #70	; 0x46
 8001332:	d902      	bls.n	800133a <QMC5883L_soft_reset_and_init+0xaa>
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <QMC5883L_soft_reset_and_init+0xe0>)
 8001336:	2202      	movs	r2, #2
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <QMC5883L_soft_reset_and_init+0xe0>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	b2d1      	uxtb	r1, r2
 8001342:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <QMC5883L_soft_reset_and_init+0xe0>)
 8001344:	7011      	strb	r1, [r2, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <QMC5883L_soft_reset_and_init+0xe4>)
 800134a:	2148      	movs	r1, #72	; 0x48
 800134c:	5499      	strb	r1, [r3, r2]
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000014c 	.word	0x2000014c
 800135c:	200001a0 	.word	0x200001a0
 8001360:	10000134 	.word	0x10000134
 8001364:	10000154 	.word	0x10000154
 8001368:	10000114 	.word	0x10000114
 800136c:	40020c00 	.word	0x40020c00
 8001370:	100000a7 	.word	0x100000a7
 8001374:	10000060 	.word	0x10000060

08001378 <TLV493D_A1B6_init>:

void TLV493D_A1B6_init(I2C_HandleTypeDef *hi2c) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	t_i2c_ext *l_i2c_ext =
			(hi2c == &hi2c1) ? &l_i2c1_ext
		:	(hi2c == &hi2c2) ? &l_i2c2_ext
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a39      	ldr	r2, [pc, #228]	; (8001468 <TLV493D_A1B6_init+0xf0>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d007      	beq.n	8001398 <TLV493D_A1B6_init+0x20>
		:	&l_i2c3_ext;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a38      	ldr	r2, [pc, #224]	; (800146c <TLV493D_A1B6_init+0xf4>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d101      	bne.n	8001394 <TLV493D_A1B6_init+0x1c>
 8001390:	4b37      	ldr	r3, [pc, #220]	; (8001470 <TLV493D_A1B6_init+0xf8>)
 8001392:	e002      	b.n	800139a <TLV493D_A1B6_init+0x22>
 8001394:	4b37      	ldr	r3, [pc, #220]	; (8001474 <TLV493D_A1B6_init+0xfc>)
 8001396:	e000      	b.n	800139a <TLV493D_A1B6_init+0x22>
		:	(hi2c == &hi2c2) ? &l_i2c2_ext
 8001398:	4b37      	ldr	r3, [pc, #220]	; (8001478 <TLV493D_A1B6_init+0x100>)
	t_i2c_ext *l_i2c_ext =
 800139a:	60fb      	str	r3, [r7, #12]

	if (TLV493D_A1B6_set_mode(hi2c, l_i2c_ext->first_TLV493D_A1B6_address, 0) == HAL_OK)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	7d1b      	ldrb	r3, [r3, #20]
 80013a0:	2200      	movs	r2, #0
 80013a2:	4619      	mov	r1, r3
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f00a fea5 	bl	800c0f4 <TLV493D_A1B6_set_mode>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d103      	bne.n	80013b8 <TLV493D_A1B6_init+0x40>
		HAL_Delay(1);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f001 f9e1 	bl	8002778 <HAL_Delay>
 80013b6:	e01f      	b.n	80013f8 <TLV493D_A1B6_init+0x80>
	else {
		l_i2c_ext->error = first_TLV493D_A1B6_set_mode_error;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2207      	movs	r2, #7
 80013bc:	775a      	strb	r2, [r3, #29]

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c4:	482d      	ldr	r0, [pc, #180]	; (800147c <TLV493D_A1B6_init+0x104>)
 80013c6:	f001 fcd9 	bl	8002d7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013d0:	482a      	ldr	r0, [pc, #168]	; (800147c <TLV493D_A1B6_init+0x104>)
 80013d2:	f001 fcd3 	bl	8002d7c <HAL_GPIO_WritePin>
		dbg(73)
 80013d6:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <TLV493D_A1B6_init+0x108>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b46      	cmp	r3, #70	; 0x46
 80013dc:	d902      	bls.n	80013e4 <TLV493D_A1B6_init+0x6c>
 80013de:	4b28      	ldr	r3, [pc, #160]	; (8001480 <TLV493D_A1B6_init+0x108>)
 80013e0:	2202      	movs	r2, #2
 80013e2:	701a      	strb	r2, [r3, #0]
 80013e4:	4b26      	ldr	r3, [pc, #152]	; (8001480 <TLV493D_A1B6_init+0x108>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	b2d1      	uxtb	r1, r2
 80013ec:	4a24      	ldr	r2, [pc, #144]	; (8001480 <TLV493D_A1B6_init+0x108>)
 80013ee:	7011      	strb	r1, [r2, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b24      	ldr	r3, [pc, #144]	; (8001484 <TLV493D_A1B6_init+0x10c>)
 80013f4:	2149      	movs	r1, #73	; 0x49
 80013f6:	5499      	strb	r1, [r3, r2]
	}

	if (l_i2c_ext->error == no_error) {
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	7f5b      	ldrb	r3, [r3, #29]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d12d      	bne.n	800145e <TLV493D_A1B6_init+0xe6>
		if (TLV493D_A1B6_set_mode(hi2c, l_i2c_ext->second_TLV493D_A1B6_address, 0) == HAL_OK)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	7f1b      	ldrb	r3, [r3, #28]
 8001406:	2200      	movs	r2, #0
 8001408:	4619      	mov	r1, r3
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f00a fe72 	bl	800c0f4 <TLV493D_A1B6_set_mode>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d103      	bne.n	800141e <TLV493D_A1B6_init+0xa6>
			HAL_Delay(1);
 8001416:	2001      	movs	r0, #1
 8001418:	f001 f9ae 	bl	8002778 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
			dbg(74)
		}
	}
}
 800141c:	e01f      	b.n	800145e <TLV493D_A1B6_init+0xe6>
			l_i2c_ext->error = second_TLV493D_A1B6_set_mode_error;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2208      	movs	r2, #8
 8001422:	775a      	strb	r2, [r3, #29]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800142a:	4814      	ldr	r0, [pc, #80]	; (800147c <TLV493D_A1B6_init+0x104>)
 800142c:	f001 fca6 	bl	8002d7c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001430:	2201      	movs	r2, #1
 8001432:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001436:	4811      	ldr	r0, [pc, #68]	; (800147c <TLV493D_A1B6_init+0x104>)
 8001438:	f001 fca0 	bl	8002d7c <HAL_GPIO_WritePin>
			dbg(74)
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <TLV493D_A1B6_init+0x108>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b46      	cmp	r3, #70	; 0x46
 8001442:	d902      	bls.n	800144a <TLV493D_A1B6_init+0xd2>
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <TLV493D_A1B6_init+0x108>)
 8001446:	2202      	movs	r2, #2
 8001448:	701a      	strb	r2, [r3, #0]
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <TLV493D_A1B6_init+0x108>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	b2d1      	uxtb	r1, r2
 8001452:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <TLV493D_A1B6_init+0x108>)
 8001454:	7011      	strb	r1, [r2, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <TLV493D_A1B6_init+0x10c>)
 800145a:	214a      	movs	r1, #74	; 0x4a
 800145c:	5499      	strb	r1, [r3, r2]
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000014c 	.word	0x2000014c
 800146c:	200001a0 	.word	0x200001a0
 8001470:	10000134 	.word	0x10000134
 8001474:	10000154 	.word	0x10000154
 8001478:	10000114 	.word	0x10000114
 800147c:	40020c00 	.word	0x40020c00
 8001480:	100000a7 	.word	0x100000a7
 8001484:	10000060 	.word	0x10000060

08001488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148c:	f001 f902 	bl	8002694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001490:	f000 f86a 	bl	8001568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001494:	f000 fc74 	bl	8001d80 <MX_GPIO_Init>
  MX_RTC_Init();
 8001498:	f000 f9ec 	bl	8001874 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 800149c:	f00a fe58 	bl	800c150 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 80014a0:	f000 fb56 	bl	8001b50 <MX_TIM5_Init>
  MX_TIM1_Init();
 80014a4:	f000 fa40 	bl	8001928 <MX_TIM1_Init>
  MX_TIM3_Init();
 80014a8:	f000 fb02 	bl	8001ab0 <MX_TIM3_Init>
  MX_TIM6_Init();
 80014ac:	f000 fb9e 	bl	8001bec <MX_TIM6_Init>
  MX_TIM7_Init();
 80014b0:	f000 fbda 	bl	8001c68 <MX_TIM7_Init>
  MX_TIM13_Init();
 80014b4:	f000 fc16 	bl	8001ce4 <MX_TIM13_Init>
  MX_TIM14_Init();
 80014b8:	f000 fc40 	bl	8001d3c <MX_TIM14_Init>
  MX_I2C1_Init();
 80014bc:	f000 f8c0 	bl	8001640 <MX_I2C1_Init>
  MX_I2C3_Init();
 80014c0:	f000 f97a 	bl	80017b8 <MX_I2C3_Init>
  MX_I2C2_Init();
 80014c4:	f000 f918 	bl	80016f8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	//Init_OnBoard_LEDs(); // calls LEDs GPIO pins initialization function
	//configure_Button(); // call Push button GPIO pins initialization function
	//GPIO_PinState state; // Define a enum struct which contain boolean states
    init_variables_in_ccmram();
 80014c8:	f7ff f8a2 	bl	8000610 <init_variables_in_ccmram>

  	TIM5->SR = 0;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <main+0xb4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
	TIM5->DIER = TIM_IT_UPDATE;
 80014d2:	4b1a      	ldr	r3, [pc, #104]	; (800153c <main+0xb4>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	60da      	str	r2, [r3, #12]

	TIM3->SR = 0;
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <main+0xb8>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
	TIM3->DIER = TIM_IT_UPDATE;
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <main+0xb8>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	60da      	str	r2, [r3, #12]

	TIM6->SR = 0;
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <main+0xbc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
	TIM6->DIER = TIM_IT_UPDATE;
 80014ea:	4b16      	ldr	r3, [pc, #88]	; (8001544 <main+0xbc>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	60da      	str	r2, [r3, #12]

	TIM7->SR = 0;
 80014f0:	4b15      	ldr	r3, [pc, #84]	; (8001548 <main+0xc0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
	TIM7->DIER = TIM_IT_UPDATE;
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <main+0xc0>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	60da      	str	r2, [r3, #12]

	TIM13->SR = 0;
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <main+0xc4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
	TIM13->DIER = TIM_IT_UPDATE;
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <main+0xc4>)
 8001504:	2201      	movs	r2, #1
 8001506:	60da      	str	r2, [r3, #12]

	TIM14->SR = 0;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <main+0xc8>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
	TIM14->DIER = TIM_IT_UPDATE;
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <main+0xc8>)
 8001510:	2201      	movs	r2, #1
 8001512:	60da      	str	r2, [r3, #12]

	USBD_CUSTOM_HID.DataIn = USBD_CUSTOM_HID_DataIn;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <main+0xcc>)
 8001516:	4a10      	ldr	r2, [pc, #64]	; (8001558 <main+0xd0>)
 8001518:	615a      	str	r2, [r3, #20]

	TLV493D_A1B6_init(&hi2c1);
 800151a:	4810      	ldr	r0, [pc, #64]	; (800155c <main+0xd4>)
 800151c:	f7ff ff2c 	bl	8001378 <TLV493D_A1B6_init>
	TLV493D_A1B6_init(&hi2c2);
 8001520:	480f      	ldr	r0, [pc, #60]	; (8001560 <main+0xd8>)
 8001522:	f7ff ff29 	bl	8001378 <TLV493D_A1B6_init>
	TLV493D_A1B6_init(&hi2c3);
 8001526:	480f      	ldr	r0, [pc, #60]	; (8001564 <main+0xdc>)
 8001528:	f7ff ff26 	bl	8001378 <TLV493D_A1B6_init>

	QMC5883L_soft_reset_and_init(&hi2c1);
 800152c:	480b      	ldr	r0, [pc, #44]	; (800155c <main+0xd4>)
 800152e:	f7ff feaf 	bl	8001290 <QMC5883L_soft_reset_and_init>
	QMC5883L_soft_reset_and_init(&hi2c2);
 8001532:	480b      	ldr	r0, [pc, #44]	; (8001560 <main+0xd8>)
 8001534:	f7ff feac 	bl	8001290 <QMC5883L_soft_reset_and_init>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001538:	e7fe      	b.n	8001538 <main+0xb0>
 800153a:	bf00      	nop
 800153c:	40000c00 	.word	0x40000c00
 8001540:	40000400 	.word	0x40000400
 8001544:	40001000 	.word	0x40001000
 8001548:	40001400 	.word	0x40001400
 800154c:	40001c00 	.word	0x40001c00
 8001550:	40002000 	.word	0x40002000
 8001554:	20000014 	.word	0x20000014
 8001558:	08000695 	.word	0x08000695
 800155c:	2000014c 	.word	0x2000014c
 8001560:	200001a0 	.word	0x200001a0
 8001564:	200001f4 	.word	0x200001f4

08001568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b094      	sub	sp, #80	; 0x50
 800156c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156e:	f107 0320 	add.w	r3, r7, #32
 8001572:	2230      	movs	r2, #48	; 0x30
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f00b ff70 	bl	800d45c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	4b29      	ldr	r3, [pc, #164]	; (8001638 <SystemClock_Config+0xd0>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	4a28      	ldr	r2, [pc, #160]	; (8001638 <SystemClock_Config+0xd0>)
 8001596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159a:	6413      	str	r3, [r2, #64]	; 0x40
 800159c:	4b26      	ldr	r3, [pc, #152]	; (8001638 <SystemClock_Config+0xd0>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <SystemClock_Config+0xd4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a22      	ldr	r2, [pc, #136]	; (800163c <SystemClock_Config+0xd4>)
 80015b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b20      	ldr	r3, [pc, #128]	; (800163c <SystemClock_Config+0xd4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80015c4:	2305      	movs	r3, #5
 80015c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015ce:	2301      	movs	r3, #1
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d2:	2302      	movs	r3, #2
 80015d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015dc:	2308      	movs	r3, #8
 80015de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015e6:	2302      	movs	r3, #2
 80015e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015ea:	2307      	movs	r3, #7
 80015ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ee:	f107 0320 	add.w	r3, r7, #32
 80015f2:	4618      	mov	r0, r3
 80015f4:	f005 f990 	bl	8006918 <HAL_RCC_OscConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015fe:	f000 fced 	bl	8001fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001602:	230f      	movs	r3, #15
 8001604:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001606:	2302      	movs	r3, #2
 8001608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800160e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001612:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001618:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	2105      	movs	r1, #5
 8001620:	4618      	mov	r0, r3
 8001622:	f005 fbf1 	bl	8006e08 <HAL_RCC_ClockConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800162c:	f000 fcd6 	bl	8001fdc <Error_Handler>
  }
}
 8001630:	bf00      	nop
 8001632:	3750      	adds	r7, #80	; 0x50
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40023800 	.word	0x40023800
 800163c:	40007000 	.word	0x40007000

08001640 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */
  {
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8001654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001658:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	2301      	movs	r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4619      	mov	r1, r3
 800166a:	481f      	ldr	r0, [pc, #124]	; (80016e8 <MX_I2C1_Init+0xa8>)
 800166c:	f001 f9ea 	bl	8002a44 <HAL_GPIO_Init>
  }

  HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001676:	481c      	ldr	r0, [pc, #112]	; (80016e8 <MX_I2C1_Init+0xa8>)
 8001678:	f001 fb80 	bl	8002d7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TLV493D_A1B6_Power_1_GPIO_Port, TLV493D_A1B6_Power_1_Pin, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	2180      	movs	r1, #128	; 0x80
 8001680:	4819      	ldr	r0, [pc, #100]	; (80016e8 <MX_I2C1_Init+0xa8>)
 8001682:	f001 fb7b 	bl	8002d7c <HAL_GPIO_WritePin>

  HAL_Delay(1);
 8001686:	2001      	movs	r0, #1
 8001688:	f001 f876 	bl	8002778 <HAL_Delay>

  HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001692:	4815      	ldr	r0, [pc, #84]	; (80016e8 <MX_I2C1_Init+0xa8>)
 8001694:	f001 fb72 	bl	8002d7c <HAL_GPIO_WritePin>
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_I2C1_Init+0xac>)
 800169a:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <MX_I2C1_Init+0xb0>)
 800169c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <MX_I2C1_Init+0xac>)
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <MX_I2C1_Init+0xb4>)
 80016a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_I2C1_Init+0xac>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <MX_I2C1_Init+0xac>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_I2C1_Init+0xac>)
 80016b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_I2C1_Init+0xac>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_I2C1_Init+0xac>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_I2C1_Init+0xac>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MX_I2C1_Init+0xac>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016d0:	4806      	ldr	r0, [pc, #24]	; (80016ec <MX_I2C1_Init+0xac>)
 80016d2:	f001 fb9f 	bl	8002e14 <HAL_I2C_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_I2C1_Init+0xa0>
  {
    Error_Handler();
 80016dc:	f000 fc7e 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40020400 	.word	0x40020400
 80016ec:	2000014c 	.word	0x2000014c
 80016f0:	40005400 	.word	0x40005400
 80016f4:	00061a80 	.word	0x00061a80

080016f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */
  {
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 800170c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001710:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4619      	mov	r1, r3
 8001722:	4820      	ldr	r0, [pc, #128]	; (80017a4 <MX_I2C2_Init+0xac>)
 8001724:	f001 f98e 	bl	8002a44 <HAL_GPIO_Init>
  }

  HAL_GPIO_WritePin(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800172e:	481d      	ldr	r0, [pc, #116]	; (80017a4 <MX_I2C2_Init+0xac>)
 8001730:	f001 fb24 	bl	8002d7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TLV493D_A1B6_Power_2_GPIO_Port, TLV493D_A1B6_Power_2_Pin, GPIO_PIN_SET);
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800173a:	481b      	ldr	r0, [pc, #108]	; (80017a8 <MX_I2C2_Init+0xb0>)
 800173c:	f001 fb1e 	bl	8002d7c <HAL_GPIO_WritePin>

  HAL_Delay(1);
 8001740:	2001      	movs	r0, #1
 8001742:	f001 f819 	bl	8002778 <HAL_Delay>

  HAL_GPIO_WritePin(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin, GPIO_PIN_SET);
 8001746:	2201      	movs	r2, #1
 8001748:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800174c:	4815      	ldr	r0, [pc, #84]	; (80017a4 <MX_I2C2_Init+0xac>)
 800174e:	f001 fb15 	bl	8002d7c <HAL_GPIO_WritePin>
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <MX_I2C2_Init+0xb4>)
 8001754:	4a16      	ldr	r2, [pc, #88]	; (80017b0 <MX_I2C2_Init+0xb8>)
 8001756:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <MX_I2C2_Init+0xb4>)
 800175a:	4a16      	ldr	r2, [pc, #88]	; (80017b4 <MX_I2C2_Init+0xbc>)
 800175c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <MX_I2C2_Init+0xb4>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_I2C2_Init+0xb4>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_I2C2_Init+0xb4>)
 800176c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001770:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_I2C2_Init+0xb4>)
 8001774:	2200      	movs	r2, #0
 8001776:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_I2C2_Init+0xb4>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_I2C2_Init+0xb4>)
 8001780:	2200      	movs	r2, #0
 8001782:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_I2C2_Init+0xb4>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800178a:	4808      	ldr	r0, [pc, #32]	; (80017ac <MX_I2C2_Init+0xb4>)
 800178c:	f001 fb42 	bl	8002e14 <HAL_I2C_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_I2C2_Init+0xa2>
  {
    Error_Handler();
 8001796:	f000 fc21 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40020400 	.word	0x40020400
 80017a8:	40021000 	.word	0x40021000
 80017ac:	200001a0 	.word	0x200001a0
 80017b0:	40005800 	.word	0x40005800
 80017b4:	00061a80 	.word	0x00061a80

080017b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */
  {
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80017cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	4820      	ldr	r0, [pc, #128]	; (8001864 <MX_I2C3_Init+0xac>)
 80017e4:	f001 f92e 	bl	8002a44 <HAL_GPIO_Init>
  }

  HAL_GPIO_WritePin(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ee:	481d      	ldr	r0, [pc, #116]	; (8001864 <MX_I2C3_Init+0xac>)
 80017f0:	f001 fac4 	bl	8002d7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TLV493D_A1B6_Power_3_GPIO_Port, TLV493D_A1B6_Power_3_Pin, GPIO_PIN_SET);
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fa:	481a      	ldr	r0, [pc, #104]	; (8001864 <MX_I2C3_Init+0xac>)
 80017fc:	f001 fabe 	bl	8002d7c <HAL_GPIO_WritePin>

  HAL_Delay(1);
 8001800:	2001      	movs	r0, #1
 8001802:	f000 ffb9 	bl	8002778 <HAL_Delay>

  HAL_GPIO_WritePin(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin, GPIO_PIN_SET);
 8001806:	2201      	movs	r2, #1
 8001808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800180c:	4815      	ldr	r0, [pc, #84]	; (8001864 <MX_I2C3_Init+0xac>)
 800180e:	f001 fab5 	bl	8002d7c <HAL_GPIO_WritePin>
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <MX_I2C3_Init+0xb0>)
 8001814:	4a15      	ldr	r2, [pc, #84]	; (800186c <MX_I2C3_Init+0xb4>)
 8001816:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <MX_I2C3_Init+0xb0>)
 800181a:	4a15      	ldr	r2, [pc, #84]	; (8001870 <MX_I2C3_Init+0xb8>)
 800181c:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <MX_I2C3_Init+0xb0>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001824:	4b10      	ldr	r3, [pc, #64]	; (8001868 <MX_I2C3_Init+0xb0>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_I2C3_Init+0xb0>)
 800182c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001830:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <MX_I2C3_Init+0xb0>)
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <MX_I2C3_Init+0xb0>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <MX_I2C3_Init+0xb0>)
 8001840:	2200      	movs	r2, #0
 8001842:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <MX_I2C3_Init+0xb0>)
 8001846:	2200      	movs	r2, #0
 8001848:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800184a:	4807      	ldr	r0, [pc, #28]	; (8001868 <MX_I2C3_Init+0xb0>)
 800184c:	f001 fae2 	bl	8002e14 <HAL_I2C_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_I2C3_Init+0xa2>
  {
    Error_Handler();
 8001856:	f000 fbc1 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40020800 	.word	0x40020800
 8001868:	200001f4 	.word	0x200001f4
 800186c:	40005c00 	.word	0x40005c00
 8001870:	00061a80 	.word	0x00061a80

08001874 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001888:	2300      	movs	r3, #0
 800188a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <MX_RTC_Init+0xac>)
 800188e:	4a25      	ldr	r2, [pc, #148]	; (8001924 <MX_RTC_Init+0xb0>)
 8001890:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001892:	4b23      	ldr	r3, [pc, #140]	; (8001920 <MX_RTC_Init+0xac>)
 8001894:	2200      	movs	r2, #0
 8001896:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <MX_RTC_Init+0xac>)
 800189a:	227f      	movs	r2, #127	; 0x7f
 800189c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <MX_RTC_Init+0xac>)
 80018a0:	22ff      	movs	r2, #255	; 0xff
 80018a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <MX_RTC_Init+0xac>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <MX_RTC_Init+0xac>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <MX_RTC_Init+0xac>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018b6:	481a      	ldr	r0, [pc, #104]	; (8001920 <MX_RTC_Init+0xac>)
 80018b8:	f005 fd94 	bl	80073e4 <HAL_RTC_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80018c2:	f000 fb8b 	bl	8001fdc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x18;
 80018ca:	2318      	movs	r3, #24
 80018cc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2201      	movs	r2, #1
 80018de:	4619      	mov	r1, r3
 80018e0:	480f      	ldr	r0, [pc, #60]	; (8001920 <MX_RTC_Init+0xac>)
 80018e2:	f005 fdf5 	bl	80074d0 <HAL_RTC_SetTime>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80018ec:	f000 fb76 	bl	8001fdc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80018f0:	2304      	movs	r3, #4
 80018f2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80018f4:	2301      	movs	r3, #1
 80018f6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x27;
 80018f8:	2327      	movs	r3, #39	; 0x27
 80018fa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 80018fc:	2322      	movs	r3, #34	; 0x22
 80018fe:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001900:	463b      	mov	r3, r7
 8001902:	2201      	movs	r2, #1
 8001904:	4619      	mov	r1, r3
 8001906:	4806      	ldr	r0, [pc, #24]	; (8001920 <MX_RTC_Init+0xac>)
 8001908:	f005 feda 	bl	80076c0 <HAL_RTC_SetDate>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001912:	f000 fb63 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000248 	.word	0x20000248
 8001924:	40002800 	.word	0x40002800

08001928 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b096      	sub	sp, #88	; 0x58
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800192e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001948:	f107 0320 	add.w	r3, r7, #32
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
 8001958:	615a      	str	r2, [r3, #20]
 800195a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800195c:	463b      	mov	r3, r7
 800195e:	2220      	movs	r2, #32
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f00b fd7a 	bl	800d45c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001968:	4b4f      	ldr	r3, [pc, #316]	; (8001aa8 <MX_TIM1_Init+0x180>)
 800196a:	4a50      	ldr	r2, [pc, #320]	; (8001aac <MX_TIM1_Init+0x184>)
 800196c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800196e:	4b4e      	ldr	r3, [pc, #312]	; (8001aa8 <MX_TIM1_Init+0x180>)
 8001970:	2200      	movs	r2, #0
 8001972:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001974:	4b4c      	ldr	r3, [pc, #304]	; (8001aa8 <MX_TIM1_Init+0x180>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800197a:	4b4b      	ldr	r3, [pc, #300]	; (8001aa8 <MX_TIM1_Init+0x180>)
 800197c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001980:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001982:	4b49      	ldr	r3, [pc, #292]	; (8001aa8 <MX_TIM1_Init+0x180>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001988:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <MX_TIM1_Init+0x180>)
 800198a:	2200      	movs	r2, #0
 800198c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198e:	4b46      	ldr	r3, [pc, #280]	; (8001aa8 <MX_TIM1_Init+0x180>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001994:	4844      	ldr	r0, [pc, #272]	; (8001aa8 <MX_TIM1_Init+0x180>)
 8001996:	f006 f823 	bl	80079e0 <HAL_TIM_Base_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80019a0:	f000 fb1c 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80019a4:	4840      	ldr	r0, [pc, #256]	; (8001aa8 <MX_TIM1_Init+0x180>)
 80019a6:	f006 f86a 	bl	8007a7e <HAL_TIM_OC_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80019b0:	f000 fb14 	bl	8001fdc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80019b4:	2307      	movs	r3, #7
 80019b6:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80019bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019c0:	4619      	mov	r1, r3
 80019c2:	4839      	ldr	r0, [pc, #228]	; (8001aa8 <MX_TIM1_Init+0x180>)
 80019c4:	f006 fb39 	bl	800803a <HAL_TIM_SlaveConfigSynchro>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80019ce:	f000 fb05 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d2:	2300      	movs	r3, #0
 80019d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019de:	4619      	mov	r1, r3
 80019e0:	4831      	ldr	r0, [pc, #196]	; (8001aa8 <MX_TIM1_Init+0x180>)
 80019e2:	f006 ff07 	bl	80087f4 <HAL_TIMEx_MasterConfigSynchronization>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80019ec:	f000 faf6 	bl	8001fdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a04:	2300      	movs	r3, #0
 8001a06:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a0c:	f107 0320 	add.w	r3, r7, #32
 8001a10:	2200      	movs	r2, #0
 8001a12:	4619      	mov	r1, r3
 8001a14:	4824      	ldr	r0, [pc, #144]	; (8001aa8 <MX_TIM1_Init+0x180>)
 8001a16:	f006 f9ed 	bl	8007df4 <HAL_TIM_OC_ConfigChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001a20:	f000 fadc 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a24:	f107 0320 	add.w	r3, r7, #32
 8001a28:	2204      	movs	r2, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	481e      	ldr	r0, [pc, #120]	; (8001aa8 <MX_TIM1_Init+0x180>)
 8001a2e:	f006 f9e1 	bl	8007df4 <HAL_TIM_OC_ConfigChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001a38:	f000 fad0 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a3c:	f107 0320 	add.w	r3, r7, #32
 8001a40:	2208      	movs	r2, #8
 8001a42:	4619      	mov	r1, r3
 8001a44:	4818      	ldr	r0, [pc, #96]	; (8001aa8 <MX_TIM1_Init+0x180>)
 8001a46:	f006 f9d5 	bl	8007df4 <HAL_TIM_OC_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001a50:	f000 fac4 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a54:	f107 0320 	add.w	r3, r7, #32
 8001a58:	220c      	movs	r2, #12
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4812      	ldr	r0, [pc, #72]	; (8001aa8 <MX_TIM1_Init+0x180>)
 8001a5e:	f006 f9c9 	bl	8007df4 <HAL_TIM_OC_ConfigChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001a68:	f000 fab8 	bl	8001fdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4806      	ldr	r0, [pc, #24]	; (8001aa8 <MX_TIM1_Init+0x180>)
 8001a90:	f006 ff2c 	bl	80088ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 8001a9a:	f000 fa9f 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	3758      	adds	r7, #88	; 0x58
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000268 	.word	0x20000268
 8001aac:	40010000 	.word	0x40010000

08001ab0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ace:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <MX_TIM3_Init+0x98>)
 8001ad0:	4a1e      	ldr	r2, [pc, #120]	; (8001b4c <MX_TIM3_Init+0x9c>)
 8001ad2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <MX_TIM3_Init+0x98>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <MX_TIM3_Init+0x98>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <MX_TIM3_Init+0x98>)
 8001ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <MX_TIM3_Init+0x98>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <MX_TIM3_Init+0x98>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001af4:	4814      	ldr	r0, [pc, #80]	; (8001b48 <MX_TIM3_Init+0x98>)
 8001af6:	f005 ff73 	bl	80079e0 <HAL_TIM_Base_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b00:	f000 fa6c 	bl	8001fdc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001b04:	2307      	movs	r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8001b08:	2320      	movs	r3, #32
 8001b0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	4619      	mov	r1, r3
 8001b12:	480d      	ldr	r0, [pc, #52]	; (8001b48 <MX_TIM3_Init+0x98>)
 8001b14:	f006 fa91 	bl	800803a <HAL_TIM_SlaveConfigSynchro>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001b1e:	f000 fa5d 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4806      	ldr	r0, [pc, #24]	; (8001b48 <MX_TIM3_Init+0x98>)
 8001b30:	f006 fe60 	bl	80087f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001b3a:	f000 fa4f 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200002b0 	.word	0x200002b0
 8001b4c:	40000400 	.word	0x40000400

08001b50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b56:	f107 0308 	add.w	r3, r7, #8
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b64:	463b      	mov	r3, r7
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <MX_TIM5_Init+0x94>)
 8001b6e:	4a1e      	ldr	r2, [pc, #120]	; (8001be8 <MX_TIM5_Init+0x98>)
 8001b70:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8001b72:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <MX_TIM5_Init+0x94>)
 8001b74:	2253      	movs	r2, #83	; 0x53
 8001b76:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b78:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <MX_TIM5_Init+0x94>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <MX_TIM5_Init+0x94>)
 8001b80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b84:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b86:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <MX_TIM5_Init+0x94>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8c:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <MX_TIM5_Init+0x94>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b92:	4814      	ldr	r0, [pc, #80]	; (8001be4 <MX_TIM5_Init+0x94>)
 8001b94:	f005 ff24 	bl	80079e0 <HAL_TIM_Base_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001b9e:	f000 fa1d 	bl	8001fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ba8:	f107 0308 	add.w	r3, r7, #8
 8001bac:	4619      	mov	r1, r3
 8001bae:	480d      	ldr	r0, [pc, #52]	; (8001be4 <MX_TIM5_Init+0x94>)
 8001bb0:	f006 f97c 	bl	8007eac <HAL_TIM_ConfigClockSource>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001bba:	f000 fa0f 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bbe:	2320      	movs	r3, #32
 8001bc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4806      	ldr	r0, [pc, #24]	; (8001be4 <MX_TIM5_Init+0x94>)
 8001bcc:	f006 fe12 	bl	80087f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001bd6:	f000 fa01 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200002f8 	.word	0x200002f8
 8001be8:	40000c00 	.word	0x40000c00

08001bec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <MX_TIM6_Init+0x74>)
 8001bfc:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <MX_TIM6_Init+0x78>)
 8001bfe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <MX_TIM6_Init+0x74>)
 8001c02:	2253      	movs	r2, #83	; 0x53
 8001c04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <MX_TIM6_Init+0x74>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 104;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <MX_TIM6_Init+0x74>)
 8001c0e:	2268      	movs	r2, #104	; 0x68
 8001c10:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <MX_TIM6_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c18:	4811      	ldr	r0, [pc, #68]	; (8001c60 <MX_TIM6_Init+0x74>)
 8001c1a:	f005 fee1 	bl	80079e0 <HAL_TIM_Base_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001c24:	f000 f9da 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8001c28:	2108      	movs	r1, #8
 8001c2a:	480d      	ldr	r0, [pc, #52]	; (8001c60 <MX_TIM6_Init+0x74>)
 8001c2c:	f005 ff80 	bl	8007b30 <HAL_TIM_OnePulse_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM6_Init+0x4e>
  {
    Error_Handler();
 8001c36:	f000 f9d1 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c42:	463b      	mov	r3, r7
 8001c44:	4619      	mov	r1, r3
 8001c46:	4806      	ldr	r0, [pc, #24]	; (8001c60 <MX_TIM6_Init+0x74>)
 8001c48:	f006 fdd4 	bl	80087f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM6_Init+0x6a>
  {
    Error_Handler();
 8001c52:	f000 f9c3 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000340 	.word	0x20000340
 8001c64:	40001000 	.word	0x40001000

08001c68 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6e:	463b      	mov	r3, r7
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c76:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <MX_TIM7_Init+0x74>)
 8001c78:	4a19      	ldr	r2, [pc, #100]	; (8001ce0 <MX_TIM7_Init+0x78>)
 8001c7a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8001c7c:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <MX_TIM7_Init+0x74>)
 8001c7e:	2253      	movs	r2, #83	; 0x53
 8001c80:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <MX_TIM7_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 104;
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <MX_TIM7_Init+0x74>)
 8001c8a:	2268      	movs	r2, #104	; 0x68
 8001c8c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <MX_TIM7_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c94:	4811      	ldr	r0, [pc, #68]	; (8001cdc <MX_TIM7_Init+0x74>)
 8001c96:	f005 fea3 	bl	80079e0 <HAL_TIM_Base_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8001ca0:	f000 f99c 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 8001ca4:	2108      	movs	r1, #8
 8001ca6:	480d      	ldr	r0, [pc, #52]	; (8001cdc <MX_TIM7_Init+0x74>)
 8001ca8:	f005 ff42 	bl	8007b30 <HAL_TIM_OnePulse_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM7_Init+0x4e>
  {
    Error_Handler();
 8001cb2:	f000 f993 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4806      	ldr	r0, [pc, #24]	; (8001cdc <MX_TIM7_Init+0x74>)
 8001cc4:	f006 fd96 	bl	80087f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM7_Init+0x6a>
  {
    Error_Handler();
 8001cce:	f000 f985 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000388 	.word	0x20000388
 8001ce0:	40001400 	.word	0x40001400

08001ce4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <MX_TIM13_Init+0x50>)
 8001cea:	4a13      	ldr	r2, [pc, #76]	; (8001d38 <MX_TIM13_Init+0x54>)
 8001cec:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 83;
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <MX_TIM13_Init+0x50>)
 8001cf0:	2253      	movs	r2, #83	; 0x53
 8001cf2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <MX_TIM13_Init+0x50>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 104;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <MX_TIM13_Init+0x50>)
 8001cfc:	2268      	movs	r2, #104	; 0x68
 8001cfe:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <MX_TIM13_Init+0x50>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <MX_TIM13_Init+0x50>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001d0c:	4809      	ldr	r0, [pc, #36]	; (8001d34 <MX_TIM13_Init+0x50>)
 8001d0e:	f005 fe67 	bl	80079e0 <HAL_TIM_Base_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM13_Init+0x38>
  {
    Error_Handler();
 8001d18:	f000 f960 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim13, TIM_OPMODE_SINGLE) != HAL_OK)
 8001d1c:	2108      	movs	r1, #8
 8001d1e:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MX_TIM13_Init+0x50>)
 8001d20:	f005 ff06 	bl	8007b30 <HAL_TIM_OnePulse_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM13_Init+0x4a>
  {
    Error_Handler();
 8001d2a:	f000 f957 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200003d0 	.word	0x200003d0
 8001d38:	40001c00 	.word	0x40001c00

08001d3c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001d40:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <MX_TIM14_Init+0x3c>)
 8001d42:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <MX_TIM14_Init+0x40>)
 8001d44:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 83;
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <MX_TIM14_Init+0x3c>)
 8001d48:	2253      	movs	r2, #83	; 0x53
 8001d4a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <MX_TIM14_Init+0x3c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 30;
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <MX_TIM14_Init+0x3c>)
 8001d54:	221e      	movs	r2, #30
 8001d56:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d58:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <MX_TIM14_Init+0x3c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <MX_TIM14_Init+0x3c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001d64:	4804      	ldr	r0, [pc, #16]	; (8001d78 <MX_TIM14_Init+0x3c>)
 8001d66:	f005 fe3b 	bl	80079e0 <HAL_TIM_Base_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001d70:	f000 f934 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000418 	.word	0x20000418
 8001d7c:	40002000 	.word	0x40002000

08001d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08c      	sub	sp, #48	; 0x30
 8001d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
 8001d94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	61bb      	str	r3, [r7, #24]
 8001d9a:	4b8a      	ldr	r3, [pc, #552]	; (8001fc4 <MX_GPIO_Init+0x244>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a89      	ldr	r2, [pc, #548]	; (8001fc4 <MX_GPIO_Init+0x244>)
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b87      	ldr	r3, [pc, #540]	; (8001fc4 <MX_GPIO_Init+0x244>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	61bb      	str	r3, [r7, #24]
 8001db0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	4b83      	ldr	r3, [pc, #524]	; (8001fc4 <MX_GPIO_Init+0x244>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a82      	ldr	r2, [pc, #520]	; (8001fc4 <MX_GPIO_Init+0x244>)
 8001dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b80      	ldr	r3, [pc, #512]	; (8001fc4 <MX_GPIO_Init+0x244>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	4b7c      	ldr	r3, [pc, #496]	; (8001fc4 <MX_GPIO_Init+0x244>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a7b      	ldr	r2, [pc, #492]	; (8001fc4 <MX_GPIO_Init+0x244>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b79      	ldr	r3, [pc, #484]	; (8001fc4 <MX_GPIO_Init+0x244>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b75      	ldr	r3, [pc, #468]	; (8001fc4 <MX_GPIO_Init+0x244>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a74      	ldr	r2, [pc, #464]	; (8001fc4 <MX_GPIO_Init+0x244>)
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b72      	ldr	r3, [pc, #456]	; (8001fc4 <MX_GPIO_Init+0x244>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	4b6e      	ldr	r3, [pc, #440]	; (8001fc4 <MX_GPIO_Init+0x244>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a6d      	ldr	r2, [pc, #436]	; (8001fc4 <MX_GPIO_Init+0x244>)
 8001e10:	f043 0310 	orr.w	r3, r3, #16
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b6b      	ldr	r3, [pc, #428]	; (8001fc4 <MX_GPIO_Init+0x244>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <MX_GPIO_Init+0x244>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a66      	ldr	r2, [pc, #408]	; (8001fc4 <MX_GPIO_Init+0x244>)
 8001e2c:	f043 0308 	orr.w	r3, r3, #8
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b64      	ldr	r3, [pc, #400]	; (8001fc4 <MX_GPIO_Init+0x244>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2101      	movs	r1, #1
 8001e42:	4861      	ldr	r0, [pc, #388]	; (8001fc8 <MX_GPIO_Init+0x248>)
 8001e44:	f000 ff9a 	bl	8002d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Led1_Pin|Led2_Pin|Led3_Pin|TLV493D_A1B6_Power_3_Pin, GPIO_PIN_RESET);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001e4e:	485e      	ldr	r0, [pc, #376]	; (8001fc8 <MX_GPIO_Init+0x248>)
 8001e50:	f000 ff94 	bl	8002d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led4_Pin|Led5_Pin|Led6_Pin|Led7_Pin
 8001e54:	2200      	movs	r2, #0
 8001e56:	21fe      	movs	r1, #254	; 0xfe
 8001e58:	485c      	ldr	r0, [pc, #368]	; (8001fcc <MX_GPIO_Init+0x24c>)
 8001e5a:	f000 ff8f 	bl	8002d7c <HAL_GPIO_WritePin>
                          |Led8_Pin|Led9_Pin|Led10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TLV493D_A1B6_Power_2_GPIO_Port, TLV493D_A1B6_Power_2_Pin, GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e64:	485a      	ldr	r0, [pc, #360]	; (8001fd0 <MX_GPIO_Init+0x250>)
 8001e66:	f000 ff89 	bl	8002d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|TLV493D_A1B6_Power_1_Pin, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001e70:	4858      	ldr	r0, [pc, #352]	; (8001fd4 <MX_GPIO_Init+0x254>)
 8001e72:	f000 ff83 	bl	8002d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Blue_led_Pin|Red_led_Pin|LD4_Pin|LD3_Pin
 8001e76:	2200      	movs	r2, #0
 8001e78:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 8001e7c:	4856      	ldr	r0, [pc, #344]	; (8001fd8 <MX_GPIO_Init+0x258>)
 8001e7e:	f000 ff7d 	bl	8002d7c <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Led1_Pin Led2_Pin Led3_Pin
                           TLV493D_A1B6_Power_3_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Led1_Pin|Led2_Pin|Led3_Pin
 8001e82:	f240 130f 	movw	r3, #271	; 0x10f
 8001e86:	61fb      	str	r3, [r7, #28]
                          |TLV493D_A1B6_Power_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e94:	f107 031c 	add.w	r3, r7, #28
 8001e98:	4619      	mov	r1, r3
 8001e9a:	484b      	ldr	r0, [pc, #300]	; (8001fc8 <MX_GPIO_Init+0x248>)
 8001e9c:	f000 fdd2 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ea4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4845      	ldr	r0, [pc, #276]	; (8001fcc <MX_GPIO_Init+0x24c>)
 8001eb6:	f000 fdc5 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led4_Pin Led5_Pin Led6_Pin Led7_Pin
                           Led8_Pin Led9_Pin Led10_Pin */
  GPIO_InitStruct.Pin = Led4_Pin|Led5_Pin|Led6_Pin|Led7_Pin
 8001eba:	23fe      	movs	r3, #254	; 0xfe
 8001ebc:	61fb      	str	r3, [r7, #28]
                          |Led8_Pin|Led9_Pin|Led10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	4619      	mov	r1, r3
 8001ed0:	483e      	ldr	r0, [pc, #248]	; (8001fcc <MX_GPIO_Init+0x24c>)
 8001ed2:	f000 fdb7 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eda:	2300      	movs	r3, #0
 8001edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001ee2:	f107 031c 	add.w	r3, r7, #28
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	483a      	ldr	r0, [pc, #232]	; (8001fd4 <MX_GPIO_Init+0x254>)
 8001eea:	f000 fdab 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : TLV493D_A1B6_Power_2_Pin */
  GPIO_InitStruct.Pin = TLV493D_A1B6_Power_2_Pin;
 8001eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TLV493D_A1B6_Power_2_GPIO_Port, &GPIO_InitStruct);
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	4619      	mov	r1, r3
 8001f06:	4832      	ldr	r0, [pc, #200]	; (8001fd0 <MX_GPIO_Init+0x250>)
 8001f08:	f000 fd9c 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : QMC5883L_2_DRDY_Pin QMC5883L_1_DRDY_Pin */
  GPIO_InitStruct.Pin = QMC5883L_2_DRDY_Pin|QMC5883L_1_DRDY_Pin;
 8001f0c:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	4619      	mov	r1, r3
 8001f22:	482c      	ldr	r0, [pc, #176]	; (8001fd4 <MX_GPIO_Init+0x254>)
 8001f24:	f000 fd8e 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 TLV493D_A1B6_Power_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|TLV493D_A1B6_Power_1_Pin;
 8001f28:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3a:	f107 031c 	add.w	r3, r7, #28
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4824      	ldr	r0, [pc, #144]	; (8001fd4 <MX_GPIO_Init+0x254>)
 8001f42:	f000 fd7f 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : Blue_led_Pin Red_led_Pin */
  GPIO_InitStruct.Pin = Blue_led_Pin|Red_led_Pin;
 8001f46:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	481e      	ldr	r0, [pc, #120]	; (8001fd8 <MX_GPIO_Init+0x258>)
 8001f60:	f000 fd70 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001f64:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4816      	ldr	r0, [pc, #88]	; (8001fd8 <MX_GPIO_Init+0x258>)
 8001f7e:	f000 fd61 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001f82:	2320      	movs	r3, #32
 8001f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	4810      	ldr	r0, [pc, #64]	; (8001fd8 <MX_GPIO_Init+0x258>)
 8001f96:	f000 fd55 	bl	8002a44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 2);
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	2017      	movs	r0, #23
 8001fa0:	f000 fce9 	bl	8002976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fa4:	2017      	movs	r0, #23
 8001fa6:	f000 fd02 	bl	80029ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 2);
 8001faa:	2202      	movs	r2, #2
 8001fac:	2102      	movs	r1, #2
 8001fae:	2028      	movs	r0, #40	; 0x28
 8001fb0:	f000 fce1 	bl	8002976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fb4:	2028      	movs	r0, #40	; 0x28
 8001fb6:	f000 fcfa 	bl	80029ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fba:	bf00      	nop
 8001fbc:	3730      	adds	r7, #48	; 0x30
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40020800 	.word	0x40020800
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40020400 	.word	0x40020400
 8001fd8:	40020c00 	.word	0x40020c00

08001fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe0:	b672      	cpsid	i
}
 8001fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001fe4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fe8:	480c      	ldr	r0, [pc, #48]	; (800201c <Error_Handler+0x40>)
 8001fea:	f000 fee0 	bl	8002dae <HAL_GPIO_TogglePin>
	  dbg(75)
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <Error_Handler+0x44>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b46      	cmp	r3, #70	; 0x46
 8001ff4:	d902      	bls.n	8001ffc <Error_Handler+0x20>
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <Error_Handler+0x44>)
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	701a      	strb	r2, [r3, #0]
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <Error_Handler+0x44>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	b2d1      	uxtb	r1, r2
 8002004:	4a06      	ldr	r2, [pc, #24]	; (8002020 <Error_Handler+0x44>)
 8002006:	7011      	strb	r1, [r2, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <Error_Handler+0x48>)
 800200c:	214b      	movs	r1, #75	; 0x4b
 800200e:	5499      	strb	r1, [r3, r2]
	  HAL_Delay(300);
 8002010:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002014:	f000 fbb0 	bl	8002778 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8002018:	e7e4      	b.n	8001fe4 <Error_Handler+0x8>
 800201a:	bf00      	nop
 800201c:	40020c00 	.word	0x40020c00
 8002020:	100000a7 	.word	0x100000a7
 8002024:	10000060 	.word	0x10000060

08002028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <HAL_MspInit+0x4c>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <HAL_MspInit+0x4c>)
 8002038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800203c:	6453      	str	r3, [r2, #68]	; 0x44
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <HAL_MspInit+0x4c>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_MspInit+0x4c>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a08      	ldr	r2, [pc, #32]	; (8002074 <HAL_MspInit+0x4c>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_MspInit+0x4c>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002066:	2005      	movs	r0, #5
 8002068:	f000 fc7a 	bl	8002960 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40023800 	.word	0x40023800

08002078 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08e      	sub	sp, #56	; 0x38
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a74      	ldr	r2, [pc, #464]	; (8002268 <HAL_I2C_MspInit+0x1f0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d13d      	bne.n	8002116 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	623b      	str	r3, [r7, #32]
 800209e:	4b73      	ldr	r3, [pc, #460]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a72      	ldr	r2, [pc, #456]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b70      	ldr	r3, [pc, #448]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	623b      	str	r3, [r7, #32]
 80020b4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|I2C1_SDA_Pin;
 80020b6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020bc:	2312      	movs	r3, #18
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020c8:	2304      	movs	r3, #4
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d0:	4619      	mov	r1, r3
 80020d2:	4867      	ldr	r0, [pc, #412]	; (8002270 <HAL_I2C_MspInit+0x1f8>)
 80020d4:	f000 fcb6 	bl	8002a44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020d8:	2300      	movs	r3, #0
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	4b63      	ldr	r3, [pc, #396]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	4a62      	ldr	r2, [pc, #392]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 80020e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020e6:	6413      	str	r3, [r2, #64]	; 0x40
 80020e8:	4b60      	ldr	r3, [pc, #384]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 2, 2);
 80020f4:	2202      	movs	r2, #2
 80020f6:	2102      	movs	r1, #2
 80020f8:	201f      	movs	r0, #31
 80020fa:	f000 fc3c 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80020fe:	201f      	movs	r0, #31
 8002100:	f000 fc55 	bl	80029ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 2);
 8002104:	2202      	movs	r2, #2
 8002106:	2101      	movs	r1, #1
 8002108:	2020      	movs	r0, #32
 800210a:	f000 fc34 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800210e:	2020      	movs	r0, #32
 8002110:	f000 fc4d 	bl	80029ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002114:	e0a3      	b.n	800225e <HAL_I2C_MspInit+0x1e6>
  else if(hi2c->Instance==I2C2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a56      	ldr	r2, [pc, #344]	; (8002274 <HAL_I2C_MspInit+0x1fc>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d13d      	bne.n	800219c <HAL_I2C_MspInit+0x124>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002120:	2300      	movs	r3, #0
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	4b51      	ldr	r3, [pc, #324]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	4a50      	ldr	r2, [pc, #320]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 800212a:	f043 0302 	orr.w	r3, r3, #2
 800212e:	6313      	str	r3, [r2, #48]	; 0x30
 8002130:	4b4e      	ldr	r3, [pc, #312]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|I2C2_SDA_Pin;
 800213c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002142:	2312      	movs	r3, #18
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800214e:	2304      	movs	r3, #4
 8002150:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002156:	4619      	mov	r1, r3
 8002158:	4845      	ldr	r0, [pc, #276]	; (8002270 <HAL_I2C_MspInit+0x1f8>)
 800215a:	f000 fc73 	bl	8002a44 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	4b42      	ldr	r3, [pc, #264]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	4a41      	ldr	r2, [pc, #260]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 8002168:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800216c:	6413      	str	r3, [r2, #64]	; 0x40
 800216e:	4b3f      	ldr	r3, [pc, #252]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 2, 2);
 800217a:	2202      	movs	r2, #2
 800217c:	2102      	movs	r1, #2
 800217e:	2021      	movs	r0, #33	; 0x21
 8002180:	f000 fbf9 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002184:	2021      	movs	r0, #33	; 0x21
 8002186:	f000 fc12 	bl	80029ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 2);
 800218a:	2202      	movs	r2, #2
 800218c:	2101      	movs	r1, #1
 800218e:	2022      	movs	r0, #34	; 0x22
 8002190:	f000 fbf1 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002194:	2022      	movs	r0, #34	; 0x22
 8002196:	f000 fc0a 	bl	80029ae <HAL_NVIC_EnableIRQ>
}
 800219a:	e060      	b.n	800225e <HAL_I2C_MspInit+0x1e6>
  else if(hi2c->Instance==I2C3)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a35      	ldr	r2, [pc, #212]	; (8002278 <HAL_I2C_MspInit+0x200>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d15b      	bne.n	800225e <HAL_I2C_MspInit+0x1e6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	4b30      	ldr	r3, [pc, #192]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a2f      	ldr	r2, [pc, #188]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b2d      	ldr	r3, [pc, #180]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a28      	ldr	r2, [pc, #160]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b26      	ldr	r3, [pc, #152]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80021de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021e4:	2312      	movs	r3, #18
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ec:	2303      	movs	r3, #3
 80021ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021f0:	2304      	movs	r3, #4
 80021f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80021f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f8:	4619      	mov	r1, r3
 80021fa:	4820      	ldr	r0, [pc, #128]	; (800227c <HAL_I2C_MspInit+0x204>)
 80021fc:	f000 fc22 	bl	8002a44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002206:	2312      	movs	r3, #18
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220e:	2303      	movs	r3, #3
 8002210:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002212:	2304      	movs	r3, #4
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221a:	4619      	mov	r1, r3
 800221c:	4818      	ldr	r0, [pc, #96]	; (8002280 <HAL_I2C_MspInit+0x208>)
 800221e:	f000 fc11 	bl	8002a44 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a10      	ldr	r2, [pc, #64]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 800222c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <HAL_I2C_MspInit+0x1f4>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 2, 2);
 800223e:	2202      	movs	r2, #2
 8002240:	2102      	movs	r1, #2
 8002242:	2048      	movs	r0, #72	; 0x48
 8002244:	f000 fb97 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002248:	2048      	movs	r0, #72	; 0x48
 800224a:	f000 fbb0 	bl	80029ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 1, 2);
 800224e:	2202      	movs	r2, #2
 8002250:	2101      	movs	r1, #1
 8002252:	2049      	movs	r0, #73	; 0x49
 8002254:	f000 fb8f 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8002258:	2049      	movs	r0, #73	; 0x49
 800225a:	f000 fba8 	bl	80029ae <HAL_NVIC_EnableIRQ>
}
 800225e:	bf00      	nop
 8002260:	3738      	adds	r7, #56	; 0x38
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40005400 	.word	0x40005400
 800226c:	40023800 	.word	0x40023800
 8002270:	40020400 	.word	0x40020400
 8002274:	40005800 	.word	0x40005800
 8002278:	40005c00 	.word	0x40005c00
 800227c:	40020800 	.word	0x40020800
 8002280:	40020000 	.word	0x40020000

08002284 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800228c:	f107 0308 	add.w	r3, r7, #8
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <HAL_RTC_MspInit+0x4c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d111      	bne.n	80022c8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022a4:	2302      	movs	r3, #2
 80022a6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80022a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ac:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ae:	f107 0308 	add.w	r3, r7, #8
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 ffb4 	bl	8007220 <HAL_RCCEx_PeriphCLKConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80022be:	f7ff fe8d 	bl	8001fdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022c2:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <HAL_RTC_MspInit+0x50>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022c8:	bf00      	nop
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40002800 	.word	0x40002800
 80022d4:	42470e3c 	.word	0x42470e3c

080022d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a62      	ldr	r2, [pc, #392]	; (8002470 <HAL_TIM_Base_MspInit+0x198>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d11e      	bne.n	8002328 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
 80022ee:	4b61      	ldr	r3, [pc, #388]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	4a60      	ldr	r2, [pc, #384]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6453      	str	r3, [r2, #68]	; 0x44
 80022fa:	4b5e      	ldr	r3, [pc, #376]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 2);
 8002306:	2202      	movs	r2, #2
 8002308:	2102      	movs	r1, #2
 800230a:	2019      	movs	r0, #25
 800230c:	f000 fb33 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002310:	2019      	movs	r0, #25
 8002312:	f000 fb4c 	bl	80029ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 2);
 8002316:	2202      	movs	r2, #2
 8002318:	2102      	movs	r1, #2
 800231a:	201b      	movs	r0, #27
 800231c:	f000 fb2b 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002320:	201b      	movs	r0, #27
 8002322:	f000 fb44 	bl	80029ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002326:	e09e      	b.n	8002466 <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM3)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a52      	ldr	r2, [pc, #328]	; (8002478 <HAL_TIM_Base_MspInit+0x1a0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d116      	bne.n	8002360 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
 8002336:	4b4f      	ldr	r3, [pc, #316]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4a4e      	ldr	r2, [pc, #312]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	6413      	str	r3, [r2, #64]	; 0x40
 8002342:	4b4c      	ldr	r3, [pc, #304]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	623b      	str	r3, [r7, #32]
 800234c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 2);
 800234e:	2202      	movs	r2, #2
 8002350:	2102      	movs	r1, #2
 8002352:	201d      	movs	r0, #29
 8002354:	f000 fb0f 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002358:	201d      	movs	r0, #29
 800235a:	f000 fb28 	bl	80029ae <HAL_NVIC_EnableIRQ>
}
 800235e:	e082      	b.n	8002466 <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM5)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a45      	ldr	r2, [pc, #276]	; (800247c <HAL_TIM_Base_MspInit+0x1a4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d10e      	bne.n	8002388 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	4b41      	ldr	r3, [pc, #260]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	4a40      	ldr	r2, [pc, #256]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 8002374:	f043 0308 	orr.w	r3, r3, #8
 8002378:	6413      	str	r3, [r2, #64]	; 0x40
 800237a:	4b3e      	ldr	r3, [pc, #248]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	69fb      	ldr	r3, [r7, #28]
}
 8002386:	e06e      	b.n	8002466 <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM6)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a3c      	ldr	r2, [pc, #240]	; (8002480 <HAL_TIM_Base_MspInit+0x1a8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d116      	bne.n	80023c0 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	4b37      	ldr	r3, [pc, #220]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	4a36      	ldr	r2, [pc, #216]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 800239c:	f043 0310 	orr.w	r3, r3, #16
 80023a0:	6413      	str	r3, [r2, #64]	; 0x40
 80023a2:	4b34      	ldr	r3, [pc, #208]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 2);
 80023ae:	2202      	movs	r2, #2
 80023b0:	2102      	movs	r1, #2
 80023b2:	2036      	movs	r0, #54	; 0x36
 80023b4:	f000 fadf 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023b8:	2036      	movs	r0, #54	; 0x36
 80023ba:	f000 faf8 	bl	80029ae <HAL_NVIC_EnableIRQ>
}
 80023be:	e052      	b.n	8002466 <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM7)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a2f      	ldr	r2, [pc, #188]	; (8002484 <HAL_TIM_Base_MspInit+0x1ac>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d116      	bne.n	80023f8 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	4b29      	ldr	r3, [pc, #164]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a28      	ldr	r2, [pc, #160]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 80023d4:	f043 0320 	orr.w	r3, r3, #32
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b26      	ldr	r3, [pc, #152]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 2);
 80023e6:	2202      	movs	r2, #2
 80023e8:	2102      	movs	r1, #2
 80023ea:	2037      	movs	r0, #55	; 0x37
 80023ec:	f000 fac3 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80023f0:	2037      	movs	r0, #55	; 0x37
 80023f2:	f000 fadc 	bl	80029ae <HAL_NVIC_EnableIRQ>
}
 80023f6:	e036      	b.n	8002466 <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM13)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a22      	ldr	r2, [pc, #136]	; (8002488 <HAL_TIM_Base_MspInit+0x1b0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d116      	bne.n	8002430 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	4a1a      	ldr	r2, [pc, #104]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 800240c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002410:	6413      	str	r3, [r2, #64]	; 0x40
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 2);
 800241e:	2202      	movs	r2, #2
 8002420:	2102      	movs	r1, #2
 8002422:	202c      	movs	r0, #44	; 0x2c
 8002424:	f000 faa7 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002428:	202c      	movs	r0, #44	; 0x2c
 800242a:	f000 fac0 	bl	80029ae <HAL_NVIC_EnableIRQ>
}
 800242e:	e01a      	b.n	8002466 <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM14)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a15      	ldr	r2, [pc, #84]	; (800248c <HAL_TIM_Base_MspInit+0x1b4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d115      	bne.n	8002466 <HAL_TIM_Base_MspInit+0x18e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	4a0c      	ldr	r2, [pc, #48]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 8002444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002448:	6413      	str	r3, [r2, #64]	; 0x40
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_TIM_Base_MspInit+0x19c>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 2, 2);
 8002456:	2202      	movs	r2, #2
 8002458:	2102      	movs	r1, #2
 800245a:	202d      	movs	r0, #45	; 0x2d
 800245c:	f000 fa8b 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002460:	202d      	movs	r0, #45	; 0x2d
 8002462:	f000 faa4 	bl	80029ae <HAL_NVIC_EnableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3728      	adds	r7, #40	; 0x28
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40010000 	.word	0x40010000
 8002474:	40023800 	.word	0x40023800
 8002478:	40000400 	.word	0x40000400
 800247c:	40000c00 	.word	0x40000c00
 8002480:	40001000 	.word	0x40001000
 8002484:	40001400 	.word	0x40001400
 8002488:	40001c00 	.word	0x40001c00
 800248c:	40002000 	.word	0x40002000

08002490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <NMI_Handler+0x4>

08002496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800249a:	e7fe      	b.n	800249a <HardFault_Handler+0x4>

0800249c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <MemManage_Handler+0x4>

080024a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a6:	e7fe      	b.n	80024a6 <BusFault_Handler+0x4>

080024a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024ac:	e7fe      	b.n	80024ac <UsageFault_Handler+0x4>

080024ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024dc:	f000 f92c 	bl	8002738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  //HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(QMC5883L_1_DRDY_Pin);
 80024e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024ec:	f000 fc7a 	bl	8002de4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80024fa:	f005 fb73 	bl	8007be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000268 	.word	0x20000268

08002508 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <TIM1_CC_IRQHandler+0x10>)
 800250e:	f005 fb69 	bl	8007be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000268 	.word	0x20000268

0800251c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <TIM3_IRQHandler+0x10>)
 8002522:	f005 fb5f 	bl	8007be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200002b0 	.word	0x200002b0

08002530 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <I2C1_EV_IRQHandler+0x10>)
 8002536:	f001 f8c1 	bl	80036bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	2000014c 	.word	0x2000014c

08002544 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <I2C1_ER_IRQHandler+0x10>)
 800254a:	f001 fa28 	bl	800399e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	2000014c 	.word	0x2000014c

08002558 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800255c:	4802      	ldr	r0, [pc, #8]	; (8002568 <I2C2_EV_IRQHandler+0x10>)
 800255e:	f001 f8ad 	bl	80036bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200001a0 	.word	0x200001a0

0800256c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <I2C2_ER_IRQHandler+0x10>)
 8002572:	f001 fa14 	bl	800399e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200001a0 	.word	0x200001a0

08002580 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(QMC5883L_2_DRDY_Pin);
 8002584:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002588:	f000 fc2c 	bl	8002de4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}

08002590 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002594:	4802      	ldr	r0, [pc, #8]	; (80025a0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002596:	f005 fb25 	bl	8007be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	200003d0 	.word	0x200003d0

080025a4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80025a8:	4802      	ldr	r0, [pc, #8]	; (80025b4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80025aa:	f005 fb1b 	bl	8007be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000418 	.word	0x20000418

080025b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025bc:	4802      	ldr	r0, [pc, #8]	; (80025c8 <TIM6_DAC_IRQHandler+0x10>)
 80025be:	f005 fb11 	bl	8007be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000340 	.word	0x20000340

080025cc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <TIM7_IRQHandler+0x10>)
 80025d2:	f005 fb07 	bl	8007be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000388 	.word	0x20000388

080025e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <OTG_FS_IRQHandler+0x10>)
 80025e6:	f003 f881 	bl	80056ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000990 	.word	0x20000990

080025f4 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <I2C3_EV_IRQHandler+0x10>)
 80025fa:	f001 f85f 	bl	80036bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200001f4 	.word	0x200001f4

08002608 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <I2C3_ER_IRQHandler+0x10>)
 800260e:	f001 f9c6 	bl	800399e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200001f4 	.word	0x200001f4

0800261c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <SystemInit+0x20>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002626:	4a05      	ldr	r2, [pc, #20]	; (800263c <SystemInit+0x20>)
 8002628:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800262c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002678 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002644:	480d      	ldr	r0, [pc, #52]	; (800267c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002646:	490e      	ldr	r1, [pc, #56]	; (8002680 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002648:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800264c:	e002      	b.n	8002654 <LoopCopyDataInit>

0800264e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002652:	3304      	adds	r3, #4

08002654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002658:	d3f9      	bcc.n	800264e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800265a:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800265c:	4c0b      	ldr	r4, [pc, #44]	; (800268c <LoopFillZerobss+0x26>)
  movs r3, #0
 800265e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002660:	e001      	b.n	8002666 <LoopFillZerobss>

08002662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002664:	3204      	adds	r2, #4

08002666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002668:	d3fb      	bcc.n	8002662 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800266a:	f7ff ffd7 	bl	800261c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800266e:	f00a fec3 	bl	800d3f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002672:	f7fe ff09 	bl	8001488 <main>
  bx  lr    
 8002676:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002678:	10010000 	.word	0x10010000
  ldr r0, =_sdata
 800267c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002680:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8002684:	0800d548 	.word	0x0800d548
  ldr r2, =_sbss
 8002688:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 800268c:	20000ef4 	.word	0x20000ef4

08002690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002690:	e7fe      	b.n	8002690 <ADC_IRQHandler>
	...

08002694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002698:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <HAL_Init+0x40>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0d      	ldr	r2, [pc, #52]	; (80026d4 <HAL_Init+0x40>)
 800269e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_Init+0x40>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <HAL_Init+0x40>)
 80026aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <HAL_Init+0x40>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a07      	ldr	r2, [pc, #28]	; (80026d4 <HAL_Init+0x40>)
 80026b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026bc:	2003      	movs	r0, #3
 80026be:	f000 f94f 	bl	8002960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026c2:	2000      	movs	r0, #0
 80026c4:	f000 f808 	bl	80026d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026c8:	f7ff fcae 	bl	8002028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023c00 	.word	0x40023c00

080026d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_InitTick+0x54>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_InitTick+0x58>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4619      	mov	r1, r3
 80026ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f967 	bl	80029ca <HAL_SYSTICK_Config>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e00e      	b.n	8002724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b0f      	cmp	r3, #15
 800270a:	d80a      	bhi.n	8002722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800270c:	2200      	movs	r2, #0
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	f000 f92f 	bl	8002976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002718:	4a06      	ldr	r2, [pc, #24]	; (8002734 <HAL_InitTick+0x5c>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	e000      	b.n	8002724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000008 	.word	0x20000008
 8002730:	20000010 	.word	0x20000010
 8002734:	2000000c 	.word	0x2000000c

08002738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_IncTick+0x20>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_IncTick+0x24>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4413      	add	r3, r2
 8002748:	4a04      	ldr	r2, [pc, #16]	; (800275c <HAL_IncTick+0x24>)
 800274a:	6013      	str	r3, [r2, #0]
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000010 	.word	0x20000010
 800275c:	20000464 	.word	0x20000464

08002760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return uwTick;
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <HAL_GetTick+0x14>)
 8002766:	681b      	ldr	r3, [r3, #0]
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	20000464 	.word	0x20000464

08002778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002780:	f7ff ffee 	bl	8002760 <HAL_GetTick>
 8002784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d005      	beq.n	800279e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_Delay+0x44>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4413      	add	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800279e:	bf00      	nop
 80027a0:	f7ff ffde 	bl	8002760 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d8f7      	bhi.n	80027a0 <HAL_Delay+0x28>
  {
  }
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000010 	.word	0x20000010

080027c0 <__NVIC_SetPriorityGrouping>:
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <__NVIC_SetPriorityGrouping+0x44>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027dc:	4013      	ands	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027f2:	4a04      	ldr	r2, [pc, #16]	; (8002804 <__NVIC_SetPriorityGrouping+0x44>)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	60d3      	str	r3, [r2, #12]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_GetPriorityGrouping>:
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <__NVIC_GetPriorityGrouping+0x18>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	0a1b      	lsrs	r3, r3, #8
 8002812:	f003 0307 	and.w	r3, r3, #7
}
 8002816:	4618      	mov	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_EnableIRQ>:
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	2b00      	cmp	r3, #0
 8002834:	db0b      	blt.n	800284e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	f003 021f 	and.w	r2, r3, #31
 800283c:	4907      	ldr	r1, [pc, #28]	; (800285c <__NVIC_EnableIRQ+0x38>)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	2001      	movs	r0, #1
 8002846:	fa00 f202 	lsl.w	r2, r0, r2
 800284a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e000e100 	.word	0xe000e100

08002860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	6039      	str	r1, [r7, #0]
 800286a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002870:	2b00      	cmp	r3, #0
 8002872:	db0a      	blt.n	800288a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	b2da      	uxtb	r2, r3
 8002878:	490c      	ldr	r1, [pc, #48]	; (80028ac <__NVIC_SetPriority+0x4c>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	0112      	lsls	r2, r2, #4
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	440b      	add	r3, r1
 8002884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002888:	e00a      	b.n	80028a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	4908      	ldr	r1, [pc, #32]	; (80028b0 <__NVIC_SetPriority+0x50>)
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	3b04      	subs	r3, #4
 8002898:	0112      	lsls	r2, r2, #4
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	440b      	add	r3, r1
 800289e:	761a      	strb	r2, [r3, #24]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000e100 	.word	0xe000e100
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b089      	sub	sp, #36	; 0x24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f1c3 0307 	rsb	r3, r3, #7
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	bf28      	it	cs
 80028d2:	2304      	movcs	r3, #4
 80028d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3304      	adds	r3, #4
 80028da:	2b06      	cmp	r3, #6
 80028dc:	d902      	bls.n	80028e4 <NVIC_EncodePriority+0x30>
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3b03      	subs	r3, #3
 80028e2:	e000      	b.n	80028e6 <NVIC_EncodePriority+0x32>
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43da      	mvns	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	401a      	ands	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	43d9      	mvns	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800290c:	4313      	orrs	r3, r2
         );
}
 800290e:	4618      	mov	r0, r3
 8002910:	3724      	adds	r7, #36	; 0x24
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800292c:	d301      	bcc.n	8002932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800292e:	2301      	movs	r3, #1
 8002930:	e00f      	b.n	8002952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002932:	4a0a      	ldr	r2, [pc, #40]	; (800295c <SysTick_Config+0x40>)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3b01      	subs	r3, #1
 8002938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800293a:	210f      	movs	r1, #15
 800293c:	f04f 30ff 	mov.w	r0, #4294967295
 8002940:	f7ff ff8e 	bl	8002860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <SysTick_Config+0x40>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800294a:	4b04      	ldr	r3, [pc, #16]	; (800295c <SysTick_Config+0x40>)
 800294c:	2207      	movs	r2, #7
 800294e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	e000e010 	.word	0xe000e010

08002960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff29 	bl	80027c0 <__NVIC_SetPriorityGrouping>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002976:	b580      	push	{r7, lr}
 8002978:	b086      	sub	sp, #24
 800297a:	af00      	add	r7, sp, #0
 800297c:	4603      	mov	r3, r0
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002988:	f7ff ff3e 	bl	8002808 <__NVIC_GetPriorityGrouping>
 800298c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	6978      	ldr	r0, [r7, #20]
 8002994:	f7ff ff8e 	bl	80028b4 <NVIC_EncodePriority>
 8002998:	4602      	mov	r2, r0
 800299a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff5d 	bl	8002860 <__NVIC_SetPriority>
}
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff31 	bl	8002824 <__NVIC_EnableIRQ>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff ffa2 	bl	800291c <SysTick_Config>
 80029d8:	4603      	mov	r3, r0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d004      	beq.n	8002a00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2280      	movs	r2, #128	; 0x80
 80029fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e00c      	b.n	8002a1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2205      	movs	r2, #5
 8002a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0201 	bic.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a34:	b2db      	uxtb	r3, r3
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	e16b      	b.n	8002d38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a60:	2201      	movs	r2, #1
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	f040 815a 	bne.w	8002d32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d005      	beq.n	8002a96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d130      	bne.n	8002af8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002acc:	2201      	movs	r2, #1
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 0201 	and.w	r2, r3, #1
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d017      	beq.n	8002b34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	2203      	movs	r2, #3
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d123      	bne.n	8002b88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	08da      	lsrs	r2, r3, #3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3208      	adds	r2, #8
 8002b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	220f      	movs	r2, #15
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	08da      	lsrs	r2, r3, #3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3208      	adds	r2, #8
 8002b82:	69b9      	ldr	r1, [r7, #24]
 8002b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	2203      	movs	r2, #3
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0203 	and.w	r2, r3, #3
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80b4 	beq.w	8002d32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	4b60      	ldr	r3, [pc, #384]	; (8002d50 <HAL_GPIO_Init+0x30c>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	4a5f      	ldr	r2, [pc, #380]	; (8002d50 <HAL_GPIO_Init+0x30c>)
 8002bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bda:	4b5d      	ldr	r3, [pc, #372]	; (8002d50 <HAL_GPIO_Init+0x30c>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002be6:	4a5b      	ldr	r2, [pc, #364]	; (8002d54 <HAL_GPIO_Init+0x310>)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	089b      	lsrs	r3, r3, #2
 8002bec:	3302      	adds	r3, #2
 8002bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a52      	ldr	r2, [pc, #328]	; (8002d58 <HAL_GPIO_Init+0x314>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d02b      	beq.n	8002c6a <HAL_GPIO_Init+0x226>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a51      	ldr	r2, [pc, #324]	; (8002d5c <HAL_GPIO_Init+0x318>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d025      	beq.n	8002c66 <HAL_GPIO_Init+0x222>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a50      	ldr	r2, [pc, #320]	; (8002d60 <HAL_GPIO_Init+0x31c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d01f      	beq.n	8002c62 <HAL_GPIO_Init+0x21e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a4f      	ldr	r2, [pc, #316]	; (8002d64 <HAL_GPIO_Init+0x320>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d019      	beq.n	8002c5e <HAL_GPIO_Init+0x21a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a4e      	ldr	r2, [pc, #312]	; (8002d68 <HAL_GPIO_Init+0x324>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_GPIO_Init+0x216>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a4d      	ldr	r2, [pc, #308]	; (8002d6c <HAL_GPIO_Init+0x328>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00d      	beq.n	8002c56 <HAL_GPIO_Init+0x212>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a4c      	ldr	r2, [pc, #304]	; (8002d70 <HAL_GPIO_Init+0x32c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <HAL_GPIO_Init+0x20e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a4b      	ldr	r2, [pc, #300]	; (8002d74 <HAL_GPIO_Init+0x330>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_GPIO_Init+0x20a>
 8002c4a:	2307      	movs	r3, #7
 8002c4c:	e00e      	b.n	8002c6c <HAL_GPIO_Init+0x228>
 8002c4e:	2308      	movs	r3, #8
 8002c50:	e00c      	b.n	8002c6c <HAL_GPIO_Init+0x228>
 8002c52:	2306      	movs	r3, #6
 8002c54:	e00a      	b.n	8002c6c <HAL_GPIO_Init+0x228>
 8002c56:	2305      	movs	r3, #5
 8002c58:	e008      	b.n	8002c6c <HAL_GPIO_Init+0x228>
 8002c5a:	2304      	movs	r3, #4
 8002c5c:	e006      	b.n	8002c6c <HAL_GPIO_Init+0x228>
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e004      	b.n	8002c6c <HAL_GPIO_Init+0x228>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e002      	b.n	8002c6c <HAL_GPIO_Init+0x228>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <HAL_GPIO_Init+0x228>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	f002 0203 	and.w	r2, r2, #3
 8002c72:	0092      	lsls	r2, r2, #2
 8002c74:	4093      	lsls	r3, r2
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c7c:	4935      	ldr	r1, [pc, #212]	; (8002d54 <HAL_GPIO_Init+0x310>)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	089b      	lsrs	r3, r3, #2
 8002c82:	3302      	adds	r3, #2
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c8a:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cae:	4a32      	ldr	r2, [pc, #200]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cb4:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cd8:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cde:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d02:	4a1d      	ldr	r2, [pc, #116]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d2c:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <HAL_GPIO_Init+0x334>)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3301      	adds	r3, #1
 8002d36:	61fb      	str	r3, [r7, #28]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	2b0f      	cmp	r3, #15
 8002d3c:	f67f ae90 	bls.w	8002a60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	3724      	adds	r7, #36	; 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40013800 	.word	0x40013800
 8002d58:	40020000 	.word	0x40020000
 8002d5c:	40020400 	.word	0x40020400
 8002d60:	40020800 	.word	0x40020800
 8002d64:	40020c00 	.word	0x40020c00
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40021400 	.word	0x40021400
 8002d70:	40021800 	.word	0x40021800
 8002d74:	40021c00 	.word	0x40021c00
 8002d78:	40013c00 	.word	0x40013c00

08002d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d8c:	787b      	ldrb	r3, [r7, #1]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d92:	887a      	ldrh	r2, [r7, #2]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d98:	e003      	b.n	8002da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d9a:	887b      	ldrh	r3, [r7, #2]
 8002d9c:	041a      	lsls	r2, r3, #16
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	619a      	str	r2, [r3, #24]
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b085      	sub	sp, #20
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	460b      	mov	r3, r1
 8002db8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dc0:	887a      	ldrh	r2, [r7, #2]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	041a      	lsls	r2, r3, #16
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	43d9      	mvns	r1, r3
 8002dcc:	887b      	ldrh	r3, [r7, #2]
 8002dce:	400b      	ands	r3, r1
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	619a      	str	r2, [r3, #24]
}
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
	...

08002de4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002dee:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d006      	beq.n	8002e08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dfa:	4a05      	ldr	r2, [pc, #20]	; (8002e10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd fca2 	bl	800074c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40013c00 	.word	0x40013c00

08002e14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e12b      	b.n	800307e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff f91c 	bl	8002078 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2224      	movs	r2, #36	; 0x24
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e78:	f004 f9be 	bl	80071f8 <HAL_RCC_GetPCLK1Freq>
 8002e7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4a81      	ldr	r2, [pc, #516]	; (8003088 <HAL_I2C_Init+0x274>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d807      	bhi.n	8002e98 <HAL_I2C_Init+0x84>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4a80      	ldr	r2, [pc, #512]	; (800308c <HAL_I2C_Init+0x278>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	bf94      	ite	ls
 8002e90:	2301      	movls	r3, #1
 8002e92:	2300      	movhi	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	e006      	b.n	8002ea6 <HAL_I2C_Init+0x92>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4a7d      	ldr	r2, [pc, #500]	; (8003090 <HAL_I2C_Init+0x27c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	bf94      	ite	ls
 8002ea0:	2301      	movls	r3, #1
 8002ea2:	2300      	movhi	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e0e7      	b.n	800307e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4a78      	ldr	r2, [pc, #480]	; (8003094 <HAL_I2C_Init+0x280>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	0c9b      	lsrs	r3, r3, #18
 8002eb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a6a      	ldr	r2, [pc, #424]	; (8003088 <HAL_I2C_Init+0x274>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d802      	bhi.n	8002ee8 <HAL_I2C_Init+0xd4>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	e009      	b.n	8002efc <HAL_I2C_Init+0xe8>
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	4a69      	ldr	r2, [pc, #420]	; (8003098 <HAL_I2C_Init+0x284>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	099b      	lsrs	r3, r3, #6
 8002efa:	3301      	adds	r3, #1
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	430b      	orrs	r3, r1
 8002f02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	495c      	ldr	r1, [pc, #368]	; (8003088 <HAL_I2C_Init+0x274>)
 8002f18:	428b      	cmp	r3, r1
 8002f1a:	d819      	bhi.n	8002f50 <HAL_I2C_Init+0x13c>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e59      	subs	r1, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f2a:	1c59      	adds	r1, r3, #1
 8002f2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f30:	400b      	ands	r3, r1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_I2C_Init+0x138>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1e59      	subs	r1, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4a:	e051      	b.n	8002ff0 <HAL_I2C_Init+0x1dc>
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	e04f      	b.n	8002ff0 <HAL_I2C_Init+0x1dc>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d111      	bne.n	8002f7c <HAL_I2C_Init+0x168>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1e58      	subs	r0, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	440b      	add	r3, r1
 8002f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	e012      	b.n	8002fa2 <HAL_I2C_Init+0x18e>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1e58      	subs	r0, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6859      	ldr	r1, [r3, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	0099      	lsls	r1, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_Init+0x196>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e022      	b.n	8002ff0 <HAL_I2C_Init+0x1dc>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_I2C_Init+0x1bc>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1e58      	subs	r0, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	440b      	add	r3, r1
 8002fc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fce:	e00f      	b.n	8002ff0 <HAL_I2C_Init+0x1dc>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1e58      	subs	r0, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6859      	ldr	r1, [r3, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	0099      	lsls	r1, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	6809      	ldr	r1, [r1, #0]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800301e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6911      	ldr	r1, [r2, #16]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68d2      	ldr	r2, [r2, #12]
 800302a:	4311      	orrs	r1, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	430b      	orrs	r3, r1
 8003032:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	000186a0 	.word	0x000186a0
 800308c:	001e847f 	.word	0x001e847f
 8003090:	003d08ff 	.word	0x003d08ff
 8003094:	431bde83 	.word	0x431bde83
 8003098:	10624dd3 	.word	0x10624dd3

0800309c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	461a      	mov	r2, r3
 80030a8:	460b      	mov	r3, r1
 80030aa:	817b      	strh	r3, [r7, #10]
 80030ac:	4613      	mov	r3, r2
 80030ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030b0:	f7ff fb56 	bl	8002760 <HAL_GetTick>
 80030b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b20      	cmp	r3, #32
 80030c0:	f040 80e0 	bne.w	8003284 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	2319      	movs	r3, #25
 80030ca:	2201      	movs	r2, #1
 80030cc:	4970      	ldr	r1, [pc, #448]	; (8003290 <HAL_I2C_Master_Transmit+0x1f4>)
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f001 ffe8 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030da:	2302      	movs	r3, #2
 80030dc:	e0d3      	b.n	8003286 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_I2C_Master_Transmit+0x50>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e0cc      	b.n	8003286 <HAL_I2C_Master_Transmit+0x1ea>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d007      	beq.n	8003112 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0201 	orr.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003120:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2221      	movs	r2, #33	; 0x21
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2210      	movs	r2, #16
 800312e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	893a      	ldrh	r2, [r7, #8]
 8003142:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4a50      	ldr	r2, [pc, #320]	; (8003294 <HAL_I2C_Master_Transmit+0x1f8>)
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003154:	8979      	ldrh	r1, [r7, #10]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	6a3a      	ldr	r2, [r7, #32]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f001 fe78 	bl	8004e50 <I2C_MasterRequestWrite>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e08d      	b.n	8003286 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800316a:	2300      	movs	r3, #0
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003180:	e066      	b.n	8003250 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	6a39      	ldr	r1, [r7, #32]
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f002 f862 	bl	8005250 <I2C_WaitOnTXEFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00d      	beq.n	80031ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	2b04      	cmp	r3, #4
 8003198:	d107      	bne.n	80031aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e06b      	b.n	8003286 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	781a      	ldrb	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d11b      	bne.n	8003224 <HAL_I2C_Master_Transmit+0x188>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d017      	beq.n	8003224 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	781a      	ldrb	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	6a39      	ldr	r1, [r7, #32]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f002 f852 	bl	80052d2 <I2C_WaitOnBTFFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00d      	beq.n	8003250 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	2b04      	cmp	r3, #4
 800323a:	d107      	bne.n	800324c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800324a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e01a      	b.n	8003286 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003254:	2b00      	cmp	r3, #0
 8003256:	d194      	bne.n	8003182 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	e000      	b.n	8003286 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003284:	2302      	movs	r3, #2
  }
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	00100002 	.word	0x00100002
 8003294:	ffff0000 	.word	0xffff0000

08003298 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	461a      	mov	r2, r3
 80032a4:	460b      	mov	r3, r1
 80032a6:	817b      	strh	r3, [r7, #10]
 80032a8:	4613      	mov	r3, r2
 80032aa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	f040 8085 	bne.w	80033c8 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80032be:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <HAL_I2C_Master_Transmit_IT+0x140>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	08db      	lsrs	r3, r3, #3
 80032c4:	4a45      	ldr	r2, [pc, #276]	; (80033dc <HAL_I2C_Master_Transmit_IT+0x144>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	0a1a      	lsrs	r2, r3, #8
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	009a      	lsls	r2, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	3b01      	subs	r3, #1
 80032dc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d116      	bne.n	8003312 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f043 0220 	orr.w	r2, r3, #32
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e05b      	b.n	80033ca <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b02      	cmp	r3, #2
 800331e:	d0db      	beq.n	80032d8 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_I2C_Master_Transmit_IT+0x96>
 800332a:	2302      	movs	r3, #2
 800332c:	e04d      	b.n	80033ca <HAL_I2C_Master_Transmit_IT+0x132>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	d007      	beq.n	8003354 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003362:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2221      	movs	r2, #33	; 0x21
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2210      	movs	r2, #16
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	893a      	ldrh	r2, [r7, #8]
 8003384:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <HAL_I2C_Master_Transmit_IT+0x148>)
 8003394:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003396:	897a      	ldrh	r2, [r7, #10]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80033b2:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	e000      	b.n	80033ca <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80033c8:	2302      	movs	r3, #2
  }
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	371c      	adds	r7, #28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000008 	.word	0x20000008
 80033dc:	14f8b589 	.word	0x14f8b589
 80033e0:	ffff0000 	.word	0xffff0000

080033e4 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	607a      	str	r2, [r7, #4]
 80033ee:	461a      	mov	r2, r3
 80033f0:	460b      	mov	r3, r1
 80033f2:	817b      	strh	r3, [r7, #10]
 80033f4:	4613      	mov	r3, r2
 80033f6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b20      	cmp	r3, #32
 8003406:	f040 808d 	bne.w	8003524 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800340a:	4b4a      	ldr	r3, [pc, #296]	; (8003534 <HAL_I2C_Master_Receive_IT+0x150>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	08db      	lsrs	r3, r3, #3
 8003410:	4a49      	ldr	r2, [pc, #292]	; (8003538 <HAL_I2C_Master_Receive_IT+0x154>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	0a1a      	lsrs	r2, r3, #8
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	009a      	lsls	r2, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	3b01      	subs	r3, #1
 8003428:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d116      	bne.n	800345e <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f043 0220 	orr.w	r2, r3, #32
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e063      	b.n	8003526 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b02      	cmp	r3, #2
 800346a:	d0db      	beq.n	8003424 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_I2C_Master_Receive_IT+0x96>
 8003476:	2302      	movs	r3, #2
 8003478:	e055      	b.n	8003526 <HAL_I2C_Master_Receive_IT+0x142>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b01      	cmp	r3, #1
 800348e:	d007      	beq.n	80034a0 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2222      	movs	r2, #34	; 0x22
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2210      	movs	r2, #16
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	893a      	ldrh	r2, [r7, #8]
 80034d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a17      	ldr	r2, [pc, #92]	; (800353c <HAL_I2C_Master_Receive_IT+0x158>)
 80034e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80034e2:	897a      	ldrh	r2, [r7, #10]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80034fe:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800350e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800351e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	e000      	b.n	8003526 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8003524:	2302      	movs	r3, #2
  }
}
 8003526:	4618      	mov	r0, r3
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000008 	.word	0x20000008
 8003538:	14f8b589 	.word	0x14f8b589
 800353c:	ffff0000 	.word	0xffff0000

08003540 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	4608      	mov	r0, r1
 800354a:	4611      	mov	r1, r2
 800354c:	461a      	mov	r2, r3
 800354e:	4603      	mov	r3, r0
 8003550:	817b      	strh	r3, [r7, #10]
 8003552:	460b      	mov	r3, r1
 8003554:	813b      	strh	r3, [r7, #8]
 8003556:	4613      	mov	r3, r2
 8003558:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b20      	cmp	r3, #32
 8003568:	f040 809a 	bne.w	80036a0 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800356c:	4b50      	ldr	r3, [pc, #320]	; (80036b0 <HAL_I2C_Mem_Read_IT+0x170>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	08db      	lsrs	r3, r3, #3
 8003572:	4a50      	ldr	r2, [pc, #320]	; (80036b4 <HAL_I2C_Mem_Read_IT+0x174>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	0a1a      	lsrs	r2, r3, #8
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	009a      	lsls	r2, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	3b01      	subs	r3, #1
 800358a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d116      	bne.n	80035c0 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	f043 0220 	orr.w	r2, r3, #32
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e070      	b.n	80036a2 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d0db      	beq.n	8003586 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_I2C_Mem_Read_IT+0x9c>
 80035d8:	2302      	movs	r3, #2
 80035da:	e062      	b.n	80036a2 <HAL_I2C_Mem_Read_IT+0x162>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d007      	beq.n	8003602 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003610:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2222      	movs	r2, #34	; 0x22
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2240      	movs	r2, #64	; 0x40
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a3a      	ldr	r2, [r7, #32]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003632:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <HAL_I2C_Mem_Read_IT+0x178>)
 8003642:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003644:	897a      	ldrh	r2, [r7, #10]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800364a:	893a      	ldrh	r2, [r7, #8]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003650:	88fa      	ldrh	r2, [r7, #6]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800366a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800367a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800369a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	e000      	b.n	80036a2 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
  }
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	20000008 	.word	0x20000008
 80036b4:	14f8b589 	.word	0x14f8b589
 80036b8:	ffff0000 	.word	0xffff0000

080036bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	2b10      	cmp	r3, #16
 80036ea:	d003      	beq.n	80036f4 <HAL_I2C_EV_IRQHandler+0x38>
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	2b40      	cmp	r3, #64	; 0x40
 80036f0:	f040 80c1 	bne.w	8003876 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10d      	bne.n	800372a <HAL_I2C_EV_IRQHandler+0x6e>
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003714:	d003      	beq.n	800371e <HAL_I2C_EV_IRQHandler+0x62>
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800371c:	d101      	bne.n	8003722 <HAL_I2C_EV_IRQHandler+0x66>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <HAL_I2C_EV_IRQHandler+0x68>
 8003722:	2300      	movs	r3, #0
 8003724:	2b01      	cmp	r3, #1
 8003726:	f000 8132 	beq.w	800398e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00c      	beq.n	800374e <HAL_I2C_EV_IRQHandler+0x92>
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	0a5b      	lsrs	r3, r3, #9
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d006      	beq.n	800374e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f001 fe68 	bl	8005416 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fd67 	bl	800421a <I2C_Master_SB>
 800374c:	e092      	b.n	8003874 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	08db      	lsrs	r3, r3, #3
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d009      	beq.n	800376e <HAL_I2C_EV_IRQHandler+0xb2>
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	0a5b      	lsrs	r3, r3, #9
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fddd 	bl	8004326 <I2C_Master_ADD10>
 800376c:	e082      	b.n	8003874 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	085b      	lsrs	r3, r3, #1
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <HAL_I2C_EV_IRQHandler+0xd2>
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	0a5b      	lsrs	r3, r3, #9
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fdf7 	bl	800437a <I2C_Master_ADDR>
 800378c:	e072      	b.n	8003874 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	089b      	lsrs	r3, r3, #2
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d03b      	beq.n	8003812 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a8:	f000 80f3 	beq.w	8003992 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	09db      	lsrs	r3, r3, #7
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00f      	beq.n	80037d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	0a9b      	lsrs	r3, r3, #10
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d009      	beq.n	80037d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d103      	bne.n	80037d8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f9d7 	bl	8003b84 <I2C_MasterTransmit_TXE>
 80037d6:	e04d      	b.n	8003874 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	089b      	lsrs	r3, r3, #2
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80d6 	beq.w	8003992 <HAL_I2C_EV_IRQHandler+0x2d6>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	0a5b      	lsrs	r3, r3, #9
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 80cf 	beq.w	8003992 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80037f4:	7bbb      	ldrb	r3, [r7, #14]
 80037f6:	2b21      	cmp	r3, #33	; 0x21
 80037f8:	d103      	bne.n	8003802 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fa5e 	bl	8003cbc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003800:	e0c7      	b.n	8003992 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003802:	7bfb      	ldrb	r3, [r7, #15]
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	f040 80c4 	bne.w	8003992 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 facc 	bl	8003da8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003810:	e0bf      	b.n	8003992 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800381c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003820:	f000 80b7 	beq.w	8003992 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	099b      	lsrs	r3, r3, #6
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00f      	beq.n	8003850 <HAL_I2C_EV_IRQHandler+0x194>
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	0a9b      	lsrs	r3, r3, #10
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d009      	beq.n	8003850 <HAL_I2C_EV_IRQHandler+0x194>
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	089b      	lsrs	r3, r3, #2
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d103      	bne.n	8003850 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fb41 	bl	8003ed0 <I2C_MasterReceive_RXNE>
 800384e:	e011      	b.n	8003874 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	089b      	lsrs	r3, r3, #2
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 809a 	beq.w	8003992 <HAL_I2C_EV_IRQHandler+0x2d6>
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	0a5b      	lsrs	r3, r3, #9
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 8093 	beq.w	8003992 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fbea 	bl	8004046 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003872:	e08e      	b.n	8003992 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003874:	e08d      	b.n	8003992 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d004      	beq.n	8003888 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	e007      	b.n	8003898 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	085b      	lsrs	r3, r3, #1
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d012      	beq.n	80038ca <HAL_I2C_EV_IRQHandler+0x20e>
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	0a5b      	lsrs	r3, r3, #9
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00c      	beq.n	80038ca <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80038c0:	69b9      	ldr	r1, [r7, #24]
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 ffa8 	bl	8004818 <I2C_Slave_ADDR>
 80038c8:	e066      	b.n	8003998 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <HAL_I2C_EV_IRQHandler+0x22e>
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	0a5b      	lsrs	r3, r3, #9
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 ffe2 	bl	80048ac <I2C_Slave_STOPF>
 80038e8:	e056      	b.n	8003998 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038ea:	7bbb      	ldrb	r3, [r7, #14]
 80038ec:	2b21      	cmp	r3, #33	; 0x21
 80038ee:	d002      	beq.n	80038f6 <HAL_I2C_EV_IRQHandler+0x23a>
 80038f0:	7bbb      	ldrb	r3, [r7, #14]
 80038f2:	2b29      	cmp	r3, #41	; 0x29
 80038f4:	d125      	bne.n	8003942 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	09db      	lsrs	r3, r3, #7
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00f      	beq.n	8003922 <HAL_I2C_EV_IRQHandler+0x266>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	0a9b      	lsrs	r3, r3, #10
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <HAL_I2C_EV_IRQHandler+0x266>
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d103      	bne.n	8003922 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 febe 	bl	800469c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003920:	e039      	b.n	8003996 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d033      	beq.n	8003996 <HAL_I2C_EV_IRQHandler+0x2da>
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	0a5b      	lsrs	r3, r3, #9
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d02d      	beq.n	8003996 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 feeb 	bl	8004716 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003940:	e029      	b.n	8003996 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	099b      	lsrs	r3, r3, #6
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00f      	beq.n	800396e <HAL_I2C_EV_IRQHandler+0x2b2>
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	0a9b      	lsrs	r3, r3, #10
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_I2C_EV_IRQHandler+0x2b2>
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	089b      	lsrs	r3, r3, #2
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d103      	bne.n	800396e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fef6 	bl	8004758 <I2C_SlaveReceive_RXNE>
 800396c:	e014      	b.n	8003998 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	089b      	lsrs	r3, r3, #2
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00e      	beq.n	8003998 <HAL_I2C_EV_IRQHandler+0x2dc>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	0a5b      	lsrs	r3, r3, #9
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d008      	beq.n	8003998 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 ff24 	bl	80047d4 <I2C_SlaveReceive_BTF>
 800398c:	e004      	b.n	8003998 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800398e:	bf00      	nop
 8003990:	e002      	b.n	8003998 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003992:	bf00      	nop
 8003994:	e000      	b.n	8003998 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003996:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b08a      	sub	sp, #40	; 0x28
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80039b6:	2300      	movs	r3, #0
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039c0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	0a1b      	lsrs	r3, r3, #8
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00e      	beq.n	80039ec <HAL_I2C_ER_IRQHandler+0x4e>
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	0a1b      	lsrs	r3, r3, #8
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039ea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	0a5b      	lsrs	r3, r3, #9
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00e      	beq.n	8003a16 <HAL_I2C_ER_IRQHandler+0x78>
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	f043 0302 	orr.w	r3, r3, #2
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003a14:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	0a9b      	lsrs	r3, r3, #10
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d03f      	beq.n	8003aa2 <HAL_I2C_ER_IRQHandler+0x104>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	0a1b      	lsrs	r3, r3, #8
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d039      	beq.n	8003aa2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003a2e:	7efb      	ldrb	r3, [r7, #27]
 8003a30:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a40:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003a48:	7ebb      	ldrb	r3, [r7, #26]
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d112      	bne.n	8003a74 <HAL_I2C_ER_IRQHandler+0xd6>
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10f      	bne.n	8003a74 <HAL_I2C_ER_IRQHandler+0xd6>
 8003a54:	7cfb      	ldrb	r3, [r7, #19]
 8003a56:	2b21      	cmp	r3, #33	; 0x21
 8003a58:	d008      	beq.n	8003a6c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003a5a:	7cfb      	ldrb	r3, [r7, #19]
 8003a5c:	2b29      	cmp	r3, #41	; 0x29
 8003a5e:	d005      	beq.n	8003a6c <HAL_I2C_ER_IRQHandler+0xce>
 8003a60:	7cfb      	ldrb	r3, [r7, #19]
 8003a62:	2b28      	cmp	r3, #40	; 0x28
 8003a64:	d106      	bne.n	8003a74 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b21      	cmp	r3, #33	; 0x21
 8003a6a:	d103      	bne.n	8003a74 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f001 f84d 	bl	8004b0c <I2C_Slave_AF>
 8003a72:	e016      	b.n	8003aa2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a7c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	f043 0304 	orr.w	r3, r3, #4
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a86:	7efb      	ldrb	r3, [r7, #27]
 8003a88:	2b10      	cmp	r3, #16
 8003a8a:	d002      	beq.n	8003a92 <HAL_I2C_ER_IRQHandler+0xf4>
 8003a8c:	7efb      	ldrb	r3, [r7, #27]
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	d107      	bne.n	8003aa2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	0adb      	lsrs	r3, r3, #11
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00e      	beq.n	8003acc <HAL_I2C_ER_IRQHandler+0x12e>
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	0a1b      	lsrs	r3, r3, #8
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	f043 0308 	orr.w	r3, r3, #8
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003aca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f001 f884 	bl	8004bec <I2C_ITError>
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	3728      	adds	r7, #40	; 0x28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	70fb      	strb	r3, [r7, #3]
 8003b20:	4613      	mov	r3, r2
 8003b22:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d150      	bne.n	8003c4c <I2C_MasterTransmit_TXE+0xc8>
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	2b21      	cmp	r3, #33	; 0x21
 8003bae:	d14d      	bne.n	8003c4c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d01d      	beq.n	8003bf2 <I2C_MasterTransmit_TXE+0x6e>
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	d01a      	beq.n	8003bf2 <I2C_MasterTransmit_TXE+0x6e>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bc2:	d016      	beq.n	8003bf2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bd2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2211      	movs	r2, #17
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fc feb8 	bl	8000960 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bf0:	e060      	b.n	8003cb4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c00:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c10:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b40      	cmp	r3, #64	; 0x40
 8003c2a:	d107      	bne.n	8003c3c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff ff85 	bl	8003b44 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c3a:	e03b      	b.n	8003cb4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7fc fe8b 	bl	8000960 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c4a:	e033      	b.n	8003cb4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	2b21      	cmp	r3, #33	; 0x21
 8003c50:	d005      	beq.n	8003c5e <I2C_MasterTransmit_TXE+0xda>
 8003c52:	7bbb      	ldrb	r3, [r7, #14]
 8003c54:	2b40      	cmp	r3, #64	; 0x40
 8003c56:	d12d      	bne.n	8003cb4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	2b22      	cmp	r3, #34	; 0x22
 8003c5c:	d12a      	bne.n	8003cb4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d108      	bne.n	8003c7a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c76:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003c78:	e01c      	b.n	8003cb4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b40      	cmp	r3, #64	; 0x40
 8003c84:	d103      	bne.n	8003c8e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f88e 	bl	8003da8 <I2C_MemoryTransmit_TXE_BTF>
}
 8003c8c:	e012      	b.n	8003cb4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	781a      	ldrb	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cb2:	e7ff      	b.n	8003cb4 <I2C_MasterTransmit_TXE+0x130>
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b21      	cmp	r3, #33	; 0x21
 8003cd4:	d164      	bne.n	8003da0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d012      	beq.n	8003d06 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	781a      	ldrb	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003d04:	e04c      	b.n	8003da0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d01d      	beq.n	8003d48 <I2C_MasterTransmit_BTF+0x8c>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d01a      	beq.n	8003d48 <I2C_MasterTransmit_BTF+0x8c>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d18:	d016      	beq.n	8003d48 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d28:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2211      	movs	r2, #17
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fc fe0d 	bl	8000960 <HAL_I2C_MasterTxCpltCallback>
}
 8003d46:	e02b      	b.n	8003da0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d56:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d66:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d107      	bne.n	8003d92 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff feda 	bl	8003b44 <HAL_I2C_MemTxCpltCallback>
}
 8003d90:	e006      	b.n	8003da0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fc fde0 	bl	8000960 <HAL_I2C_MasterTxCpltCallback>
}
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d11d      	bne.n	8003dfc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d10b      	bne.n	8003de0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd8:	1c9a      	adds	r2, r3, #2
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003dde:	e073      	b.n	8003ec8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	121b      	asrs	r3, r3, #8
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003dfa:	e065      	b.n	8003ec8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d10b      	bne.n	8003e1c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e1a:	e055      	b.n	8003ec8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d151      	bne.n	8003ec8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	2b22      	cmp	r3, #34	; 0x22
 8003e28:	d10d      	bne.n	8003e46 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e38:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e44:	e040      	b.n	8003ec8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d015      	beq.n	8003e7c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	2b21      	cmp	r3, #33	; 0x21
 8003e54:	d112      	bne.n	8003e7c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	781a      	ldrb	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e7a:	e025      	b.n	8003ec8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d120      	bne.n	8003ec8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	2b21      	cmp	r3, #33	; 0x21
 8003e8a:	d11d      	bne.n	8003ec8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e9a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eaa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff fe3e 	bl	8003b44 <HAL_I2C_MemTxCpltCallback>
}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b22      	cmp	r3, #34	; 0x22
 8003ee2:	f040 80ac 	bne.w	800403e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d921      	bls.n	8003f38 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	f040 808c 	bne.w	800403e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f34:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003f36:	e082      	b.n	800403e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d075      	beq.n	800402c <I2C_MasterReceive_RXNE+0x15c>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d002      	beq.n	8003f4c <I2C_MasterReceive_RXNE+0x7c>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d16f      	bne.n	800402c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f001 fa01 	bl	8005354 <I2C_WaitOnSTOPRequestThroughIT>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d142      	bne.n	8003fde <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f66:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f76:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	d10a      	bne.n	8003fc8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7fc fd25 	bl	8000a10 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003fc6:	e03a      	b.n	800403e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2212      	movs	r2, #18
 8003fd4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fc fd26 	bl	8000a28 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003fdc:	e02f      	b.n	800403e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7fc fc6f 	bl	8000908 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800402a:	e008      	b.n	800403e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403a:	605a      	str	r2, [r3, #4]
}
 800403c:	e7ff      	b.n	800403e <I2C_MasterReceive_RXNE+0x16e>
 800403e:	bf00      	nop
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b04      	cmp	r3, #4
 800405c:	d11b      	bne.n	8004096 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004094:	e0bd      	b.n	8004212 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	2b03      	cmp	r3, #3
 800409e:	d129      	bne.n	80040f4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ae:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d00a      	beq.n	80040cc <I2C_MasterReceive_BTF+0x86>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d007      	beq.n	80040cc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040f2:	e08e      	b.n	8004212 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d176      	bne.n	80041ec <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d002      	beq.n	800410a <I2C_MasterReceive_BTF+0xc4>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b10      	cmp	r3, #16
 8004108:	d108      	bne.n	800411c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	e019      	b.n	8004150 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b04      	cmp	r3, #4
 8004120:	d002      	beq.n	8004128 <I2C_MasterReceive_BTF+0xe2>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d108      	bne.n	800413a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	e00a      	b.n	8004150 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b10      	cmp	r3, #16
 800413e:	d007      	beq.n	8004150 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80041aa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b40      	cmp	r3, #64	; 0x40
 80041be:	d10a      	bne.n	80041d6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fc fc1e 	bl	8000a10 <HAL_I2C_MemRxCpltCallback>
}
 80041d4:	e01d      	b.n	8004212 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2212      	movs	r2, #18
 80041e2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7fc fc1f 	bl	8000a28 <HAL_I2C_MasterRxCpltCallback>
}
 80041ea:	e012      	b.n	8004212 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b40      	cmp	r3, #64	; 0x40
 800422c:	d117      	bne.n	800425e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004232:	2b00      	cmp	r3, #0
 8004234:	d109      	bne.n	800424a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	b2db      	uxtb	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004246:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004248:	e067      	b.n	800431a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	b2da      	uxtb	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	611a      	str	r2, [r3, #16]
}
 800425c:	e05d      	b.n	800431a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004266:	d133      	bne.n	80042d0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b21      	cmp	r3, #33	; 0x21
 8004272:	d109      	bne.n	8004288 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004278:	b2db      	uxtb	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004284:	611a      	str	r2, [r3, #16]
 8004286:	e008      	b.n	800429a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428c:	b2db      	uxtb	r3, r3
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	b2da      	uxtb	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d004      	beq.n	80042ac <I2C_Master_SB+0x92>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d108      	bne.n	80042be <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d032      	beq.n	800431a <I2C_Master_SB+0x100>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d02d      	beq.n	800431a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042cc:	605a      	str	r2, [r3, #4]
}
 80042ce:	e024      	b.n	800431a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10e      	bne.n	80042f6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042dc:	b29b      	uxth	r3, r3
 80042de:	11db      	asrs	r3, r3, #7
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f003 0306 	and.w	r3, r3, #6
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f063 030f 	orn	r3, r3, #15
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	611a      	str	r2, [r3, #16]
}
 80042f4:	e011      	b.n	800431a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d10d      	bne.n	800431a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	b29b      	uxth	r3, r3
 8004304:	11db      	asrs	r3, r3, #7
 8004306:	b2db      	uxtb	r3, r3
 8004308:	f003 0306 	and.w	r3, r3, #6
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f063 030e 	orn	r3, r3, #14
 8004312:	b2da      	uxtb	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	611a      	str	r2, [r3, #16]
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	b2da      	uxtb	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433e:	2b00      	cmp	r3, #0
 8004340:	d004      	beq.n	800434c <I2C_Master_ADD10+0x26>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004348:	2b00      	cmp	r3, #0
 800434a:	d108      	bne.n	800435e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00c      	beq.n	800436e <I2C_Master_ADD10+0x48>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800436c:	605a      	str	r2, [r3, #4]
  }
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800437a:	b480      	push	{r7}
 800437c:	b091      	sub	sp, #68	; 0x44
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004388:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b22      	cmp	r3, #34	; 0x22
 80043a2:	f040 8169 	bne.w	8004678 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10f      	bne.n	80043ce <I2C_Master_ADDR+0x54>
 80043ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80043b2:	2b40      	cmp	r3, #64	; 0x40
 80043b4:	d10b      	bne.n	80043ce <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b6:	2300      	movs	r3, #0
 80043b8:	633b      	str	r3, [r7, #48]	; 0x30
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	633b      	str	r3, [r7, #48]	; 0x30
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	633b      	str	r3, [r7, #48]	; 0x30
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	e160      	b.n	8004690 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d11d      	bne.n	8004412 <I2C_Master_ADDR+0x98>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043de:	d118      	bne.n	8004412 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e0:	2300      	movs	r3, #0
 80043e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004404:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	651a      	str	r2, [r3, #80]	; 0x50
 8004410:	e13e      	b.n	8004690 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d113      	bne.n	8004444 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800441c:	2300      	movs	r3, #0
 800441e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	62bb      	str	r3, [r7, #40]	; 0x28
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	e115      	b.n	8004670 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b01      	cmp	r3, #1
 800444c:	f040 808a 	bne.w	8004564 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004452:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004456:	d137      	bne.n	80044c8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004466:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004476:	d113      	bne.n	80044a0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004486:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004488:	2300      	movs	r3, #0
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	e0e7      	b.n	8004670 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a0:	2300      	movs	r3, #0
 80044a2:	623b      	str	r3, [r7, #32]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	623b      	str	r3, [r7, #32]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	623b      	str	r3, [r7, #32]
 80044b4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	e0d3      	b.n	8004670 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80044c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d02e      	beq.n	800452c <I2C_Master_ADDR+0x1b2>
 80044ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d02b      	beq.n	800452c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80044d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d6:	2b12      	cmp	r3, #18
 80044d8:	d102      	bne.n	80044e0 <I2C_Master_ADDR+0x166>
 80044da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d125      	bne.n	800452c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80044e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d00e      	beq.n	8004504 <I2C_Master_ADDR+0x18a>
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d00b      	beq.n	8004504 <I2C_Master_ADDR+0x18a>
 80044ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ee:	2b10      	cmp	r3, #16
 80044f0:	d008      	beq.n	8004504 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	e007      	b.n	8004514 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004512:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004514:	2300      	movs	r3, #0
 8004516:	61fb      	str	r3, [r7, #28]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	61fb      	str	r3, [r7, #28]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	61fb      	str	r3, [r7, #28]
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	e0a1      	b.n	8004670 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800453a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800453c:	2300      	movs	r3, #0
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	61bb      	str	r3, [r7, #24]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	e085      	b.n	8004670 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d14d      	bne.n	800460a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800456e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004570:	2b04      	cmp	r3, #4
 8004572:	d016      	beq.n	80045a2 <I2C_Master_ADDR+0x228>
 8004574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004576:	2b02      	cmp	r3, #2
 8004578:	d013      	beq.n	80045a2 <I2C_Master_ADDR+0x228>
 800457a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457c:	2b10      	cmp	r3, #16
 800457e:	d010      	beq.n	80045a2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800458e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	e007      	b.n	80045b2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045b0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045c0:	d117      	bne.n	80045f2 <I2C_Master_ADDR+0x278>
 80045c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045c8:	d00b      	beq.n	80045e2 <I2C_Master_ADDR+0x268>
 80045ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d008      	beq.n	80045e2 <I2C_Master_ADDR+0x268>
 80045d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d005      	beq.n	80045e2 <I2C_Master_ADDR+0x268>
 80045d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d8:	2b10      	cmp	r3, #16
 80045da:	d002      	beq.n	80045e2 <I2C_Master_ADDR+0x268>
 80045dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d107      	bne.n	80045f2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f2:	2300      	movs	r3, #0
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	e032      	b.n	8004670 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004618:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004628:	d117      	bne.n	800465a <I2C_Master_ADDR+0x2e0>
 800462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004630:	d00b      	beq.n	800464a <I2C_Master_ADDR+0x2d0>
 8004632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004634:	2b01      	cmp	r3, #1
 8004636:	d008      	beq.n	800464a <I2C_Master_ADDR+0x2d0>
 8004638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463a:	2b08      	cmp	r3, #8
 800463c:	d005      	beq.n	800464a <I2C_Master_ADDR+0x2d0>
 800463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004640:	2b10      	cmp	r3, #16
 8004642:	d002      	beq.n	800464a <I2C_Master_ADDR+0x2d0>
 8004644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004646:	2b20      	cmp	r3, #32
 8004648:	d107      	bne.n	800465a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004658:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800465a:	2300      	movs	r3, #0
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004676:	e00b      	b.n	8004690 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
}
 800468e:	e7ff      	b.n	8004690 <I2C_Master_ADDR+0x316>
 8004690:	bf00      	nop
 8004692:	3744      	adds	r7, #68	; 0x44
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d02b      	beq.n	800470e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	781a      	ldrb	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d114      	bne.n	800470e <I2C_SlaveTransmit_TXE+0x72>
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	2b29      	cmp	r3, #41	; 0x29
 80046e8:	d111      	bne.n	800470e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2221      	movs	r2, #33	; 0x21
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2228      	movs	r2, #40	; 0x28
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7ff f9ef 	bl	8003aec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d011      	beq.n	800474c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	781a      	ldrb	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004766:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d02c      	beq.n	80047cc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d114      	bne.n	80047cc <I2C_SlaveReceive_RXNE+0x74>
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	2b2a      	cmp	r3, #42	; 0x2a
 80047a6:	d111      	bne.n	80047cc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2222      	movs	r2, #34	; 0x22
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2228      	movs	r2, #40	; 0x28
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff f99a 	bl	8003b00 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d012      	beq.n	800480c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004822:	2300      	movs	r3, #0
 8004824:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482c:	b2db      	uxtb	r3, r3
 800482e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004832:	2b28      	cmp	r3, #40	; 0x28
 8004834:	d127      	bne.n	8004886 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004844:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	089b      	lsrs	r3, r3, #2
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004852:	2301      	movs	r3, #1
 8004854:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	09db      	lsrs	r3, r3, #7
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	81bb      	strh	r3, [r7, #12]
 8004868:	e002      	b.n	8004870 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004878:	89ba      	ldrh	r2, [r7, #12]
 800487a:	7bfb      	ldrb	r3, [r7, #15]
 800487c:	4619      	mov	r1, r3
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff f948 	bl	8003b14 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004884:	e00e      	b.n	80048a4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004886:	2300      	movs	r3, #0
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80048a4:	bf00      	nop
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048ca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80048cc:	2300      	movs	r3, #0
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	60bb      	str	r3, [r7, #8]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004908:	d172      	bne.n	80049f0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	2b22      	cmp	r3, #34	; 0x22
 800490e:	d002      	beq.n	8004916 <I2C_Slave_STOPF+0x6a>
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	2b2a      	cmp	r3, #42	; 0x2a
 8004914:	d135      	bne.n	8004982 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	b29a      	uxth	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f043 0204 	orr.w	r2, r3, #4
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004948:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe f869 	bl	8002a26 <HAL_DMA_GetState>
 8004954:	4603      	mov	r3, r0
 8004956:	2b01      	cmp	r3, #1
 8004958:	d049      	beq.n	80049ee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	4a69      	ldr	r2, [pc, #420]	; (8004b04 <I2C_Slave_STOPF+0x258>)
 8004960:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004966:	4618      	mov	r0, r3
 8004968:	f7fe f83b 	bl	80029e2 <HAL_DMA_Abort_IT>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d03d      	beq.n	80049ee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800497c:	4610      	mov	r0, r2
 800497e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004980:	e035      	b.n	80049ee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	b29a      	uxth	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f043 0204 	orr.w	r2, r3, #4
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe f833 	bl	8002a26 <HAL_DMA_GetState>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d014      	beq.n	80049f0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ca:	4a4e      	ldr	r2, [pc, #312]	; (8004b04 <I2C_Slave_STOPF+0x258>)
 80049cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe f805 	bl	80029e2 <HAL_DMA_Abort_IT>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049e8:	4610      	mov	r0, r2
 80049ea:	4798      	blx	r3
 80049ec:	e000      	b.n	80049f0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049ee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d03e      	beq.n	8004a78 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d112      	bne.n	8004a2e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a38:	2b40      	cmp	r3, #64	; 0x40
 8004a3a:	d112      	bne.n	8004a62 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	f043 0204 	orr.w	r2, r3, #4
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f8b3 	bl	8004bec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004a86:	e039      	b.n	8004afc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a8c:	d109      	bne.n	8004aa2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2228      	movs	r2, #40	; 0x28
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff f82f 	bl	8003b00 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b28      	cmp	r3, #40	; 0x28
 8004aac:	d111      	bne.n	8004ad2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a15      	ldr	r2, [pc, #84]	; (8004b08 <I2C_Slave_STOPF+0x25c>)
 8004ab2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff f830 	bl	8003b30 <HAL_I2C_ListenCpltCallback>
}
 8004ad0:	e014      	b.n	8004afc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	2b22      	cmp	r3, #34	; 0x22
 8004ad8:	d002      	beq.n	8004ae0 <I2C_Slave_STOPF+0x234>
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	2b22      	cmp	r3, #34	; 0x22
 8004ade:	d10d      	bne.n	8004afc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff f802 	bl	8003b00 <HAL_I2C_SlaveRxCpltCallback>
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	08004f55 	.word	0x08004f55
 8004b08:	ffff0000 	.word	0xffff0000

08004b0c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d002      	beq.n	8004b2e <I2C_Slave_AF+0x22>
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d129      	bne.n	8004b82 <I2C_Slave_AF+0x76>
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
 8004b30:	2b28      	cmp	r3, #40	; 0x28
 8004b32:	d126      	bne.n	8004b82 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a2c      	ldr	r2, [pc, #176]	; (8004be8 <I2C_Slave_AF+0xdc>)
 8004b38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b48:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b52:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b62:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fe ffd8 	bl	8003b30 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004b80:	e02e      	b.n	8004be0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	2b21      	cmp	r3, #33	; 0x21
 8004b86:	d126      	bne.n	8004bd6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a17      	ldr	r2, [pc, #92]	; (8004be8 <I2C_Slave_AF+0xdc>)
 8004b8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2221      	movs	r2, #33	; 0x21
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bb2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bbc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bcc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fe ff8c 	bl	8003aec <HAL_I2C_SlaveTxCpltCallback>
}
 8004bd4:	e004      	b.n	8004be0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bde:	615a      	str	r2, [r3, #20]
}
 8004be0:	bf00      	nop
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	ffff0000 	.word	0xffff0000

08004bec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c02:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c04:	7bbb      	ldrb	r3, [r7, #14]
 8004c06:	2b10      	cmp	r3, #16
 8004c08:	d002      	beq.n	8004c10 <I2C_ITError+0x24>
 8004c0a:	7bbb      	ldrb	r3, [r7, #14]
 8004c0c:	2b40      	cmp	r3, #64	; 0x40
 8004c0e:	d10a      	bne.n	8004c26 <I2C_ITError+0x3a>
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	2b22      	cmp	r3, #34	; 0x22
 8004c14:	d107      	bne.n	8004c26 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c24:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c2c:	2b28      	cmp	r3, #40	; 0x28
 8004c2e:	d107      	bne.n	8004c40 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2228      	movs	r2, #40	; 0x28
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c3e:	e015      	b.n	8004c6c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c4e:	d00a      	beq.n	8004c66 <I2C_ITError+0x7a>
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	2b60      	cmp	r3, #96	; 0x60
 8004c54:	d007      	beq.n	8004c66 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7a:	d162      	bne.n	8004d42 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c8a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d020      	beq.n	8004cdc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9e:	4a6a      	ldr	r2, [pc, #424]	; (8004e48 <I2C_ITError+0x25c>)
 8004ca0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fd fe9b 	bl	80029e2 <HAL_DMA_Abort_IT>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 8089 	beq.w	8004dc6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4798      	blx	r3
 8004cda:	e074      	b.n	8004dc6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	4a59      	ldr	r2, [pc, #356]	; (8004e48 <I2C_ITError+0x25c>)
 8004ce2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fd fe7a 	bl	80029e2 <HAL_DMA_Abort_IT>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d068      	beq.n	8004dc6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b40      	cmp	r3, #64	; 0x40
 8004d00:	d10b      	bne.n	8004d1a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0201 	bic.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4798      	blx	r3
 8004d40:	e041      	b.n	8004dc6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b60      	cmp	r3, #96	; 0x60
 8004d4c:	d125      	bne.n	8004d9a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d66:	2b40      	cmp	r3, #64	; 0x40
 8004d68:	d10b      	bne.n	8004d82 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fe fee0 	bl	8003b58 <HAL_I2C_AbortCpltCallback>
 8004d98:	e015      	b.n	8004dc6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da4:	2b40      	cmp	r3, #64	; 0x40
 8004da6:	d10b      	bne.n	8004dc0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7fb fda1 	bl	8000908 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10e      	bne.n	8004df4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d109      	bne.n	8004df4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d104      	bne.n	8004df4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d007      	beq.n	8004e04 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e02:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d113      	bne.n	8004e40 <I2C_ITError+0x254>
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	2b28      	cmp	r3, #40	; 0x28
 8004e1c:	d110      	bne.n	8004e40 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a0a      	ldr	r2, [pc, #40]	; (8004e4c <I2C_ITError+0x260>)
 8004e22:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7fe fe78 	bl	8003b30 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e40:	bf00      	nop
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	08004f55 	.word	0x08004f55
 8004e4c:	ffff0000 	.word	0xffff0000

08004e50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	607a      	str	r2, [r7, #4]
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d006      	beq.n	8004e7a <I2C_MasterRequestWrite+0x2a>
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d003      	beq.n	8004e7a <I2C_MasterRequestWrite+0x2a>
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e78:	d108      	bne.n	8004e8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	e00b      	b.n	8004ea4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	2b12      	cmp	r3, #18
 8004e92:	d107      	bne.n	8004ea4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ea2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f8f7 	bl	80050a4 <I2C_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00d      	beq.n	8004ed8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eca:	d103      	bne.n	8004ed4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ed2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e035      	b.n	8004f44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ee0:	d108      	bne.n	8004ef4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ee2:	897b      	ldrh	r3, [r7, #10]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ef0:	611a      	str	r2, [r3, #16]
 8004ef2:	e01b      	b.n	8004f2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ef4:	897b      	ldrh	r3, [r7, #10]
 8004ef6:	11db      	asrs	r3, r3, #7
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	f003 0306 	and.w	r3, r3, #6
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	f063 030f 	orn	r3, r3, #15
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	490e      	ldr	r1, [pc, #56]	; (8004f4c <I2C_MasterRequestWrite+0xfc>)
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f91d 	bl	8005152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e010      	b.n	8004f44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f22:	897b      	ldrh	r3, [r7, #10]
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	4907      	ldr	r1, [pc, #28]	; (8004f50 <I2C_MasterRequestWrite+0x100>)
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f90d 	bl	8005152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	00010008 	.word	0x00010008
 8004f50:	00010002 	.word	0x00010002

08004f54 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f6e:	4b4b      	ldr	r3, [pc, #300]	; (800509c <I2C_DMAAbort+0x148>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	08db      	lsrs	r3, r3, #3
 8004f74:	4a4a      	ldr	r2, [pc, #296]	; (80050a0 <I2C_DMAAbort+0x14c>)
 8004f76:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7a:	0a1a      	lsrs	r2, r3, #8
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	00da      	lsls	r2, r3, #3
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d106      	bne.n	8004f9c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	f043 0220 	orr.w	r2, r3, #32
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004f9a:	e00a      	b.n	8004fb2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fb0:	d0ea      	beq.n	8004f88 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fce:	2200      	movs	r2, #0
 8004fd0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	2200      	movs	r2, #0
 8005006:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0201 	bic.w	r2, r2, #1
 8005016:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b60      	cmp	r3, #96	; 0x60
 8005022:	d10e      	bne.n	8005042 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2200      	movs	r2, #0
 8005038:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800503a:	6978      	ldr	r0, [r7, #20]
 800503c:	f7fe fd8c 	bl	8003b58 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005040:	e027      	b.n	8005092 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005042:	7cfb      	ldrb	r3, [r7, #19]
 8005044:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005048:	2b28      	cmp	r3, #40	; 0x28
 800504a:	d117      	bne.n	800507c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800506a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2200      	movs	r2, #0
 8005070:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2228      	movs	r2, #40	; 0x28
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800507a:	e007      	b.n	800508c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800508c:	6978      	ldr	r0, [r7, #20]
 800508e:	f7fb fc3b 	bl	8000908 <HAL_I2C_ErrorCallback>
}
 8005092:	bf00      	nop
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000008 	.word	0x20000008
 80050a0:	14f8b589 	.word	0x14f8b589

080050a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	4613      	mov	r3, r2
 80050b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050b4:	e025      	b.n	8005102 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050bc:	d021      	beq.n	8005102 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050be:	f7fd fb4f 	bl	8002760 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d302      	bcc.n	80050d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d116      	bne.n	8005102 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f043 0220 	orr.w	r2, r3, #32
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e023      	b.n	800514a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	0c1b      	lsrs	r3, r3, #16
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	d10d      	bne.n	8005128 <I2C_WaitOnFlagUntilTimeout+0x84>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	43da      	mvns	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4013      	ands	r3, r2
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	bf0c      	ite	eq
 800511e:	2301      	moveq	r3, #1
 8005120:	2300      	movne	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	461a      	mov	r2, r3
 8005126:	e00c      	b.n	8005142 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	43da      	mvns	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4013      	ands	r3, r2
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	bf0c      	ite	eq
 800513a:	2301      	moveq	r3, #1
 800513c:	2300      	movne	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	429a      	cmp	r2, r3
 8005146:	d0b6      	beq.n	80050b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
 800515e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005160:	e051      	b.n	8005206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005170:	d123      	bne.n	80051ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005180:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800518a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f043 0204 	orr.w	r2, r3, #4
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e046      	b.n	8005248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d021      	beq.n	8005206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c2:	f7fd facd 	bl	8002760 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d302      	bcc.n	80051d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d116      	bne.n	8005206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	f043 0220 	orr.w	r2, r3, #32
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e020      	b.n	8005248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	0c1b      	lsrs	r3, r3, #16
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	d10c      	bne.n	800522a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	43da      	mvns	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4013      	ands	r3, r2
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	bf14      	ite	ne
 8005222:	2301      	movne	r3, #1
 8005224:	2300      	moveq	r3, #0
 8005226:	b2db      	uxtb	r3, r3
 8005228:	e00b      	b.n	8005242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	43da      	mvns	r2, r3
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	4013      	ands	r3, r2
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	bf14      	ite	ne
 800523c:	2301      	movne	r3, #1
 800523e:	2300      	moveq	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d18d      	bne.n	8005162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800525c:	e02d      	b.n	80052ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f8aa 	bl	80053b8 <I2C_IsAcknowledgeFailed>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e02d      	b.n	80052ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005274:	d021      	beq.n	80052ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005276:	f7fd fa73 	bl	8002760 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	429a      	cmp	r2, r3
 8005284:	d302      	bcc.n	800528c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d116      	bne.n	80052ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f043 0220 	orr.w	r2, r3, #32
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e007      	b.n	80052ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c4:	2b80      	cmp	r3, #128	; 0x80
 80052c6:	d1ca      	bne.n	800525e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052de:	e02d      	b.n	800533c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f869 	bl	80053b8 <I2C_IsAcknowledgeFailed>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e02d      	b.n	800534c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f6:	d021      	beq.n	800533c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f8:	f7fd fa32 	bl	8002760 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	429a      	cmp	r2, r3
 8005306:	d302      	bcc.n	800530e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d116      	bne.n	800533c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	f043 0220 	orr.w	r2, r3, #32
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e007      	b.n	800534c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b04      	cmp	r3, #4
 8005348:	d1ca      	bne.n	80052e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005360:	4b13      	ldr	r3, [pc, #76]	; (80053b0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	08db      	lsrs	r3, r3, #3
 8005366:	4a13      	ldr	r2, [pc, #76]	; (80053b4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005368:	fba2 2303 	umull	r2, r3, r2, r3
 800536c:	0a1a      	lsrs	r2, r3, #8
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3b01      	subs	r3, #1
 800537a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d107      	bne.n	8005392 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	f043 0220 	orr.w	r2, r3, #32
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e008      	b.n	80053a4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800539c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053a0:	d0e9      	beq.n	8005376 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	20000008 	.word	0x20000008
 80053b4:	14f8b589 	.word	0x14f8b589

080053b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ce:	d11b      	bne.n	8005408 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	f043 0204 	orr.w	r2, r3, #4
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005426:	d103      	bne.n	8005430 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800542e:	e007      	b.n	8005440 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005438:	d102      	bne.n	8005440 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2208      	movs	r2, #8
 800543e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800544c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800544e:	b08f      	sub	sp, #60	; 0x3c
 8005450:	af0a      	add	r7, sp, #40	; 0x28
 8005452:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e10f      	b.n	800567e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d106      	bne.n	800547e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f007 fcbb 	bl	800cdf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2203      	movs	r2, #3
 8005482:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f003 fba0 	bl	8008be2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	687e      	ldr	r6, [r7, #4]
 80054aa:	466d      	mov	r5, sp
 80054ac:	f106 0410 	add.w	r4, r6, #16
 80054b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80054c0:	1d33      	adds	r3, r6, #4
 80054c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054c4:	6838      	ldr	r0, [r7, #0]
 80054c6:	f003 fa77 	bl	80089b8 <USB_CoreInit>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e0d0      	b.n	800567e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2100      	movs	r1, #0
 80054e2:	4618      	mov	r0, r3
 80054e4:	f003 fb8e 	bl	8008c04 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054e8:	2300      	movs	r3, #0
 80054ea:	73fb      	strb	r3, [r7, #15]
 80054ec:	e04a      	b.n	8005584 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80054ee:	7bfa      	ldrb	r2, [r7, #15]
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	4613      	mov	r3, r2
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	440b      	add	r3, r1
 80054fc:	333d      	adds	r3, #61	; 0x3d
 80054fe:	2201      	movs	r2, #1
 8005500:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005502:	7bfa      	ldrb	r2, [r7, #15]
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	4613      	mov	r3, r2
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	440b      	add	r3, r1
 8005510:	333c      	adds	r3, #60	; 0x3c
 8005512:	7bfa      	ldrb	r2, [r7, #15]
 8005514:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005516:	7bfa      	ldrb	r2, [r7, #15]
 8005518:	7bfb      	ldrb	r3, [r7, #15]
 800551a:	b298      	uxth	r0, r3
 800551c:	6879      	ldr	r1, [r7, #4]
 800551e:	4613      	mov	r3, r2
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	4413      	add	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	440b      	add	r3, r1
 8005528:	3344      	adds	r3, #68	; 0x44
 800552a:	4602      	mov	r2, r0
 800552c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800552e:	7bfa      	ldrb	r2, [r7, #15]
 8005530:	6879      	ldr	r1, [r7, #4]
 8005532:	4613      	mov	r3, r2
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	4413      	add	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	440b      	add	r3, r1
 800553c:	3340      	adds	r3, #64	; 0x40
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005542:	7bfa      	ldrb	r2, [r7, #15]
 8005544:	6879      	ldr	r1, [r7, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	440b      	add	r3, r1
 8005550:	3348      	adds	r3, #72	; 0x48
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005556:	7bfa      	ldrb	r2, [r7, #15]
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	334c      	adds	r3, #76	; 0x4c
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800556a:	7bfa      	ldrb	r2, [r7, #15]
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	4413      	add	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	440b      	add	r3, r1
 8005578:	3354      	adds	r3, #84	; 0x54
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	3301      	adds	r3, #1
 8005582:	73fb      	strb	r3, [r7, #15]
 8005584:	7bfa      	ldrb	r2, [r7, #15]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	429a      	cmp	r2, r3
 800558c:	d3af      	bcc.n	80054ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800558e:	2300      	movs	r3, #0
 8005590:	73fb      	strb	r3, [r7, #15]
 8005592:	e044      	b.n	800561e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005594:	7bfa      	ldrb	r2, [r7, #15]
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80055a6:	2200      	movs	r2, #0
 80055a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055aa:	7bfa      	ldrb	r2, [r7, #15]
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80055bc:	7bfa      	ldrb	r2, [r7, #15]
 80055be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80055c0:	7bfa      	ldrb	r2, [r7, #15]
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	4613      	mov	r3, r2
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80055d2:	2200      	movs	r2, #0
 80055d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80055d6:	7bfa      	ldrb	r2, [r7, #15]
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	4613      	mov	r3, r2
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80055ec:	7bfa      	ldrb	r2, [r7, #15]
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	4413      	add	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	440b      	add	r3, r1
 80055fa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80055fe:	2200      	movs	r2, #0
 8005600:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005602:	7bfa      	ldrb	r2, [r7, #15]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	3301      	adds	r3, #1
 800561c:	73fb      	strb	r3, [r7, #15]
 800561e:	7bfa      	ldrb	r2, [r7, #15]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	429a      	cmp	r2, r3
 8005626:	d3b5      	bcc.n	8005594 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	603b      	str	r3, [r7, #0]
 800562e:	687e      	ldr	r6, [r7, #4]
 8005630:	466d      	mov	r5, sp
 8005632:	f106 0410 	add.w	r4, r6, #16
 8005636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800563a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800563c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800563e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005642:	e885 0003 	stmia.w	r5, {r0, r1}
 8005646:	1d33      	adds	r3, r6, #4
 8005648:	cb0e      	ldmia	r3, {r1, r2, r3}
 800564a:	6838      	ldr	r0, [r7, #0]
 800564c:	f003 fb26 	bl	8008c9c <USB_DevInit>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d005      	beq.n	8005662 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e00d      	b.n	800567e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4618      	mov	r0, r3
 8005678:	f004 fc75 	bl	8009f66 <USB_DevDisconnect>

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005686 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800569a:	2b01      	cmp	r3, #1
 800569c:	d101      	bne.n	80056a2 <HAL_PCD_Start+0x1c>
 800569e:	2302      	movs	r3, #2
 80056a0:	e020      	b.n	80056e4 <HAL_PCD_Start+0x5e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d109      	bne.n	80056c6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d005      	beq.n	80056c6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f003 fa78 	bl	8008bc0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f004 fc25 	bl	8009f24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80056ec:	b590      	push	{r4, r7, lr}
 80056ee:	b08d      	sub	sp, #52	; 0x34
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f004 fce3 	bl	800a0ce <USB_GetMode>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	f040 848a 	bne.w	8006024 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f004 fc47 	bl	8009fa8 <USB_ReadInterrupts>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8480 	beq.w	8006022 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	0a1b      	lsrs	r3, r3, #8
 800572c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4618      	mov	r0, r3
 800573c:	f004 fc34 	bl	8009fa8 <USB_ReadInterrupts>
 8005740:	4603      	mov	r3, r0
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b02      	cmp	r3, #2
 8005748:	d107      	bne.n	800575a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695a      	ldr	r2, [r3, #20]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f002 0202 	and.w	r2, r2, #2
 8005758:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f004 fc22 	bl	8009fa8 <USB_ReadInterrupts>
 8005764:	4603      	mov	r3, r0
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b10      	cmp	r3, #16
 800576c:	d161      	bne.n	8005832 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699a      	ldr	r2, [r3, #24]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0210 	bic.w	r2, r2, #16
 800577c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	f003 020f 	and.w	r2, r3, #15
 800578a:	4613      	mov	r3, r2
 800578c:	00db      	lsls	r3, r3, #3
 800578e:	4413      	add	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	4413      	add	r3, r2
 800579a:	3304      	adds	r3, #4
 800579c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	0c5b      	lsrs	r3, r3, #17
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d124      	bne.n	80057f4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80057b0:	4013      	ands	r3, r2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d035      	beq.n	8005822 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	091b      	lsrs	r3, r3, #4
 80057be:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80057c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	6a38      	ldr	r0, [r7, #32]
 80057ca:	f004 fa59 	bl	8009c80 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	691a      	ldr	r2, [r3, #16]
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057da:	441a      	add	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	6a1a      	ldr	r2, [r3, #32]
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	091b      	lsrs	r3, r3, #4
 80057e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057ec:	441a      	add	r2, r3
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	621a      	str	r2, [r3, #32]
 80057f2:	e016      	b.n	8005822 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	0c5b      	lsrs	r3, r3, #17
 80057f8:	f003 030f 	and.w	r3, r3, #15
 80057fc:	2b06      	cmp	r3, #6
 80057fe:	d110      	bne.n	8005822 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005806:	2208      	movs	r2, #8
 8005808:	4619      	mov	r1, r3
 800580a:	6a38      	ldr	r0, [r7, #32]
 800580c:	f004 fa38 	bl	8009c80 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	6a1a      	ldr	r2, [r3, #32]
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	091b      	lsrs	r3, r3, #4
 8005818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800581c:	441a      	add	r2, r3
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	699a      	ldr	r2, [r3, #24]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f042 0210 	orr.w	r2, r2, #16
 8005830:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f004 fbb6 	bl	8009fa8 <USB_ReadInterrupts>
 800583c:	4603      	mov	r3, r0
 800583e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005842:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005846:	f040 80a7 	bne.w	8005998 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f004 fbbb 	bl	8009fce <USB_ReadDevAllOutEpInterrupt>
 8005858:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800585a:	e099      	b.n	8005990 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 808e 	beq.w	8005984 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	4611      	mov	r1, r2
 8005872:	4618      	mov	r0, r3
 8005874:	f004 fbdf 	bl	800a036 <USB_ReadDevOutEPInterrupt>
 8005878:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00c      	beq.n	800589e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	461a      	mov	r2, r3
 8005892:	2301      	movs	r3, #1
 8005894:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005896:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 feab 	bl	80065f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00c      	beq.n	80058c2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b4:	461a      	mov	r2, r3
 80058b6:	2308      	movs	r3, #8
 80058b8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80058ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 ff81 	bl	80067c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d008      	beq.n	80058de <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d8:	461a      	mov	r2, r3
 80058da:	2310      	movs	r3, #16
 80058dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d030      	beq.n	800594a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f0:	2b80      	cmp	r3, #128	; 0x80
 80058f2:	d109      	bne.n	8005908 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005906:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800590a:	4613      	mov	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	4413      	add	r3, r2
 800591a:	3304      	adds	r3, #4
 800591c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	78db      	ldrb	r3, [r3, #3]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d108      	bne.n	8005938 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2200      	movs	r2, #0
 800592a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	b2db      	uxtb	r3, r3
 8005930:	4619      	mov	r1, r3
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f007 fb64 	bl	800d000 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005944:	461a      	mov	r2, r3
 8005946:	2302      	movs	r3, #2
 8005948:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b00      	cmp	r3, #0
 8005952:	d008      	beq.n	8005966 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005960:	461a      	mov	r2, r3
 8005962:	2320      	movs	r3, #32
 8005964:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d009      	beq.n	8005984 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597c:	461a      	mov	r2, r3
 800597e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005982:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	3301      	adds	r3, #1
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800598a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598c:	085b      	lsrs	r3, r3, #1
 800598e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	2b00      	cmp	r3, #0
 8005994:	f47f af62 	bne.w	800585c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4618      	mov	r0, r3
 800599e:	f004 fb03 	bl	8009fa8 <USB_ReadInterrupts>
 80059a2:	4603      	mov	r3, r0
 80059a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059ac:	f040 80db 	bne.w	8005b66 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f004 fb24 	bl	800a002 <USB_ReadDevAllInEpInterrupt>
 80059ba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80059c0:	e0cd      	b.n	8005b5e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80c2 	beq.w	8005b52 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	4611      	mov	r1, r2
 80059d8:	4618      	mov	r0, r3
 80059da:	f004 fb4a 	bl	800a072 <USB_ReadDevInEPInterrupt>
 80059de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d057      	beq.n	8005a9a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	2201      	movs	r2, #1
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	43db      	mvns	r3, r3
 8005a04:	69f9      	ldr	r1, [r7, #28]
 8005a06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d132      	bne.n	8005a8e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	4413      	add	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	334c      	adds	r3, #76	; 0x4c
 8005a38:	6819      	ldr	r1, [r3, #0]
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3e:	4613      	mov	r3, r2
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4403      	add	r3, r0
 8005a48:	3348      	adds	r3, #72	; 0x48
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4419      	add	r1, r3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a52:	4613      	mov	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4403      	add	r3, r0
 8005a5c:	334c      	adds	r3, #76	; 0x4c
 8005a5e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d113      	bne.n	8005a8e <HAL_PCD_IRQHandler+0x3a2>
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	440b      	add	r3, r1
 8005a74:	3354      	adds	r3, #84	; 0x54
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d108      	bne.n	8005a8e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6818      	ldr	r0, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a86:	461a      	mov	r2, r3
 8005a88:	2101      	movs	r1, #1
 8005a8a:	f004 fb51 	bl	800a130 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f007 fa2e 	bl	800cef6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d008      	beq.n	8005ab6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	2308      	movs	r3, #8
 8005ab4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005acc:	461a      	mov	r2, r3
 8005ace:	2310      	movs	r3, #16
 8005ad0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d008      	beq.n	8005aee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2340      	movs	r3, #64	; 0x40
 8005aec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d023      	beq.n	8005b40 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005af8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005afa:	6a38      	ldr	r0, [r7, #32]
 8005afc:	f003 fa32 	bl	8008f64 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b02:	4613      	mov	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	3338      	adds	r3, #56	; 0x38
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	4413      	add	r3, r2
 8005b10:	3304      	adds	r3, #4
 8005b12:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	78db      	ldrb	r3, [r3, #3]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d108      	bne.n	8005b2e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f007 fa7b 	bl	800d024 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005b4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fcc3 	bl	80064d8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	3301      	adds	r3, #1
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5a:	085b      	lsrs	r3, r3, #1
 8005b5c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f47f af2e 	bne.w	80059c2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f004 fa1c 	bl	8009fa8 <USB_ReadInterrupts>
 8005b70:	4603      	mov	r3, r0
 8005b72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b7a:	d122      	bne.n	8005bc2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	69fa      	ldr	r2, [r7, #28]
 8005b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b8a:	f023 0301 	bic.w	r3, r3, #1
 8005b8e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d108      	bne.n	8005bac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 feab 	bl	8006900 <HAL_PCDEx_LPM_Callback>
 8005baa:	e002      	b.n	8005bb2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f007 fa19 	bl	800cfe4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695a      	ldr	r2, [r3, #20]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f004 f9ee 	bl	8009fa8 <USB_ReadInterrupts>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd6:	d112      	bne.n	8005bfe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d102      	bne.n	8005bee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f007 f9d5 	bl	800cf98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695a      	ldr	r2, [r3, #20]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005bfc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f004 f9d0 	bl	8009fa8 <USB_ReadInterrupts>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c12:	f040 80b7 	bne.w	8005d84 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c24:	f023 0301 	bic.w	r3, r3, #1
 8005c28:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2110      	movs	r1, #16
 8005c30:	4618      	mov	r0, r3
 8005c32:	f003 f997 	bl	8008f64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c36:	2300      	movs	r3, #0
 8005c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c3a:	e046      	b.n	8005cca <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c48:	461a      	mov	r2, r3
 8005c4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c4e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c60:	0151      	lsls	r1, r2, #5
 8005c62:	69fa      	ldr	r2, [r7, #28]
 8005c64:	440a      	add	r2, r1
 8005c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c82:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ca2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cb4:	0151      	lsls	r1, r2, #5
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	440a      	add	r2, r1
 8005cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cc2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d3b3      	bcc.n	8005c3c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	69fa      	ldr	r2, [r7, #28]
 8005cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ce2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005ce6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d016      	beq.n	8005d1e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d00:	f043 030b 	orr.w	r3, r3, #11
 8005d04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d10:	69fa      	ldr	r2, [r7, #28]
 8005d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d16:	f043 030b 	orr.w	r3, r3, #11
 8005d1a:	6453      	str	r3, [r2, #68]	; 0x44
 8005d1c:	e015      	b.n	8005d4a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d30:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005d34:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d44:	f043 030b 	orr.w	r3, r3, #11
 8005d48:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69fa      	ldr	r2, [r7, #28]
 8005d54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d58:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d5c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6818      	ldr	r0, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f004 f9de 	bl	800a130 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695a      	ldr	r2, [r3, #20]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f004 f90d 	bl	8009fa8 <USB_ReadInterrupts>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d98:	d124      	bne.n	8005de4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f004 f9a3 	bl	800a0ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f003 f958 	bl	800905e <USB_GetDevSpeed>
 8005dae:	4603      	mov	r3, r0
 8005db0:	461a      	mov	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681c      	ldr	r4, [r3, #0]
 8005dba:	f001 fa11 	bl	80071e0 <HAL_RCC_GetHCLKFreq>
 8005dbe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f002 fe57 	bl	8008a7c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f007 f8b9 	bl	800cf46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	695a      	ldr	r2, [r3, #20]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005de2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f004 f8dd 	bl	8009fa8 <USB_ReadInterrupts>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f003 0308 	and.w	r3, r3, #8
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d10a      	bne.n	8005e0e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f007 f896 	bl	800cf2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f002 0208 	and.w	r2, r2, #8
 8005e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f004 f8c8 	bl	8009fa8 <USB_ReadInterrupts>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1e:	2b80      	cmp	r3, #128	; 0x80
 8005e20:	d122      	bne.n	8005e68 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e2e:	2301      	movs	r3, #1
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24
 8005e32:	e014      	b.n	8005e5e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e38:	4613      	mov	r3, r2
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	440b      	add	r3, r1
 8005e42:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d105      	bne.n	8005e58 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fb0f 	bl	8006476 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d3e5      	bcc.n	8005e34 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f004 f89b 	bl	8009fa8 <USB_ReadInterrupts>
 8005e72:	4603      	mov	r3, r0
 8005e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e7c:	d13b      	bne.n	8005ef6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e7e:	2301      	movs	r3, #1
 8005e80:	627b      	str	r3, [r7, #36]	; 0x24
 8005e82:	e02b      	b.n	8005edc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e98:	4613      	mov	r3, r2
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	3340      	adds	r3, #64	; 0x40
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d115      	bne.n	8005ed6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005eaa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	da12      	bge.n	8005ed6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	4413      	add	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	440b      	add	r3, r1
 8005ebe:	333f      	adds	r3, #63	; 0x3f
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fad0 	bl	8006476 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	3301      	adds	r3, #1
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d3ce      	bcc.n	8005e84 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695a      	ldr	r2, [r3, #20]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f004 f854 	bl	8009fa8 <USB_ReadInterrupts>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f0a:	d155      	bne.n	8005fb8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f10:	e045      	b.n	8005f9e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f26:	4613      	mov	r3, r2
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	440b      	add	r3, r1
 8005f30:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d12e      	bne.n	8005f98 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005f3a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	da2b      	bge.n	8005f98 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005f4c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d121      	bne.n	8005f98 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f58:	4613      	mov	r3, r2
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005f66:	2201      	movs	r2, #1
 8005f68:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10a      	bne.n	8005f98 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f94:	6053      	str	r3, [r2, #4]
            break;
 8005f96:	e007      	b.n	8005fa8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d3b4      	bcc.n	8005f12 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	695a      	ldr	r2, [r3, #20]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005fb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f003 fff3 	bl	8009fa8 <USB_ReadInterrupts>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fcc:	d10a      	bne.n	8005fe4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f007 f83a 	bl	800d048 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	695a      	ldr	r2, [r3, #20]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005fe2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f003 ffdd 	bl	8009fa8 <USB_ReadInterrupts>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d115      	bne.n	8006024 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f007 f82a 	bl	800d064 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6859      	ldr	r1, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	430a      	orrs	r2, r1
 800601e:	605a      	str	r2, [r3, #4]
 8006020:	e000      	b.n	8006024 <HAL_PCD_IRQHandler+0x938>
      return;
 8006022:	bf00      	nop
    }
  }
}
 8006024:	3734      	adds	r7, #52	; 0x34
 8006026:	46bd      	mov	sp, r7
 8006028:	bd90      	pop	{r4, r7, pc}

0800602a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b082      	sub	sp, #8
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	460b      	mov	r3, r1
 8006034:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_PCD_SetAddress+0x1a>
 8006040:	2302      	movs	r3, #2
 8006042:	e013      	b.n	800606c <HAL_PCD_SetAddress+0x42>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	78fa      	ldrb	r2, [r7, #3]
 8006050:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	78fa      	ldrb	r2, [r7, #3]
 800605a:	4611      	mov	r1, r2
 800605c:	4618      	mov	r0, r3
 800605e:	f003 ff3b 	bl	8009ed8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	4608      	mov	r0, r1
 800607e:	4611      	mov	r1, r2
 8006080:	461a      	mov	r2, r3
 8006082:	4603      	mov	r3, r0
 8006084:	70fb      	strb	r3, [r7, #3]
 8006086:	460b      	mov	r3, r1
 8006088:	803b      	strh	r3, [r7, #0]
 800608a:	4613      	mov	r3, r2
 800608c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006092:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006096:	2b00      	cmp	r3, #0
 8006098:	da0f      	bge.n	80060ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800609a:	78fb      	ldrb	r3, [r7, #3]
 800609c:	f003 020f 	and.w	r2, r3, #15
 80060a0:	4613      	mov	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	4413      	add	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	3338      	adds	r3, #56	; 0x38
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	4413      	add	r3, r2
 80060ae:	3304      	adds	r3, #4
 80060b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	705a      	strb	r2, [r3, #1]
 80060b8:	e00f      	b.n	80060da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	f003 020f 	and.w	r2, r3, #15
 80060c0:	4613      	mov	r3, r2
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	4413      	add	r3, r2
 80060d0:	3304      	adds	r3, #4
 80060d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	f003 030f 	and.w	r3, r3, #15
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80060e6:	883a      	ldrh	r2, [r7, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	78ba      	ldrb	r2, [r7, #2]
 80060f0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	785b      	ldrb	r3, [r3, #1]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d004      	beq.n	8006104 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006104:	78bb      	ldrb	r3, [r7, #2]
 8006106:	2b02      	cmp	r3, #2
 8006108:	d102      	bne.n	8006110 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006116:	2b01      	cmp	r3, #1
 8006118:	d101      	bne.n	800611e <HAL_PCD_EP_Open+0xaa>
 800611a:	2302      	movs	r3, #2
 800611c:	e00e      	b.n	800613c <HAL_PCD_EP_Open+0xc8>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68f9      	ldr	r1, [r7, #12]
 800612c:	4618      	mov	r0, r3
 800612e:	f002 ffbb 	bl	80090a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800613a:	7afb      	ldrb	r3, [r7, #11]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006154:	2b00      	cmp	r3, #0
 8006156:	da0f      	bge.n	8006178 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006158:	78fb      	ldrb	r3, [r7, #3]
 800615a:	f003 020f 	and.w	r2, r3, #15
 800615e:	4613      	mov	r3, r2
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	4413      	add	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	3338      	adds	r3, #56	; 0x38
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	4413      	add	r3, r2
 800616c:	3304      	adds	r3, #4
 800616e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	705a      	strb	r2, [r3, #1]
 8006176:	e00f      	b.n	8006198 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006178:	78fb      	ldrb	r3, [r7, #3]
 800617a:	f003 020f 	and.w	r2, r3, #15
 800617e:	4613      	mov	r3, r2
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	4413      	add	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	4413      	add	r3, r2
 800618e:	3304      	adds	r3, #4
 8006190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <HAL_PCD_EP_Close+0x6e>
 80061ae:	2302      	movs	r3, #2
 80061b0:	e00e      	b.n	80061d0 <HAL_PCD_EP_Close+0x8c>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68f9      	ldr	r1, [r7, #12]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f002 fff9 	bl	80091b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	607a      	str	r2, [r7, #4]
 80061e2:	603b      	str	r3, [r7, #0]
 80061e4:	460b      	mov	r3, r1
 80061e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061e8:	7afb      	ldrb	r3, [r7, #11]
 80061ea:	f003 020f 	and.w	r2, r3, #15
 80061ee:	4613      	mov	r3, r2
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	4413      	add	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	4413      	add	r3, r2
 80061fe:	3304      	adds	r3, #4
 8006200:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2200      	movs	r2, #0
 8006212:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2200      	movs	r2, #0
 8006218:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800621a:	7afb      	ldrb	r3, [r7, #11]
 800621c:	f003 030f 	and.w	r3, r3, #15
 8006220:	b2da      	uxtb	r2, r3
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d102      	bne.n	8006234 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006234:	7afb      	ldrb	r3, [r7, #11]
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	2b00      	cmp	r3, #0
 800623c:	d109      	bne.n	8006252 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	b2db      	uxtb	r3, r3
 8006248:	461a      	mov	r2, r3
 800624a:	6979      	ldr	r1, [r7, #20]
 800624c:	f003 fad8 	bl	8009800 <USB_EP0StartXfer>
 8006250:	e008      	b.n	8006264 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6818      	ldr	r0, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	b2db      	uxtb	r3, r3
 800625c:	461a      	mov	r2, r3
 800625e:	6979      	ldr	r1, [r7, #20]
 8006260:	f003 f886 	bl	8009370 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3718      	adds	r7, #24
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b086      	sub	sp, #24
 8006272:	af00      	add	r7, sp, #0
 8006274:	60f8      	str	r0, [r7, #12]
 8006276:	607a      	str	r2, [r7, #4]
 8006278:	603b      	str	r3, [r7, #0]
 800627a:	460b      	mov	r3, r1
 800627c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800627e:	7afb      	ldrb	r3, [r7, #11]
 8006280:	f003 020f 	and.w	r2, r3, #15
 8006284:	4613      	mov	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	4413      	add	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	3338      	adds	r3, #56	; 0x38
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4413      	add	r3, r2
 8006292:	3304      	adds	r3, #4
 8006294:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2200      	movs	r2, #0
 80062a6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	2201      	movs	r2, #1
 80062ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062ae:	7afb      	ldrb	r3, [r7, #11]
 80062b0:	f003 030f 	and.w	r3, r3, #15
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d102      	bne.n	80062c8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062c8:	7afb      	ldrb	r3, [r7, #11]
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d109      	bne.n	80062e6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	461a      	mov	r2, r3
 80062de:	6979      	ldr	r1, [r7, #20]
 80062e0:	f003 fa8e 	bl	8009800 <USB_EP0StartXfer>
 80062e4:	e008      	b.n	80062f8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	461a      	mov	r2, r3
 80062f2:	6979      	ldr	r1, [r7, #20]
 80062f4:	f003 f83c 	bl	8009370 <USB_EPStartXfer>
  }

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	460b      	mov	r3, r1
 800630c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	f003 020f 	and.w	r2, r3, #15
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	429a      	cmp	r2, r3
 800631a:	d901      	bls.n	8006320 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e050      	b.n	80063c2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006320:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006324:	2b00      	cmp	r3, #0
 8006326:	da0f      	bge.n	8006348 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	f003 020f 	and.w	r2, r3, #15
 800632e:	4613      	mov	r3, r2
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	3338      	adds	r3, #56	; 0x38
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	4413      	add	r3, r2
 800633c:	3304      	adds	r3, #4
 800633e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2201      	movs	r2, #1
 8006344:	705a      	strb	r2, [r3, #1]
 8006346:	e00d      	b.n	8006364 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006348:	78fa      	ldrb	r2, [r7, #3]
 800634a:	4613      	mov	r3, r2
 800634c:	00db      	lsls	r3, r3, #3
 800634e:	4413      	add	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	4413      	add	r3, r2
 800635a:	3304      	adds	r3, #4
 800635c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2201      	movs	r2, #1
 8006368:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	f003 030f 	and.w	r3, r3, #15
 8006370:	b2da      	uxtb	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <HAL_PCD_EP_SetStall+0x82>
 8006380:	2302      	movs	r3, #2
 8006382:	e01e      	b.n	80063c2 <HAL_PCD_EP_SetStall+0xc0>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68f9      	ldr	r1, [r7, #12]
 8006392:	4618      	mov	r0, r3
 8006394:	f003 fccc 	bl	8009d30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	f003 030f 	and.w	r3, r3, #15
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10a      	bne.n	80063b8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6818      	ldr	r0, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	b2d9      	uxtb	r1, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80063b2:	461a      	mov	r2, r3
 80063b4:	f003 febc 	bl	800a130 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	460b      	mov	r3, r1
 80063d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	f003 020f 	and.w	r2, r3, #15
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d901      	bls.n	80063e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e042      	b.n	800646e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80063e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	da0f      	bge.n	8006410 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	f003 020f 	and.w	r2, r3, #15
 80063f6:	4613      	mov	r3, r2
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	3338      	adds	r3, #56	; 0x38
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	4413      	add	r3, r2
 8006404:	3304      	adds	r3, #4
 8006406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2201      	movs	r2, #1
 800640c:	705a      	strb	r2, [r3, #1]
 800640e:	e00f      	b.n	8006430 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006410:	78fb      	ldrb	r3, [r7, #3]
 8006412:	f003 020f 	and.w	r2, r3, #15
 8006416:	4613      	mov	r3, r2
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	4413      	add	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	4413      	add	r3, r2
 8006426:	3304      	adds	r3, #4
 8006428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006436:	78fb      	ldrb	r3, [r7, #3]
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	b2da      	uxtb	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_PCD_EP_ClrStall+0x86>
 800644c:	2302      	movs	r3, #2
 800644e:	e00e      	b.n	800646e <HAL_PCD_EP_ClrStall+0xa4>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68f9      	ldr	r1, [r7, #12]
 800645e:	4618      	mov	r0, r3
 8006460:	f003 fcd4 	bl	8009e0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	460b      	mov	r3, r1
 8006480:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006482:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006486:	2b00      	cmp	r3, #0
 8006488:	da0c      	bge.n	80064a4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800648a:	78fb      	ldrb	r3, [r7, #3]
 800648c:	f003 020f 	and.w	r2, r3, #15
 8006490:	4613      	mov	r3, r2
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	3338      	adds	r3, #56	; 0x38
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	4413      	add	r3, r2
 800649e:	3304      	adds	r3, #4
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	e00c      	b.n	80064be <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064a4:	78fb      	ldrb	r3, [r7, #3]
 80064a6:	f003 020f 	and.w	r2, r3, #15
 80064aa:	4613      	mov	r3, r2
 80064ac:	00db      	lsls	r3, r3, #3
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	4413      	add	r3, r2
 80064ba:	3304      	adds	r3, #4
 80064bc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68f9      	ldr	r1, [r7, #12]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f003 faf3 	bl	8009ab0 <USB_EPStopXfer>
 80064ca:	4603      	mov	r3, r0
 80064cc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80064ce:	7afb      	ldrb	r3, [r7, #11]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b08a      	sub	sp, #40	; 0x28
 80064dc:	af02      	add	r7, sp, #8
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	4613      	mov	r3, r2
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	3338      	adds	r3, #56	; 0x38
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	4413      	add	r3, r2
 80064fc:	3304      	adds	r3, #4
 80064fe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6a1a      	ldr	r2, [r3, #32]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	429a      	cmp	r2, r3
 800650a:	d901      	bls.n	8006510 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e06c      	b.n	80065ea <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	699a      	ldr	r2, [r3, #24]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	69fa      	ldr	r2, [r7, #28]
 8006522:	429a      	cmp	r2, r3
 8006524:	d902      	bls.n	800652c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	3303      	adds	r3, #3
 8006530:	089b      	lsrs	r3, r3, #2
 8006532:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006534:	e02b      	b.n	800658e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	699a      	ldr	r2, [r3, #24]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	69fa      	ldr	r2, [r7, #28]
 8006548:	429a      	cmp	r2, r3
 800654a:	d902      	bls.n	8006552 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	3303      	adds	r3, #3
 8006556:	089b      	lsrs	r3, r3, #2
 8006558:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6919      	ldr	r1, [r3, #16]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	b2da      	uxtb	r2, r3
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800656a:	b2db      	uxtb	r3, r3
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	4603      	mov	r3, r0
 8006570:	6978      	ldr	r0, [r7, #20]
 8006572:	f003 fb47 	bl	8009c04 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	691a      	ldr	r2, [r3, #16]
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	441a      	add	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a1a      	ldr	r2, [r3, #32]
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	441a      	add	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	b29b      	uxth	r3, r3
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d809      	bhi.n	80065b8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a1a      	ldr	r2, [r3, #32]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d203      	bcs.n	80065b8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1be      	bne.n	8006536 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	699a      	ldr	r2, [r3, #24]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d811      	bhi.n	80065e8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	2201      	movs	r2, #1
 80065cc:	fa02 f303 	lsl.w	r3, r2, r3
 80065d0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	43db      	mvns	r3, r3
 80065de:	6939      	ldr	r1, [r7, #16]
 80065e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065e4:	4013      	ands	r3, r2
 80065e6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3720      	adds	r7, #32
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	333c      	adds	r3, #60	; 0x3c
 800660c:	3304      	adds	r3, #4
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	4413      	add	r3, r2
 800661a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d17b      	bne.n	8006722 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f003 0308 	and.w	r3, r3, #8
 8006630:	2b00      	cmp	r3, #0
 8006632:	d015      	beq.n	8006660 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	4a61      	ldr	r2, [pc, #388]	; (80067bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006638:	4293      	cmp	r3, r2
 800663a:	f240 80b9 	bls.w	80067b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 80b3 	beq.w	80067b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006656:	461a      	mov	r2, r3
 8006658:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800665c:	6093      	str	r3, [r2, #8]
 800665e:	e0a7      	b.n	80067b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b00      	cmp	r3, #0
 8006668:	d009      	beq.n	800667e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006676:	461a      	mov	r2, r3
 8006678:	2320      	movs	r3, #32
 800667a:	6093      	str	r3, [r2, #8]
 800667c:	e098      	b.n	80067b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006684:	2b00      	cmp	r3, #0
 8006686:	f040 8093 	bne.w	80067b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	4a4b      	ldr	r2, [pc, #300]	; (80067bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d90f      	bls.n	80066b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00a      	beq.n	80066b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a8:	461a      	mov	r2, r3
 80066aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ae:	6093      	str	r3, [r2, #8]
 80066b0:	e07e      	b.n	80067b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	4613      	mov	r3, r2
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	4413      	add	r3, r2
 80066c4:	3304      	adds	r3, #4
 80066c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	69da      	ldr	r2, [r3, #28]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	0159      	lsls	r1, r3, #5
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	440b      	add	r3, r1
 80066d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066de:	1ad2      	subs	r2, r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d114      	bne.n	8006714 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d109      	bne.n	8006706 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80066fc:	461a      	mov	r2, r3
 80066fe:	2101      	movs	r1, #1
 8006700:	f003 fd16 	bl	800a130 <USB_EP0_OutStart>
 8006704:	e006      	b.n	8006714 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	691a      	ldr	r2, [r3, #16]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	441a      	add	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	b2db      	uxtb	r3, r3
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f006 fbd0 	bl	800cec0 <HAL_PCD_DataOutStageCallback>
 8006720:	e046      	b.n	80067b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	4a26      	ldr	r2, [pc, #152]	; (80067c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d124      	bne.n	8006774 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00a      	beq.n	800674a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006740:	461a      	mov	r2, r3
 8006742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006746:	6093      	str	r3, [r2, #8]
 8006748:	e032      	b.n	80067b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f003 0320 	and.w	r3, r3, #32
 8006750:	2b00      	cmp	r3, #0
 8006752:	d008      	beq.n	8006766 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006760:	461a      	mov	r2, r3
 8006762:	2320      	movs	r3, #32
 8006764:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f006 fba7 	bl	800cec0 <HAL_PCD_DataOutStageCallback>
 8006772:	e01d      	b.n	80067b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d114      	bne.n	80067a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	4613      	mov	r3, r2
 8006780:	00db      	lsls	r3, r3, #3
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	440b      	add	r3, r1
 8006788:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d108      	bne.n	80067a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6818      	ldr	r0, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800679c:	461a      	mov	r2, r3
 800679e:	2100      	movs	r1, #0
 80067a0:	f003 fcc6 	bl	800a130 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f006 fb88 	bl	800cec0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3720      	adds	r7, #32
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	4f54300a 	.word	0x4f54300a
 80067c0:	4f54310a 	.word	0x4f54310a

080067c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	333c      	adds	r3, #60	; 0x3c
 80067dc:	3304      	adds	r3, #4
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	4a15      	ldr	r2, [pc, #84]	; (800684c <PCD_EP_OutSetupPacket_int+0x88>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d90e      	bls.n	8006818 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006800:	2b00      	cmp	r3, #0
 8006802:	d009      	beq.n	8006818 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006810:	461a      	mov	r2, r3
 8006812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006816:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f006 fb3f 	bl	800ce9c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4a0a      	ldr	r2, [pc, #40]	; (800684c <PCD_EP_OutSetupPacket_int+0x88>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d90c      	bls.n	8006840 <PCD_EP_OutSetupPacket_int+0x7c>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d108      	bne.n	8006840 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006838:	461a      	mov	r2, r3
 800683a:	2101      	movs	r1, #1
 800683c:	f003 fc78 	bl	800a130 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	4f54300a 	.word	0x4f54300a

08006850 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	70fb      	strb	r3, [r7, #3]
 800685c:	4613      	mov	r3, r2
 800685e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006868:	78fb      	ldrb	r3, [r7, #3]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d107      	bne.n	800687e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800686e:	883b      	ldrh	r3, [r7, #0]
 8006870:	0419      	lsls	r1, r3, #16
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	430a      	orrs	r2, r1
 800687a:	629a      	str	r2, [r3, #40]	; 0x28
 800687c:	e028      	b.n	80068d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006884:	0c1b      	lsrs	r3, r3, #16
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	4413      	add	r3, r2
 800688a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800688c:	2300      	movs	r3, #0
 800688e:	73fb      	strb	r3, [r7, #15]
 8006890:	e00d      	b.n	80068ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	3340      	adds	r3, #64	; 0x40
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	0c1b      	lsrs	r3, r3, #16
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	4413      	add	r3, r2
 80068a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
 80068aa:	3301      	adds	r3, #1
 80068ac:	73fb      	strb	r3, [r7, #15]
 80068ae:	7bfa      	ldrb	r2, [r7, #15]
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	3b01      	subs	r3, #1
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d3ec      	bcc.n	8006892 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80068b8:	883b      	ldrh	r3, [r7, #0]
 80068ba:	0418      	lsls	r0, r3, #16
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6819      	ldr	r1, [r3, #0]
 80068c0:	78fb      	ldrb	r3, [r7, #3]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	4302      	orrs	r2, r0
 80068c8:	3340      	adds	r3, #64	; 0x40
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	440b      	add	r3, r1
 80068ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80068de:	b480      	push	{r7}
 80068e0:	b083      	sub	sp, #12
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	460b      	mov	r3, r1
 80068e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	887a      	ldrh	r2, [r7, #2]
 80068f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e267      	b.n	8006dfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d075      	beq.n	8006a22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006936:	4b88      	ldr	r3, [pc, #544]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f003 030c 	and.w	r3, r3, #12
 800693e:	2b04      	cmp	r3, #4
 8006940:	d00c      	beq.n	800695c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006942:	4b85      	ldr	r3, [pc, #532]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800694a:	2b08      	cmp	r3, #8
 800694c:	d112      	bne.n	8006974 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800694e:	4b82      	ldr	r3, [pc, #520]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800695a:	d10b      	bne.n	8006974 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800695c:	4b7e      	ldr	r3, [pc, #504]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d05b      	beq.n	8006a20 <HAL_RCC_OscConfig+0x108>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d157      	bne.n	8006a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e242      	b.n	8006dfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800697c:	d106      	bne.n	800698c <HAL_RCC_OscConfig+0x74>
 800697e:	4b76      	ldr	r3, [pc, #472]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a75      	ldr	r2, [pc, #468]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 8006984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	e01d      	b.n	80069c8 <HAL_RCC_OscConfig+0xb0>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006994:	d10c      	bne.n	80069b0 <HAL_RCC_OscConfig+0x98>
 8006996:	4b70      	ldr	r3, [pc, #448]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a6f      	ldr	r2, [pc, #444]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 800699c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069a0:	6013      	str	r3, [r2, #0]
 80069a2:	4b6d      	ldr	r3, [pc, #436]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a6c      	ldr	r2, [pc, #432]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 80069a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	e00b      	b.n	80069c8 <HAL_RCC_OscConfig+0xb0>
 80069b0:	4b69      	ldr	r3, [pc, #420]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a68      	ldr	r2, [pc, #416]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 80069b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	4b66      	ldr	r3, [pc, #408]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a65      	ldr	r2, [pc, #404]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 80069c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d013      	beq.n	80069f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069d0:	f7fb fec6 	bl	8002760 <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069d8:	f7fb fec2 	bl	8002760 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b64      	cmp	r3, #100	; 0x64
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e207      	b.n	8006dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ea:	4b5b      	ldr	r3, [pc, #364]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0f0      	beq.n	80069d8 <HAL_RCC_OscConfig+0xc0>
 80069f6:	e014      	b.n	8006a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069f8:	f7fb feb2 	bl	8002760 <HAL_GetTick>
 80069fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a00:	f7fb feae 	bl	8002760 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b64      	cmp	r3, #100	; 0x64
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e1f3      	b.n	8006dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a12:	4b51      	ldr	r3, [pc, #324]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1f0      	bne.n	8006a00 <HAL_RCC_OscConfig+0xe8>
 8006a1e:	e000      	b.n	8006a22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d063      	beq.n	8006af6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a2e:	4b4a      	ldr	r3, [pc, #296]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 030c 	and.w	r3, r3, #12
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00b      	beq.n	8006a52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a3a:	4b47      	ldr	r3, [pc, #284]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a42:	2b08      	cmp	r3, #8
 8006a44:	d11c      	bne.n	8006a80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a46:	4b44      	ldr	r3, [pc, #272]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d116      	bne.n	8006a80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a52:	4b41      	ldr	r3, [pc, #260]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d005      	beq.n	8006a6a <HAL_RCC_OscConfig+0x152>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d001      	beq.n	8006a6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e1c7      	b.n	8006dfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a6a:	4b3b      	ldr	r3, [pc, #236]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	4937      	ldr	r1, [pc, #220]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a7e:	e03a      	b.n	8006af6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d020      	beq.n	8006aca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a88:	4b34      	ldr	r3, [pc, #208]	; (8006b5c <HAL_RCC_OscConfig+0x244>)
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a8e:	f7fb fe67 	bl	8002760 <HAL_GetTick>
 8006a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a94:	e008      	b.n	8006aa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a96:	f7fb fe63 	bl	8002760 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e1a8      	b.n	8006dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aa8:	4b2b      	ldr	r3, [pc, #172]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0f0      	beq.n	8006a96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ab4:	4b28      	ldr	r3, [pc, #160]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	00db      	lsls	r3, r3, #3
 8006ac2:	4925      	ldr	r1, [pc, #148]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	600b      	str	r3, [r1, #0]
 8006ac8:	e015      	b.n	8006af6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006aca:	4b24      	ldr	r3, [pc, #144]	; (8006b5c <HAL_RCC_OscConfig+0x244>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad0:	f7fb fe46 	bl	8002760 <HAL_GetTick>
 8006ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ad8:	f7fb fe42 	bl	8002760 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e187      	b.n	8006dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aea:	4b1b      	ldr	r3, [pc, #108]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1f0      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0308 	and.w	r3, r3, #8
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d036      	beq.n	8006b70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d016      	beq.n	8006b38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b0a:	4b15      	ldr	r3, [pc, #84]	; (8006b60 <HAL_RCC_OscConfig+0x248>)
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b10:	f7fb fe26 	bl	8002760 <HAL_GetTick>
 8006b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b18:	f7fb fe22 	bl	8002760 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e167      	b.n	8006dfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b2a:	4b0b      	ldr	r3, [pc, #44]	; (8006b58 <HAL_RCC_OscConfig+0x240>)
 8006b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0f0      	beq.n	8006b18 <HAL_RCC_OscConfig+0x200>
 8006b36:	e01b      	b.n	8006b70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b38:	4b09      	ldr	r3, [pc, #36]	; (8006b60 <HAL_RCC_OscConfig+0x248>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b3e:	f7fb fe0f 	bl	8002760 <HAL_GetTick>
 8006b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b44:	e00e      	b.n	8006b64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b46:	f7fb fe0b 	bl	8002760 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d907      	bls.n	8006b64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e150      	b.n	8006dfa <HAL_RCC_OscConfig+0x4e2>
 8006b58:	40023800 	.word	0x40023800
 8006b5c:	42470000 	.word	0x42470000
 8006b60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b64:	4b88      	ldr	r3, [pc, #544]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1ea      	bne.n	8006b46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 8097 	beq.w	8006cac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b82:	4b81      	ldr	r3, [pc, #516]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10f      	bne.n	8006bae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60bb      	str	r3, [r7, #8]
 8006b92:	4b7d      	ldr	r3, [pc, #500]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	4a7c      	ldr	r2, [pc, #496]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b9e:	4b7a      	ldr	r3, [pc, #488]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ba6:	60bb      	str	r3, [r7, #8]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006baa:	2301      	movs	r3, #1
 8006bac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bae:	4b77      	ldr	r3, [pc, #476]	; (8006d8c <HAL_RCC_OscConfig+0x474>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d118      	bne.n	8006bec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bba:	4b74      	ldr	r3, [pc, #464]	; (8006d8c <HAL_RCC_OscConfig+0x474>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a73      	ldr	r2, [pc, #460]	; (8006d8c <HAL_RCC_OscConfig+0x474>)
 8006bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bc6:	f7fb fdcb 	bl	8002760 <HAL_GetTick>
 8006bca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bcc:	e008      	b.n	8006be0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bce:	f7fb fdc7 	bl	8002760 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e10c      	b.n	8006dfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006be0:	4b6a      	ldr	r3, [pc, #424]	; (8006d8c <HAL_RCC_OscConfig+0x474>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0f0      	beq.n	8006bce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d106      	bne.n	8006c02 <HAL_RCC_OscConfig+0x2ea>
 8006bf4:	4b64      	ldr	r3, [pc, #400]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf8:	4a63      	ldr	r2, [pc, #396]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006bfa:	f043 0301 	orr.w	r3, r3, #1
 8006bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8006c00:	e01c      	b.n	8006c3c <HAL_RCC_OscConfig+0x324>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	2b05      	cmp	r3, #5
 8006c08:	d10c      	bne.n	8006c24 <HAL_RCC_OscConfig+0x30c>
 8006c0a:	4b5f      	ldr	r3, [pc, #380]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0e:	4a5e      	ldr	r2, [pc, #376]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006c10:	f043 0304 	orr.w	r3, r3, #4
 8006c14:	6713      	str	r3, [r2, #112]	; 0x70
 8006c16:	4b5c      	ldr	r3, [pc, #368]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1a:	4a5b      	ldr	r2, [pc, #364]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006c1c:	f043 0301 	orr.w	r3, r3, #1
 8006c20:	6713      	str	r3, [r2, #112]	; 0x70
 8006c22:	e00b      	b.n	8006c3c <HAL_RCC_OscConfig+0x324>
 8006c24:	4b58      	ldr	r3, [pc, #352]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c28:	4a57      	ldr	r2, [pc, #348]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006c2a:	f023 0301 	bic.w	r3, r3, #1
 8006c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c30:	4b55      	ldr	r3, [pc, #340]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c34:	4a54      	ldr	r2, [pc, #336]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006c36:	f023 0304 	bic.w	r3, r3, #4
 8006c3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d015      	beq.n	8006c70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c44:	f7fb fd8c 	bl	8002760 <HAL_GetTick>
 8006c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c4a:	e00a      	b.n	8006c62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c4c:	f7fb fd88 	bl	8002760 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e0cb      	b.n	8006dfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c62:	4b49      	ldr	r3, [pc, #292]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0ee      	beq.n	8006c4c <HAL_RCC_OscConfig+0x334>
 8006c6e:	e014      	b.n	8006c9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c70:	f7fb fd76 	bl	8002760 <HAL_GetTick>
 8006c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c76:	e00a      	b.n	8006c8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c78:	f7fb fd72 	bl	8002760 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e0b5      	b.n	8006dfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c8e:	4b3e      	ldr	r3, [pc, #248]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1ee      	bne.n	8006c78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d105      	bne.n	8006cac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ca0:	4b39      	ldr	r3, [pc, #228]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca4:	4a38      	ldr	r2, [pc, #224]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006caa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 80a1 	beq.w	8006df8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006cb6:	4b34      	ldr	r3, [pc, #208]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 030c 	and.w	r3, r3, #12
 8006cbe:	2b08      	cmp	r3, #8
 8006cc0:	d05c      	beq.n	8006d7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d141      	bne.n	8006d4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cca:	4b31      	ldr	r3, [pc, #196]	; (8006d90 <HAL_RCC_OscConfig+0x478>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd0:	f7fb fd46 	bl	8002760 <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cd8:	f7fb fd42 	bl	8002760 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e087      	b.n	8006dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cea:	4b27      	ldr	r3, [pc, #156]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1f0      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69da      	ldr	r2, [r3, #28]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	019b      	lsls	r3, r3, #6
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0c:	085b      	lsrs	r3, r3, #1
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	041b      	lsls	r3, r3, #16
 8006d12:	431a      	orrs	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	061b      	lsls	r3, r3, #24
 8006d1a:	491b      	ldr	r1, [pc, #108]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d20:	4b1b      	ldr	r3, [pc, #108]	; (8006d90 <HAL_RCC_OscConfig+0x478>)
 8006d22:	2201      	movs	r2, #1
 8006d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d26:	f7fb fd1b 	bl	8002760 <HAL_GetTick>
 8006d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d2c:	e008      	b.n	8006d40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d2e:	f7fb fd17 	bl	8002760 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d901      	bls.n	8006d40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e05c      	b.n	8006dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d40:	4b11      	ldr	r3, [pc, #68]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d0f0      	beq.n	8006d2e <HAL_RCC_OscConfig+0x416>
 8006d4c:	e054      	b.n	8006df8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d4e:	4b10      	ldr	r3, [pc, #64]	; (8006d90 <HAL_RCC_OscConfig+0x478>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d54:	f7fb fd04 	bl	8002760 <HAL_GetTick>
 8006d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d5a:	e008      	b.n	8006d6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d5c:	f7fb fd00 	bl	8002760 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e045      	b.n	8006dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d6e:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <HAL_RCC_OscConfig+0x470>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1f0      	bne.n	8006d5c <HAL_RCC_OscConfig+0x444>
 8006d7a:	e03d      	b.n	8006df8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d107      	bne.n	8006d94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e038      	b.n	8006dfa <HAL_RCC_OscConfig+0x4e2>
 8006d88:	40023800 	.word	0x40023800
 8006d8c:	40007000 	.word	0x40007000
 8006d90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d94:	4b1b      	ldr	r3, [pc, #108]	; (8006e04 <HAL_RCC_OscConfig+0x4ec>)
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d028      	beq.n	8006df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d121      	bne.n	8006df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d11a      	bne.n	8006df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006dca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d111      	bne.n	8006df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dda:	085b      	lsrs	r3, r3, #1
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d107      	bne.n	8006df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d001      	beq.n	8006df8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e000      	b.n	8006dfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	40023800 	.word	0x40023800

08006e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e0cc      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e1c:	4b68      	ldr	r3, [pc, #416]	; (8006fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0307 	and.w	r3, r3, #7
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d90c      	bls.n	8006e44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e2a:	4b65      	ldr	r3, [pc, #404]	; (8006fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	b2d2      	uxtb	r2, r2
 8006e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e32:	4b63      	ldr	r3, [pc, #396]	; (8006fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d001      	beq.n	8006e44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e0b8      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d020      	beq.n	8006e92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d005      	beq.n	8006e68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e5c:	4b59      	ldr	r3, [pc, #356]	; (8006fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	4a58      	ldr	r2, [pc, #352]	; (8006fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0308 	and.w	r3, r3, #8
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d005      	beq.n	8006e80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e74:	4b53      	ldr	r3, [pc, #332]	; (8006fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	4a52      	ldr	r2, [pc, #328]	; (8006fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e80:	4b50      	ldr	r3, [pc, #320]	; (8006fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	494d      	ldr	r1, [pc, #308]	; (8006fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d044      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d107      	bne.n	8006eb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ea6:	4b47      	ldr	r3, [pc, #284]	; (8006fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d119      	bne.n	8006ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e07f      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d003      	beq.n	8006ec6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d107      	bne.n	8006ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ec6:	4b3f      	ldr	r3, [pc, #252]	; (8006fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d109      	bne.n	8006ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e06f      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ed6:	4b3b      	ldr	r3, [pc, #236]	; (8006fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e067      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ee6:	4b37      	ldr	r3, [pc, #220]	; (8006fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f023 0203 	bic.w	r2, r3, #3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	4934      	ldr	r1, [pc, #208]	; (8006fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ef8:	f7fb fc32 	bl	8002760 <HAL_GetTick>
 8006efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006efe:	e00a      	b.n	8006f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f00:	f7fb fc2e 	bl	8002760 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e04f      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f16:	4b2b      	ldr	r3, [pc, #172]	; (8006fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f003 020c 	and.w	r2, r3, #12
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d1eb      	bne.n	8006f00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f28:	4b25      	ldr	r3, [pc, #148]	; (8006fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d20c      	bcs.n	8006f50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f36:	4b22      	ldr	r3, [pc, #136]	; (8006fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	b2d2      	uxtb	r2, r2
 8006f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f3e:	4b20      	ldr	r3, [pc, #128]	; (8006fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d001      	beq.n	8006f50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e032      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d008      	beq.n	8006f6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f5c:	4b19      	ldr	r3, [pc, #100]	; (8006fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	4916      	ldr	r1, [pc, #88]	; (8006fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d009      	beq.n	8006f8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f7a:	4b12      	ldr	r3, [pc, #72]	; (8006fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	00db      	lsls	r3, r3, #3
 8006f88:	490e      	ldr	r1, [pc, #56]	; (8006fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f8e:	f000 f821 	bl	8006fd4 <HAL_RCC_GetSysClockFreq>
 8006f92:	4602      	mov	r2, r0
 8006f94:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	091b      	lsrs	r3, r3, #4
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	490a      	ldr	r1, [pc, #40]	; (8006fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006fa0:	5ccb      	ldrb	r3, [r1, r3]
 8006fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa6:	4a09      	ldr	r2, [pc, #36]	; (8006fcc <HAL_RCC_ClockConfig+0x1c4>)
 8006fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006faa:	4b09      	ldr	r3, [pc, #36]	; (8006fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fb fb92 	bl	80026d8 <HAL_InitTick>

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	40023c00 	.word	0x40023c00
 8006fc4:	40023800 	.word	0x40023800
 8006fc8:	0800d520 	.word	0x0800d520
 8006fcc:	20000008 	.word	0x20000008
 8006fd0:	2000000c 	.word	0x2000000c

08006fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fd8:	b094      	sub	sp, #80	; 0x50
 8006fda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	647b      	str	r3, [r7, #68]	; 0x44
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fec:	4b79      	ldr	r3, [pc, #484]	; (80071d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f003 030c 	and.w	r3, r3, #12
 8006ff4:	2b08      	cmp	r3, #8
 8006ff6:	d00d      	beq.n	8007014 <HAL_RCC_GetSysClockFreq+0x40>
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	f200 80e1 	bhi.w	80071c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d002      	beq.n	8007008 <HAL_RCC_GetSysClockFreq+0x34>
 8007002:	2b04      	cmp	r3, #4
 8007004:	d003      	beq.n	800700e <HAL_RCC_GetSysClockFreq+0x3a>
 8007006:	e0db      	b.n	80071c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007008:	4b73      	ldr	r3, [pc, #460]	; (80071d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800700a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800700c:	e0db      	b.n	80071c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800700e:	4b73      	ldr	r3, [pc, #460]	; (80071dc <HAL_RCC_GetSysClockFreq+0x208>)
 8007010:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007012:	e0d8      	b.n	80071c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007014:	4b6f      	ldr	r3, [pc, #444]	; (80071d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800701c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800701e:	4b6d      	ldr	r3, [pc, #436]	; (80071d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d063      	beq.n	80070f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800702a:	4b6a      	ldr	r3, [pc, #424]	; (80071d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	099b      	lsrs	r3, r3, #6
 8007030:	2200      	movs	r2, #0
 8007032:	63bb      	str	r3, [r7, #56]	; 0x38
 8007034:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703c:	633b      	str	r3, [r7, #48]	; 0x30
 800703e:	2300      	movs	r3, #0
 8007040:	637b      	str	r3, [r7, #52]	; 0x34
 8007042:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007046:	4622      	mov	r2, r4
 8007048:	462b      	mov	r3, r5
 800704a:	f04f 0000 	mov.w	r0, #0
 800704e:	f04f 0100 	mov.w	r1, #0
 8007052:	0159      	lsls	r1, r3, #5
 8007054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007058:	0150      	lsls	r0, r2, #5
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4621      	mov	r1, r4
 8007060:	1a51      	subs	r1, r2, r1
 8007062:	6139      	str	r1, [r7, #16]
 8007064:	4629      	mov	r1, r5
 8007066:	eb63 0301 	sbc.w	r3, r3, r1
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	f04f 0200 	mov.w	r2, #0
 8007070:	f04f 0300 	mov.w	r3, #0
 8007074:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007078:	4659      	mov	r1, fp
 800707a:	018b      	lsls	r3, r1, #6
 800707c:	4651      	mov	r1, sl
 800707e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007082:	4651      	mov	r1, sl
 8007084:	018a      	lsls	r2, r1, #6
 8007086:	4651      	mov	r1, sl
 8007088:	ebb2 0801 	subs.w	r8, r2, r1
 800708c:	4659      	mov	r1, fp
 800708e:	eb63 0901 	sbc.w	r9, r3, r1
 8007092:	f04f 0200 	mov.w	r2, #0
 8007096:	f04f 0300 	mov.w	r3, #0
 800709a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800709e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070a6:	4690      	mov	r8, r2
 80070a8:	4699      	mov	r9, r3
 80070aa:	4623      	mov	r3, r4
 80070ac:	eb18 0303 	adds.w	r3, r8, r3
 80070b0:	60bb      	str	r3, [r7, #8]
 80070b2:	462b      	mov	r3, r5
 80070b4:	eb49 0303 	adc.w	r3, r9, r3
 80070b8:	60fb      	str	r3, [r7, #12]
 80070ba:	f04f 0200 	mov.w	r2, #0
 80070be:	f04f 0300 	mov.w	r3, #0
 80070c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80070c6:	4629      	mov	r1, r5
 80070c8:	024b      	lsls	r3, r1, #9
 80070ca:	4621      	mov	r1, r4
 80070cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80070d0:	4621      	mov	r1, r4
 80070d2:	024a      	lsls	r2, r1, #9
 80070d4:	4610      	mov	r0, r2
 80070d6:	4619      	mov	r1, r3
 80070d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070da:	2200      	movs	r2, #0
 80070dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80070de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070e4:	f7f9 f870 	bl	80001c8 <__aeabi_uldivmod>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4613      	mov	r3, r2
 80070ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070f0:	e058      	b.n	80071a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070f2:	4b38      	ldr	r3, [pc, #224]	; (80071d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	099b      	lsrs	r3, r3, #6
 80070f8:	2200      	movs	r2, #0
 80070fa:	4618      	mov	r0, r3
 80070fc:	4611      	mov	r1, r2
 80070fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007102:	623b      	str	r3, [r7, #32]
 8007104:	2300      	movs	r3, #0
 8007106:	627b      	str	r3, [r7, #36]	; 0x24
 8007108:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800710c:	4642      	mov	r2, r8
 800710e:	464b      	mov	r3, r9
 8007110:	f04f 0000 	mov.w	r0, #0
 8007114:	f04f 0100 	mov.w	r1, #0
 8007118:	0159      	lsls	r1, r3, #5
 800711a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800711e:	0150      	lsls	r0, r2, #5
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	4641      	mov	r1, r8
 8007126:	ebb2 0a01 	subs.w	sl, r2, r1
 800712a:	4649      	mov	r1, r9
 800712c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007130:	f04f 0200 	mov.w	r2, #0
 8007134:	f04f 0300 	mov.w	r3, #0
 8007138:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800713c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007140:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007144:	ebb2 040a 	subs.w	r4, r2, sl
 8007148:	eb63 050b 	sbc.w	r5, r3, fp
 800714c:	f04f 0200 	mov.w	r2, #0
 8007150:	f04f 0300 	mov.w	r3, #0
 8007154:	00eb      	lsls	r3, r5, #3
 8007156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800715a:	00e2      	lsls	r2, r4, #3
 800715c:	4614      	mov	r4, r2
 800715e:	461d      	mov	r5, r3
 8007160:	4643      	mov	r3, r8
 8007162:	18e3      	adds	r3, r4, r3
 8007164:	603b      	str	r3, [r7, #0]
 8007166:	464b      	mov	r3, r9
 8007168:	eb45 0303 	adc.w	r3, r5, r3
 800716c:	607b      	str	r3, [r7, #4]
 800716e:	f04f 0200 	mov.w	r2, #0
 8007172:	f04f 0300 	mov.w	r3, #0
 8007176:	e9d7 4500 	ldrd	r4, r5, [r7]
 800717a:	4629      	mov	r1, r5
 800717c:	028b      	lsls	r3, r1, #10
 800717e:	4621      	mov	r1, r4
 8007180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007184:	4621      	mov	r1, r4
 8007186:	028a      	lsls	r2, r1, #10
 8007188:	4610      	mov	r0, r2
 800718a:	4619      	mov	r1, r3
 800718c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800718e:	2200      	movs	r2, #0
 8007190:	61bb      	str	r3, [r7, #24]
 8007192:	61fa      	str	r2, [r7, #28]
 8007194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007198:	f7f9 f816 	bl	80001c8 <__aeabi_uldivmod>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4613      	mov	r3, r2
 80071a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071a4:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	0c1b      	lsrs	r3, r3, #16
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	3301      	adds	r3, #1
 80071b0:	005b      	lsls	r3, r3, #1
 80071b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80071b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80071be:	e002      	b.n	80071c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071c0:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80071c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80071c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3750      	adds	r7, #80	; 0x50
 80071cc:	46bd      	mov	sp, r7
 80071ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071d2:	bf00      	nop
 80071d4:	40023800 	.word	0x40023800
 80071d8:	00f42400 	.word	0x00f42400
 80071dc:	007a1200 	.word	0x007a1200

080071e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071e0:	b480      	push	{r7}
 80071e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071e4:	4b03      	ldr	r3, [pc, #12]	; (80071f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80071e6:	681b      	ldr	r3, [r3, #0]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	20000008 	.word	0x20000008

080071f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80071fc:	f7ff fff0 	bl	80071e0 <HAL_RCC_GetHCLKFreq>
 8007200:	4602      	mov	r2, r0
 8007202:	4b05      	ldr	r3, [pc, #20]	; (8007218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	0a9b      	lsrs	r3, r3, #10
 8007208:	f003 0307 	and.w	r3, r3, #7
 800720c:	4903      	ldr	r1, [pc, #12]	; (800721c <HAL_RCC_GetPCLK1Freq+0x24>)
 800720e:	5ccb      	ldrb	r3, [r1, r3]
 8007210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007214:	4618      	mov	r0, r3
 8007216:	bd80      	pop	{r7, pc}
 8007218:	40023800 	.word	0x40023800
 800721c:	0800d530 	.word	0x0800d530

08007220 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d105      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007244:	2b00      	cmp	r3, #0
 8007246:	d035      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007248:	4b62      	ldr	r3, [pc, #392]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800724a:	2200      	movs	r2, #0
 800724c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800724e:	f7fb fa87 	bl	8002760 <HAL_GetTick>
 8007252:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007254:	e008      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007256:	f7fb fa83 	bl	8002760 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d901      	bls.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e0b0      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007268:	4b5b      	ldr	r3, [pc, #364]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1f0      	bne.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	019a      	lsls	r2, r3, #6
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	071b      	lsls	r3, r3, #28
 8007280:	4955      	ldr	r1, [pc, #340]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007282:	4313      	orrs	r3, r2
 8007284:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007288:	4b52      	ldr	r3, [pc, #328]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800728a:	2201      	movs	r2, #1
 800728c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800728e:	f7fb fa67 	bl	8002760 <HAL_GetTick>
 8007292:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007294:	e008      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007296:	f7fb fa63 	bl	8002760 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d901      	bls.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e090      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072a8:	4b4b      	ldr	r3, [pc, #300]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d0f0      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 8083 	beq.w	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80072c2:	2300      	movs	r3, #0
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	4b44      	ldr	r3, [pc, #272]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	4a43      	ldr	r2, [pc, #268]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072d0:	6413      	str	r3, [r2, #64]	; 0x40
 80072d2:	4b41      	ldr	r3, [pc, #260]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80072de:	4b3f      	ldr	r3, [pc, #252]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a3e      	ldr	r2, [pc, #248]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072ea:	f7fb fa39 	bl	8002760 <HAL_GetTick>
 80072ee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80072f0:	e008      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80072f2:	f7fb fa35 	bl	8002760 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d901      	bls.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e062      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007304:	4b35      	ldr	r3, [pc, #212]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0f0      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007310:	4b31      	ldr	r3, [pc, #196]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007318:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d02f      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	429a      	cmp	r2, r3
 800732c:	d028      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800732e:	4b2a      	ldr	r3, [pc, #168]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007336:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007338:	4b29      	ldr	r3, [pc, #164]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800733a:	2201      	movs	r2, #1
 800733c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800733e:	4b28      	ldr	r3, [pc, #160]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007344:	4a24      	ldr	r2, [pc, #144]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800734a:	4b23      	ldr	r3, [pc, #140]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800734c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b01      	cmp	r3, #1
 8007354:	d114      	bne.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007356:	f7fb fa03 	bl	8002760 <HAL_GetTick>
 800735a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800735c:	e00a      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800735e:	f7fb f9ff 	bl	8002760 <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	f241 3288 	movw	r2, #5000	; 0x1388
 800736c:	4293      	cmp	r3, r2
 800736e:	d901      	bls.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e02a      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007374:	4b18      	ldr	r3, [pc, #96]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0ee      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007388:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800738c:	d10d      	bne.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800738e:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800739e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073a2:	490d      	ldr	r1, [pc, #52]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	608b      	str	r3, [r1, #8]
 80073a8:	e005      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80073aa:	4b0b      	ldr	r3, [pc, #44]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	4a0a      	ldr	r2, [pc, #40]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073b0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80073b4:	6093      	str	r3, [r2, #8]
 80073b6:	4b08      	ldr	r3, [pc, #32]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073c2:	4905      	ldr	r1, [pc, #20]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	42470068 	.word	0x42470068
 80073d8:	40023800 	.word	0x40023800
 80073dc:	40007000 	.word	0x40007000
 80073e0:	42470e40 	.word	0x42470e40

080073e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e066      	b.n	80074c8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	7f5b      	ldrb	r3, [r3, #29]
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d105      	bne.n	8007410 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7fa ff3a 	bl	8002284 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	22ca      	movs	r2, #202	; 0xca
 800741c:	625a      	str	r2, [r3, #36]	; 0x24
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2253      	movs	r2, #83	; 0x53
 8007424:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fa45 	bl	80078b6 <RTC_EnterInitMode>
 800742c:	4603      	mov	r3, r0
 800742e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d12c      	bne.n	8007490 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	6812      	ldr	r2, [r2, #0]
 8007440:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007448:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6899      	ldr	r1, [r3, #8]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	431a      	orrs	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	68d2      	ldr	r2, [r2, #12]
 8007470:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6919      	ldr	r1, [r3, #16]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	041a      	lsls	r2, r3, #16
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	430a      	orrs	r2, r1
 8007484:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fa4c 	bl	8007924 <RTC_ExitInitMode>
 800748c:	4603      	mov	r3, r0
 800748e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007490:	7bfb      	ldrb	r3, [r7, #15]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d113      	bne.n	80074be <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80074a4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	699a      	ldr	r2, [r3, #24]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	22ff      	movs	r2, #255	; 0xff
 80074c4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80074d0:	b590      	push	{r4, r7, lr}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	7f1b      	ldrb	r3, [r3, #28]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d101      	bne.n	80074ec <HAL_RTC_SetTime+0x1c>
 80074e8:	2302      	movs	r3, #2
 80074ea:	e087      	b.n	80075fc <HAL_RTC_SetTime+0x12c>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2201      	movs	r2, #1
 80074f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2202      	movs	r2, #2
 80074f6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d126      	bne.n	800754c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007508:	2b00      	cmp	r3, #0
 800750a:	d102      	bne.n	8007512 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2200      	movs	r2, #0
 8007510:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fa29 	bl	800796e <RTC_ByteToBcd2>
 800751c:	4603      	mov	r3, r0
 800751e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	785b      	ldrb	r3, [r3, #1]
 8007524:	4618      	mov	r0, r3
 8007526:	f000 fa22 	bl	800796e <RTC_ByteToBcd2>
 800752a:	4603      	mov	r3, r0
 800752c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800752e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	789b      	ldrb	r3, [r3, #2]
 8007534:	4618      	mov	r0, r3
 8007536:	f000 fa1a 	bl	800796e <RTC_ByteToBcd2>
 800753a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800753c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	78db      	ldrb	r3, [r3, #3]
 8007544:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007546:	4313      	orrs	r3, r2
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	e018      	b.n	800757e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007556:	2b00      	cmp	r3, #0
 8007558:	d102      	bne.n	8007560 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	2200      	movs	r2, #0
 800755e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	785b      	ldrb	r3, [r3, #1]
 800756a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800756c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007572:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	78db      	ldrb	r3, [r3, #3]
 8007578:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800757a:	4313      	orrs	r3, r2
 800757c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	22ca      	movs	r2, #202	; 0xca
 8007584:	625a      	str	r2, [r3, #36]	; 0x24
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2253      	movs	r2, #83	; 0x53
 800758c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 f991 	bl	80078b6 <RTC_EnterInitMode>
 8007594:	4603      	mov	r3, r0
 8007596:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007598:	7cfb      	ldrb	r3, [r7, #19]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d120      	bne.n	80075e0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80075a8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80075ac:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80075bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6899      	ldr	r1, [r3, #8]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	68da      	ldr	r2, [r3, #12]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	431a      	orrs	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 f9a4 	bl	8007924 <RTC_ExitInitMode>
 80075dc:	4603      	mov	r3, r0
 80075de:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80075e0:	7cfb      	ldrb	r3, [r7, #19]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d102      	bne.n	80075ec <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2201      	movs	r2, #1
 80075ea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	22ff      	movs	r2, #255	; 0xff
 80075f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	771a      	strb	r2, [r3, #28]

  return status;
 80075fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	371c      	adds	r7, #28
 8007600:	46bd      	mov	sp, r7
 8007602:	bd90      	pop	{r4, r7, pc}

08007604 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007636:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800763a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	0c1b      	lsrs	r3, r3, #16
 8007640:	b2db      	uxtb	r3, r3
 8007642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007646:	b2da      	uxtb	r2, r3
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	0a1b      	lsrs	r3, r3, #8
 8007650:	b2db      	uxtb	r3, r3
 8007652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007656:	b2da      	uxtb	r2, r3
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	b2db      	uxtb	r3, r3
 8007660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007664:	b2da      	uxtb	r2, r3
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	0d9b      	lsrs	r3, r3, #22
 800766e:	b2db      	uxtb	r3, r3
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	b2da      	uxtb	r2, r3
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d11a      	bne.n	80076b6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	4618      	mov	r0, r3
 8007686:	f000 f98f 	bl	80079a8 <RTC_Bcd2ToByte>
 800768a:	4603      	mov	r3, r0
 800768c:	461a      	mov	r2, r3
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	785b      	ldrb	r3, [r3, #1]
 8007696:	4618      	mov	r0, r3
 8007698:	f000 f986 	bl	80079a8 <RTC_Bcd2ToByte>
 800769c:	4603      	mov	r3, r0
 800769e:	461a      	mov	r2, r3
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	789b      	ldrb	r3, [r3, #2]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 f97d 	bl	80079a8 <RTC_Bcd2ToByte>
 80076ae:	4603      	mov	r3, r0
 80076b0:	461a      	mov	r2, r3
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80076c0:	b590      	push	{r4, r7, lr}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	7f1b      	ldrb	r3, [r3, #28]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_RTC_SetDate+0x1c>
 80076d8:	2302      	movs	r3, #2
 80076da:	e071      	b.n	80077c0 <HAL_RTC_SetDate+0x100>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2201      	movs	r2, #1
 80076e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2202      	movs	r2, #2
 80076e6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10e      	bne.n	800770c <HAL_RTC_SetDate+0x4c>
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	785b      	ldrb	r3, [r3, #1]
 80076f2:	f003 0310 	and.w	r3, r3, #16
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d008      	beq.n	800770c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	785b      	ldrb	r3, [r3, #1]
 80076fe:	f023 0310 	bic.w	r3, r3, #16
 8007702:	b2db      	uxtb	r3, r3
 8007704:	330a      	adds	r3, #10
 8007706:	b2da      	uxtb	r2, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d11c      	bne.n	800774c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	78db      	ldrb	r3, [r3, #3]
 8007716:	4618      	mov	r0, r3
 8007718:	f000 f929 	bl	800796e <RTC_ByteToBcd2>
 800771c:	4603      	mov	r3, r0
 800771e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	785b      	ldrb	r3, [r3, #1]
 8007724:	4618      	mov	r0, r3
 8007726:	f000 f922 	bl	800796e <RTC_ByteToBcd2>
 800772a:	4603      	mov	r3, r0
 800772c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800772e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	789b      	ldrb	r3, [r3, #2]
 8007734:	4618      	mov	r0, r3
 8007736:	f000 f91a 	bl	800796e <RTC_ByteToBcd2>
 800773a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800773c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007746:	4313      	orrs	r3, r2
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	e00e      	b.n	800776a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	78db      	ldrb	r3, [r3, #3]
 8007750:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	785b      	ldrb	r3, [r3, #1]
 8007756:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007758:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800775e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007766:	4313      	orrs	r3, r2
 8007768:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	22ca      	movs	r2, #202	; 0xca
 8007770:	625a      	str	r2, [r3, #36]	; 0x24
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2253      	movs	r2, #83	; 0x53
 8007778:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 f89b 	bl	80078b6 <RTC_EnterInitMode>
 8007780:	4603      	mov	r3, r0
 8007782:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007784:	7cfb      	ldrb	r3, [r7, #19]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10c      	bne.n	80077a4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007794:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007798:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 f8c2 	bl	8007924 <RTC_ExitInitMode>
 80077a0:	4603      	mov	r3, r0
 80077a2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80077a4:	7cfb      	ldrb	r3, [r7, #19]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	22ff      	movs	r2, #255	; 0xff
 80077b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	771a      	strb	r2, [r3, #28]

  return status;
 80077be:	7cfb      	ldrb	r3, [r7, #19]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	371c      	adds	r7, #28
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd90      	pop	{r4, r7, pc}

080077c8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80077e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80077e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	0c1b      	lsrs	r3, r3, #16
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	0a1b      	lsrs	r3, r3, #8
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	f003 031f 	and.w	r3, r3, #31
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	b2db      	uxtb	r3, r3
 8007806:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800780a:	b2da      	uxtb	r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	0b5b      	lsrs	r3, r3, #13
 8007814:	b2db      	uxtb	r3, r3
 8007816:	f003 0307 	and.w	r3, r3, #7
 800781a:	b2da      	uxtb	r2, r3
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d11a      	bne.n	800785c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	78db      	ldrb	r3, [r3, #3]
 800782a:	4618      	mov	r0, r3
 800782c:	f000 f8bc 	bl	80079a8 <RTC_Bcd2ToByte>
 8007830:	4603      	mov	r3, r0
 8007832:	461a      	mov	r2, r3
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	785b      	ldrb	r3, [r3, #1]
 800783c:	4618      	mov	r0, r3
 800783e:	f000 f8b3 	bl	80079a8 <RTC_Bcd2ToByte>
 8007842:	4603      	mov	r3, r0
 8007844:	461a      	mov	r2, r3
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	789b      	ldrb	r3, [r3, #2]
 800784e:	4618      	mov	r0, r3
 8007850:	f000 f8aa 	bl	80079a8 <RTC_Bcd2ToByte>
 8007854:	4603      	mov	r3, r0
 8007856:	461a      	mov	r2, r3
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800786e:	2300      	movs	r3, #0
 8007870:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007880:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007882:	f7fa ff6d 	bl	8002760 <HAL_GetTick>
 8007886:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007888:	e009      	b.n	800789e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800788a:	f7fa ff69 	bl	8002760 <HAL_GetTick>
 800788e:	4602      	mov	r2, r0
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007898:	d901      	bls.n	800789e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e007      	b.n	80078ae <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d0ee      	beq.n	800788a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078be:	2300      	movs	r3, #0
 80078c0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d122      	bne.n	800791a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68da      	ldr	r2, [r3, #12]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80078e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078e4:	f7fa ff3c 	bl	8002760 <HAL_GetTick>
 80078e8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80078ea:	e00c      	b.n	8007906 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80078ec:	f7fa ff38 	bl	8002760 <HAL_GetTick>
 80078f0:	4602      	mov	r2, r0
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078fa:	d904      	bls.n	8007906 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2204      	movs	r2, #4
 8007900:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007910:	2b00      	cmp	r3, #0
 8007912:	d102      	bne.n	800791a <RTC_EnterInitMode+0x64>
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d1e8      	bne.n	80078ec <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800791a:	7bfb      	ldrb	r3, [r7, #15]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68da      	ldr	r2, [r3, #12]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800793e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f003 0320 	and.w	r3, r3, #32
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10a      	bne.n	8007964 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff ff89 	bl	8007866 <HAL_RTC_WaitForSynchro>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d004      	beq.n	8007964 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2204      	movs	r2, #4
 800795e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007964:	7bfb      	ldrb	r3, [r7, #15]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800796e:	b480      	push	{r7}
 8007970:	b085      	sub	sp, #20
 8007972:	af00      	add	r7, sp, #0
 8007974:	4603      	mov	r3, r0
 8007976:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007978:	2300      	movs	r3, #0
 800797a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800797c:	e005      	b.n	800798a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	3301      	adds	r3, #1
 8007982:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	3b0a      	subs	r3, #10
 8007988:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800798a:	79fb      	ldrb	r3, [r7, #7]
 800798c:	2b09      	cmp	r3, #9
 800798e:	d8f6      	bhi.n	800797e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	011b      	lsls	r3, r3, #4
 8007994:	b2da      	uxtb	r2, r3
 8007996:	79fb      	ldrb	r3, [r7, #7]
 8007998:	4313      	orrs	r3, r2
 800799a:	b2db      	uxtb	r3, r3
}
 800799c:	4618      	mov	r0, r3
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80079b6:	79fb      	ldrb	r3, [r7, #7]
 80079b8:	091b      	lsrs	r3, r3, #4
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	461a      	mov	r2, r3
 80079be:	0092      	lsls	r2, r2, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	f003 030f 	and.w	r3, r3, #15
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	4413      	add	r3, r2
 80079d2:	b2db      	uxtb	r3, r3
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e041      	b.n	8007a76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d106      	bne.n	8007a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7fa fc66 	bl	80022d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	4610      	mov	r0, r2
 8007a20:	f000 fb6c 	bl	80080fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b082      	sub	sp, #8
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e041      	b.n	8007b14 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d106      	bne.n	8007aaa <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f839 	bl	8007b1c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2202      	movs	r2, #2
 8007aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3304      	adds	r3, #4
 8007aba:	4619      	mov	r1, r3
 8007abc:	4610      	mov	r0, r2
 8007abe:	f000 fb1d 	bl	80080fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d101      	bne.n	8007b44 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e041      	b.n	8007bc8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d106      	bne.n	8007b5e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f839 	bl	8007bd0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2202      	movs	r2, #2
 8007b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	4619      	mov	r1, r3
 8007b70:	4610      	mov	r0, r2
 8007b72:	f000 fac3 	bl	80080fc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 0208 	bic.w	r2, r2, #8
 8007b84:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	6819      	ldr	r1, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d122      	bne.n	8007c40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	f003 0302 	and.w	r3, r3, #2
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d11b      	bne.n	8007c40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f06f 0202 	mvn.w	r2, #2
 8007c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	f003 0303 	and.w	r3, r3, #3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d003      	beq.n	8007c2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fa49 	bl	80080be <HAL_TIM_IC_CaptureCallback>
 8007c2c:	e005      	b.n	8007c3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7f8 ffe6 	bl	8000c00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fa4c 	bl	80080d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	f003 0304 	and.w	r3, r3, #4
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d122      	bne.n	8007c94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	f003 0304 	and.w	r3, r3, #4
 8007c58:	2b04      	cmp	r3, #4
 8007c5a:	d11b      	bne.n	8007c94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f06f 0204 	mvn.w	r2, #4
 8007c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2202      	movs	r2, #2
 8007c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fa1f 	bl	80080be <HAL_TIM_IC_CaptureCallback>
 8007c80:	e005      	b.n	8007c8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7f8 ffbc 	bl	8000c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fa22 	bl	80080d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	f003 0308 	and.w	r3, r3, #8
 8007c9e:	2b08      	cmp	r3, #8
 8007ca0:	d122      	bne.n	8007ce8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f003 0308 	and.w	r3, r3, #8
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	d11b      	bne.n	8007ce8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f06f 0208 	mvn.w	r2, #8
 8007cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2204      	movs	r2, #4
 8007cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	f003 0303 	and.w	r3, r3, #3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f9f5 	bl	80080be <HAL_TIM_IC_CaptureCallback>
 8007cd4:	e005      	b.n	8007ce2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7f8 ff92 	bl	8000c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f9f8 	bl	80080d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	f003 0310 	and.w	r3, r3, #16
 8007cf2:	2b10      	cmp	r3, #16
 8007cf4:	d122      	bne.n	8007d3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f003 0310 	and.w	r3, r3, #16
 8007d00:	2b10      	cmp	r3, #16
 8007d02:	d11b      	bne.n	8007d3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f06f 0210 	mvn.w	r2, #16
 8007d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2208      	movs	r2, #8
 8007d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	69db      	ldr	r3, [r3, #28]
 8007d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f9cb 	bl	80080be <HAL_TIM_IC_CaptureCallback>
 8007d28:	e005      	b.n	8007d36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7f8 ff68 	bl	8000c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f9ce 	bl	80080d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d10e      	bne.n	8007d68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d107      	bne.n	8007d68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f06f 0201 	mvn.w	r2, #1
 8007d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7f8 ffbe 	bl	8000ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d72:	2b80      	cmp	r3, #128	; 0x80
 8007d74:	d10e      	bne.n	8007d94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d80:	2b80      	cmp	r3, #128	; 0x80
 8007d82:	d107      	bne.n	8007d94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fe08 	bl	80089a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9e:	2b40      	cmp	r3, #64	; 0x40
 8007da0:	d10e      	bne.n	8007dc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dac:	2b40      	cmp	r3, #64	; 0x40
 8007dae:	d107      	bne.n	8007dc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f993 	bl	80080e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	f003 0320 	and.w	r3, r3, #32
 8007dca:	2b20      	cmp	r3, #32
 8007dcc:	d10e      	bne.n	8007dec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	f003 0320 	and.w	r3, r3, #32
 8007dd8:	2b20      	cmp	r3, #32
 8007dda:	d107      	bne.n	8007dec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f06f 0220 	mvn.w	r2, #32
 8007de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fdd2 	bl	8008990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dec:	bf00      	nop
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d101      	bne.n	8007e12 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007e0e:	2302      	movs	r3, #2
 8007e10:	e048      	b.n	8007ea4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b0c      	cmp	r3, #12
 8007e1e:	d839      	bhi.n	8007e94 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007e20:	a201      	add	r2, pc, #4	; (adr r2, 8007e28 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e26:	bf00      	nop
 8007e28:	08007e5d 	.word	0x08007e5d
 8007e2c:	08007e95 	.word	0x08007e95
 8007e30:	08007e95 	.word	0x08007e95
 8007e34:	08007e95 	.word	0x08007e95
 8007e38:	08007e6b 	.word	0x08007e6b
 8007e3c:	08007e95 	.word	0x08007e95
 8007e40:	08007e95 	.word	0x08007e95
 8007e44:	08007e95 	.word	0x08007e95
 8007e48:	08007e79 	.word	0x08007e79
 8007e4c:	08007e95 	.word	0x08007e95
 8007e50:	08007e95 	.word	0x08007e95
 8007e54:	08007e95 	.word	0x08007e95
 8007e58:	08007e87 	.word	0x08007e87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68b9      	ldr	r1, [r7, #8]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 f9ea 	bl	800823c <TIM_OC1_SetConfig>
      break;
 8007e68:	e017      	b.n	8007e9a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68b9      	ldr	r1, [r7, #8]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 fa53 	bl	800831c <TIM_OC2_SetConfig>
      break;
 8007e76:	e010      	b.n	8007e9a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68b9      	ldr	r1, [r7, #8]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 fac2 	bl	8008408 <TIM_OC3_SetConfig>
      break;
 8007e84:	e009      	b.n	8007e9a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68b9      	ldr	r1, [r7, #8]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fb2f 	bl	80084f0 <TIM_OC4_SetConfig>
      break;
 8007e92:	e002      	b.n	8007e9a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	75fb      	strb	r3, [r7, #23]
      break;
 8007e98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d101      	bne.n	8007ec8 <HAL_TIM_ConfigClockSource+0x1c>
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e0b4      	b.n	8008032 <HAL_TIM_ConfigClockSource+0x186>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f00:	d03e      	beq.n	8007f80 <HAL_TIM_ConfigClockSource+0xd4>
 8007f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f06:	f200 8087 	bhi.w	8008018 <HAL_TIM_ConfigClockSource+0x16c>
 8007f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f0e:	f000 8086 	beq.w	800801e <HAL_TIM_ConfigClockSource+0x172>
 8007f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f16:	d87f      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x16c>
 8007f18:	2b70      	cmp	r3, #112	; 0x70
 8007f1a:	d01a      	beq.n	8007f52 <HAL_TIM_ConfigClockSource+0xa6>
 8007f1c:	2b70      	cmp	r3, #112	; 0x70
 8007f1e:	d87b      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x16c>
 8007f20:	2b60      	cmp	r3, #96	; 0x60
 8007f22:	d050      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x11a>
 8007f24:	2b60      	cmp	r3, #96	; 0x60
 8007f26:	d877      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x16c>
 8007f28:	2b50      	cmp	r3, #80	; 0x50
 8007f2a:	d03c      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0xfa>
 8007f2c:	2b50      	cmp	r3, #80	; 0x50
 8007f2e:	d873      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x16c>
 8007f30:	2b40      	cmp	r3, #64	; 0x40
 8007f32:	d058      	beq.n	8007fe6 <HAL_TIM_ConfigClockSource+0x13a>
 8007f34:	2b40      	cmp	r3, #64	; 0x40
 8007f36:	d86f      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x16c>
 8007f38:	2b30      	cmp	r3, #48	; 0x30
 8007f3a:	d064      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x15a>
 8007f3c:	2b30      	cmp	r3, #48	; 0x30
 8007f3e:	d86b      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x16c>
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	d060      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x15a>
 8007f44:	2b20      	cmp	r3, #32
 8007f46:	d867      	bhi.n	8008018 <HAL_TIM_ConfigClockSource+0x16c>
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d05c      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x15a>
 8007f4c:	2b10      	cmp	r3, #16
 8007f4e:	d05a      	beq.n	8008006 <HAL_TIM_ConfigClockSource+0x15a>
 8007f50:	e062      	b.n	8008018 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6818      	ldr	r0, [r3, #0]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	6899      	ldr	r1, [r3, #8]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f000 fc26 	bl	80087b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	609a      	str	r2, [r3, #8]
      break;
 8007f7e:	e04f      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6818      	ldr	r0, [r3, #0]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	6899      	ldr	r1, [r3, #8]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f000 fc0f 	bl	80087b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	689a      	ldr	r2, [r3, #8]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fa2:	609a      	str	r2, [r3, #8]
      break;
 8007fa4:	e03c      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	6859      	ldr	r1, [r3, #4]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f000 fb83 	bl	80086be <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2150      	movs	r1, #80	; 0x50
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 fbdc 	bl	800877c <TIM_ITRx_SetConfig>
      break;
 8007fc4:	e02c      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6818      	ldr	r0, [r3, #0]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	6859      	ldr	r1, [r3, #4]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f000 fba2 	bl	800871c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2160      	movs	r1, #96	; 0x60
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 fbcc 	bl	800877c <TIM_ITRx_SetConfig>
      break;
 8007fe4:	e01c      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6818      	ldr	r0, [r3, #0]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	6859      	ldr	r1, [r3, #4]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	f000 fb63 	bl	80086be <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2140      	movs	r1, #64	; 0x40
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 fbbc 	bl	800877c <TIM_ITRx_SetConfig>
      break;
 8008004:	e00c      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4619      	mov	r1, r3
 8008010:	4610      	mov	r0, r2
 8008012:	f000 fbb3 	bl	800877c <TIM_ITRx_SetConfig>
      break;
 8008016:	e003      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	73fb      	strb	r3, [r7, #15]
      break;
 800801c:	e000      	b.n	8008020 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800801e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b082      	sub	sp, #8
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800804a:	2b01      	cmp	r3, #1
 800804c:	d101      	bne.n	8008052 <HAL_TIM_SlaveConfigSynchro+0x18>
 800804e:	2302      	movs	r3, #2
 8008050:	e031      	b.n	80080b6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2202      	movs	r2, #2
 800805e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fa99 	bl	800859c <TIM_SlaveTimer_SetConfig>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d009      	beq.n	8008084 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e018      	b.n	80080b6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68da      	ldr	r2, [r3, #12]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008092:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68da      	ldr	r2, [r3, #12]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80080a2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080be:	b480      	push	{r7}
 80080c0:	b083      	sub	sp, #12
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080da:	bf00      	nop
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b083      	sub	sp, #12
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
	...

080080fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a40      	ldr	r2, [pc, #256]	; (8008210 <TIM_Base_SetConfig+0x114>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d013      	beq.n	800813c <TIM_Base_SetConfig+0x40>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800811a:	d00f      	beq.n	800813c <TIM_Base_SetConfig+0x40>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a3d      	ldr	r2, [pc, #244]	; (8008214 <TIM_Base_SetConfig+0x118>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d00b      	beq.n	800813c <TIM_Base_SetConfig+0x40>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a3c      	ldr	r2, [pc, #240]	; (8008218 <TIM_Base_SetConfig+0x11c>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d007      	beq.n	800813c <TIM_Base_SetConfig+0x40>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a3b      	ldr	r2, [pc, #236]	; (800821c <TIM_Base_SetConfig+0x120>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d003      	beq.n	800813c <TIM_Base_SetConfig+0x40>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a3a      	ldr	r2, [pc, #232]	; (8008220 <TIM_Base_SetConfig+0x124>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d108      	bne.n	800814e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	4313      	orrs	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a2f      	ldr	r2, [pc, #188]	; (8008210 <TIM_Base_SetConfig+0x114>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d02b      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800815c:	d027      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a2c      	ldr	r2, [pc, #176]	; (8008214 <TIM_Base_SetConfig+0x118>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d023      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a2b      	ldr	r2, [pc, #172]	; (8008218 <TIM_Base_SetConfig+0x11c>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d01f      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a2a      	ldr	r2, [pc, #168]	; (800821c <TIM_Base_SetConfig+0x120>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d01b      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a29      	ldr	r2, [pc, #164]	; (8008220 <TIM_Base_SetConfig+0x124>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d017      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a28      	ldr	r2, [pc, #160]	; (8008224 <TIM_Base_SetConfig+0x128>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d013      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a27      	ldr	r2, [pc, #156]	; (8008228 <TIM_Base_SetConfig+0x12c>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d00f      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a26      	ldr	r2, [pc, #152]	; (800822c <TIM_Base_SetConfig+0x130>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00b      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a25      	ldr	r2, [pc, #148]	; (8008230 <TIM_Base_SetConfig+0x134>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d007      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a24      	ldr	r2, [pc, #144]	; (8008234 <TIM_Base_SetConfig+0x138>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d003      	beq.n	80081ae <TIM_Base_SetConfig+0xb2>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a23      	ldr	r2, [pc, #140]	; (8008238 <TIM_Base_SetConfig+0x13c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d108      	bne.n	80081c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	689a      	ldr	r2, [r3, #8]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a0a      	ldr	r2, [pc, #40]	; (8008210 <TIM_Base_SetConfig+0x114>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d003      	beq.n	80081f4 <TIM_Base_SetConfig+0xf8>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a0c      	ldr	r2, [pc, #48]	; (8008220 <TIM_Base_SetConfig+0x124>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d103      	bne.n	80081fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	691a      	ldr	r2, [r3, #16]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	615a      	str	r2, [r3, #20]
}
 8008202:	bf00      	nop
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	40010000 	.word	0x40010000
 8008214:	40000400 	.word	0x40000400
 8008218:	40000800 	.word	0x40000800
 800821c:	40000c00 	.word	0x40000c00
 8008220:	40010400 	.word	0x40010400
 8008224:	40014000 	.word	0x40014000
 8008228:	40014400 	.word	0x40014400
 800822c:	40014800 	.word	0x40014800
 8008230:	40001800 	.word	0x40001800
 8008234:	40001c00 	.word	0x40001c00
 8008238:	40002000 	.word	0x40002000

0800823c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800823c:	b480      	push	{r7}
 800823e:	b087      	sub	sp, #28
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	f023 0201 	bic.w	r2, r3, #1
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f023 0303 	bic.w	r3, r3, #3
 8008272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	4313      	orrs	r3, r2
 800827c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f023 0302 	bic.w	r3, r3, #2
 8008284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	4313      	orrs	r3, r2
 800828e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a20      	ldr	r2, [pc, #128]	; (8008314 <TIM_OC1_SetConfig+0xd8>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d003      	beq.n	80082a0 <TIM_OC1_SetConfig+0x64>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a1f      	ldr	r2, [pc, #124]	; (8008318 <TIM_OC1_SetConfig+0xdc>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d10c      	bne.n	80082ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f023 0308 	bic.w	r3, r3, #8
 80082a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f023 0304 	bic.w	r3, r3, #4
 80082b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a15      	ldr	r2, [pc, #84]	; (8008314 <TIM_OC1_SetConfig+0xd8>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d003      	beq.n	80082ca <TIM_OC1_SetConfig+0x8e>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a14      	ldr	r2, [pc, #80]	; (8008318 <TIM_OC1_SetConfig+0xdc>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d111      	bne.n	80082ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	621a      	str	r2, [r3, #32]
}
 8008308:	bf00      	nop
 800830a:	371c      	adds	r7, #28
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	40010000 	.word	0x40010000
 8008318:	40010400 	.word	0x40010400

0800831c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800831c:	b480      	push	{r7}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	f023 0210 	bic.w	r2, r3, #16
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800834a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	021b      	lsls	r3, r3, #8
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	4313      	orrs	r3, r2
 800835e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f023 0320 	bic.w	r3, r3, #32
 8008366:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	011b      	lsls	r3, r3, #4
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	4313      	orrs	r3, r2
 8008372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a22      	ldr	r2, [pc, #136]	; (8008400 <TIM_OC2_SetConfig+0xe4>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d003      	beq.n	8008384 <TIM_OC2_SetConfig+0x68>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a21      	ldr	r2, [pc, #132]	; (8008404 <TIM_OC2_SetConfig+0xe8>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d10d      	bne.n	80083a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800838a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	011b      	lsls	r3, r3, #4
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	4313      	orrs	r3, r2
 8008396:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800839e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a17      	ldr	r2, [pc, #92]	; (8008400 <TIM_OC2_SetConfig+0xe4>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d003      	beq.n	80083b0 <TIM_OC2_SetConfig+0x94>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a16      	ldr	r2, [pc, #88]	; (8008404 <TIM_OC2_SetConfig+0xe8>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d113      	bne.n	80083d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	695b      	ldr	r3, [r3, #20]
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	621a      	str	r2, [r3, #32]
}
 80083f2:	bf00      	nop
 80083f4:	371c      	adds	r7, #28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	40010000 	.word	0x40010000
 8008404:	40010400 	.word	0x40010400

08008408 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a1b      	ldr	r3, [r3, #32]
 8008416:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f023 0303 	bic.w	r3, r3, #3
 800843e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	4313      	orrs	r3, r2
 8008448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	021b      	lsls	r3, r3, #8
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	4313      	orrs	r3, r2
 800845c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a21      	ldr	r2, [pc, #132]	; (80084e8 <TIM_OC3_SetConfig+0xe0>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d003      	beq.n	800846e <TIM_OC3_SetConfig+0x66>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a20      	ldr	r2, [pc, #128]	; (80084ec <TIM_OC3_SetConfig+0xe4>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d10d      	bne.n	800848a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	021b      	lsls	r3, r3, #8
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	4313      	orrs	r3, r2
 8008480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a16      	ldr	r2, [pc, #88]	; (80084e8 <TIM_OC3_SetConfig+0xe0>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d003      	beq.n	800849a <TIM_OC3_SetConfig+0x92>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a15      	ldr	r2, [pc, #84]	; (80084ec <TIM_OC3_SetConfig+0xe4>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d113      	bne.n	80084c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	011b      	lsls	r3, r3, #4
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	011b      	lsls	r3, r3, #4
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	4313      	orrs	r3, r2
 80084c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	621a      	str	r2, [r3, #32]
}
 80084dc:	bf00      	nop
 80084de:	371c      	adds	r7, #28
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	40010000 	.word	0x40010000
 80084ec:	40010400 	.word	0x40010400

080084f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800851e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	021b      	lsls	r3, r3, #8
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	4313      	orrs	r3, r2
 8008532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800853a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	031b      	lsls	r3, r3, #12
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	4313      	orrs	r3, r2
 8008546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a12      	ldr	r2, [pc, #72]	; (8008594 <TIM_OC4_SetConfig+0xa4>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d003      	beq.n	8008558 <TIM_OC4_SetConfig+0x68>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a11      	ldr	r2, [pc, #68]	; (8008598 <TIM_OC4_SetConfig+0xa8>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d109      	bne.n	800856c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800855e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	695b      	ldr	r3, [r3, #20]
 8008564:	019b      	lsls	r3, r3, #6
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	4313      	orrs	r3, r2
 800856a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	693a      	ldr	r2, [r7, #16]
 8008584:	621a      	str	r2, [r3, #32]
}
 8008586:	bf00      	nop
 8008588:	371c      	adds	r7, #28
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	40010000 	.word	0x40010000
 8008598:	40010400 	.word	0x40010400

0800859c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	693a      	ldr	r2, [r7, #16]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	f023 0307 	bic.w	r3, r3, #7
 80085ca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	2b70      	cmp	r3, #112	; 0x70
 80085e4:	d01a      	beq.n	800861c <TIM_SlaveTimer_SetConfig+0x80>
 80085e6:	2b70      	cmp	r3, #112	; 0x70
 80085e8:	d860      	bhi.n	80086ac <TIM_SlaveTimer_SetConfig+0x110>
 80085ea:	2b60      	cmp	r3, #96	; 0x60
 80085ec:	d054      	beq.n	8008698 <TIM_SlaveTimer_SetConfig+0xfc>
 80085ee:	2b60      	cmp	r3, #96	; 0x60
 80085f0:	d85c      	bhi.n	80086ac <TIM_SlaveTimer_SetConfig+0x110>
 80085f2:	2b50      	cmp	r3, #80	; 0x50
 80085f4:	d046      	beq.n	8008684 <TIM_SlaveTimer_SetConfig+0xe8>
 80085f6:	2b50      	cmp	r3, #80	; 0x50
 80085f8:	d858      	bhi.n	80086ac <TIM_SlaveTimer_SetConfig+0x110>
 80085fa:	2b40      	cmp	r3, #64	; 0x40
 80085fc:	d019      	beq.n	8008632 <TIM_SlaveTimer_SetConfig+0x96>
 80085fe:	2b40      	cmp	r3, #64	; 0x40
 8008600:	d854      	bhi.n	80086ac <TIM_SlaveTimer_SetConfig+0x110>
 8008602:	2b30      	cmp	r3, #48	; 0x30
 8008604:	d055      	beq.n	80086b2 <TIM_SlaveTimer_SetConfig+0x116>
 8008606:	2b30      	cmp	r3, #48	; 0x30
 8008608:	d850      	bhi.n	80086ac <TIM_SlaveTimer_SetConfig+0x110>
 800860a:	2b20      	cmp	r3, #32
 800860c:	d051      	beq.n	80086b2 <TIM_SlaveTimer_SetConfig+0x116>
 800860e:	2b20      	cmp	r3, #32
 8008610:	d84c      	bhi.n	80086ac <TIM_SlaveTimer_SetConfig+0x110>
 8008612:	2b00      	cmp	r3, #0
 8008614:	d04d      	beq.n	80086b2 <TIM_SlaveTimer_SetConfig+0x116>
 8008616:	2b10      	cmp	r3, #16
 8008618:	d04b      	beq.n	80086b2 <TIM_SlaveTimer_SetConfig+0x116>
 800861a:	e047      	b.n	80086ac <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6818      	ldr	r0, [r3, #0]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	68d9      	ldr	r1, [r3, #12]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	689a      	ldr	r2, [r3, #8]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	f000 f8c1 	bl	80087b2 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8008630:	e040      	b.n	80086b4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b05      	cmp	r3, #5
 8008638:	d101      	bne.n	800863e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e03b      	b.n	80086b6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6a1a      	ldr	r2, [r3, #32]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f022 0201 	bic.w	r2, r2, #1
 8008654:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008664:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	011b      	lsls	r3, r3, #4
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	4313      	orrs	r3, r2
 8008670:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	621a      	str	r2, [r3, #32]
      break;
 8008682:	e017      	b.n	80086b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6818      	ldr	r0, [r3, #0]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	6899      	ldr	r1, [r3, #8]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	461a      	mov	r2, r3
 8008692:	f000 f814 	bl	80086be <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008696:	e00d      	b.n	80086b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6818      	ldr	r0, [r3, #0]
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	6899      	ldr	r1, [r3, #8]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	461a      	mov	r2, r3
 80086a6:	f000 f839 	bl	800871c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80086aa:	e003      	b.n	80086b4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	75fb      	strb	r3, [r7, #23]
      break;
 80086b0:	e000      	b.n	80086b4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80086b2:	bf00      	nop
  }

  return status;
 80086b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3718      	adds	r7, #24
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086be:	b480      	push	{r7}
 80086c0:	b087      	sub	sp, #28
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6a1b      	ldr	r3, [r3, #32]
 80086ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	f023 0201 	bic.w	r2, r3, #1
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	011b      	lsls	r3, r3, #4
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f023 030a 	bic.w	r3, r3, #10
 80086fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	4313      	orrs	r3, r2
 8008702:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	621a      	str	r2, [r3, #32]
}
 8008710:	bf00      	nop
 8008712:	371c      	adds	r7, #28
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6a1b      	ldr	r3, [r3, #32]
 800872c:	f023 0210 	bic.w	r2, r3, #16
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008746:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	031b      	lsls	r3, r3, #12
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	4313      	orrs	r3, r2
 8008750:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008758:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	011b      	lsls	r3, r3, #4
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	4313      	orrs	r3, r2
 8008762:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	697a      	ldr	r2, [r7, #20]
 8008768:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	621a      	str	r2, [r3, #32]
}
 8008770:	bf00      	nop
 8008772:	371c      	adds	r7, #28
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008792:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008794:	683a      	ldr	r2, [r7, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	4313      	orrs	r3, r2
 800879a:	f043 0307 	orr.w	r3, r3, #7
 800879e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	609a      	str	r2, [r3, #8]
}
 80087a6:	bf00      	nop
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b087      	sub	sp, #28
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	607a      	str	r2, [r7, #4]
 80087be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	021a      	lsls	r2, r3, #8
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	431a      	orrs	r2, r3
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	4313      	orrs	r3, r2
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	4313      	orrs	r3, r2
 80087de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	609a      	str	r2, [r3, #8]
}
 80087e6:	bf00      	nop
 80087e8:	371c      	adds	r7, #28
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
	...

080087f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008804:	2b01      	cmp	r3, #1
 8008806:	d101      	bne.n	800880c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008808:	2302      	movs	r3, #2
 800880a:	e05a      	b.n	80088c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2202      	movs	r2, #2
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	4313      	orrs	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a21      	ldr	r2, [pc, #132]	; (80088d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d022      	beq.n	8008896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008858:	d01d      	beq.n	8008896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a1d      	ldr	r2, [pc, #116]	; (80088d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d018      	beq.n	8008896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a1b      	ldr	r2, [pc, #108]	; (80088d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d013      	beq.n	8008896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a1a      	ldr	r2, [pc, #104]	; (80088dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d00e      	beq.n	8008896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a18      	ldr	r2, [pc, #96]	; (80088e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d009      	beq.n	8008896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a17      	ldr	r2, [pc, #92]	; (80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d004      	beq.n	8008896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a15      	ldr	r2, [pc, #84]	; (80088e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d10c      	bne.n	80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800889c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3714      	adds	r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	40010000 	.word	0x40010000
 80088d4:	40000400 	.word	0x40000400
 80088d8:	40000800 	.word	0x40000800
 80088dc:	40000c00 	.word	0x40000c00
 80088e0:	40010400 	.word	0x40010400
 80088e4:	40014000 	.word	0x40014000
 80088e8:	40001800 	.word	0x40001800

080088ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80088f6:	2300      	movs	r3, #0
 80088f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008900:	2b01      	cmp	r3, #1
 8008902:	d101      	bne.n	8008908 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008904:	2302      	movs	r3, #2
 8008906:	e03d      	b.n	8008984 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	4313      	orrs	r3, r2
 800891c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	4313      	orrs	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	4313      	orrs	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4313      	orrs	r3, r2
 8008946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	4313      	orrs	r3, r2
 8008954:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	4313      	orrs	r3, r2
 8008962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	69db      	ldr	r3, [r3, #28]
 800896e:	4313      	orrs	r3, r2
 8008970:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089ac:	bf00      	nop
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089b8:	b084      	sub	sp, #16
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	f107 001c 	add.w	r0, r7, #28
 80089c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d122      	bne.n	8008a16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80089e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80089f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d105      	bne.n	8008a0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f001 fbee 	bl	800a1ec <USB_CoreReset>
 8008a10:	4603      	mov	r3, r0
 8008a12:	73fb      	strb	r3, [r7, #15]
 8008a14:	e01a      	b.n	8008a4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f001 fbe2 	bl	800a1ec <USB_CoreReset>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d106      	bne.n	8008a40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	639a      	str	r2, [r3, #56]	; 0x38
 8008a3e:	e005      	b.n	8008a4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d10b      	bne.n	8008a6a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f043 0206 	orr.w	r2, r3, #6
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	f043 0220 	orr.w	r2, r3, #32
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a76:	b004      	add	sp, #16
 8008a78:	4770      	bx	lr
	...

08008a7c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b087      	sub	sp, #28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	4613      	mov	r3, r2
 8008a88:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008a8a:	79fb      	ldrb	r3, [r7, #7]
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d165      	bne.n	8008b5c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	4a41      	ldr	r2, [pc, #260]	; (8008b98 <USB_SetTurnaroundTime+0x11c>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d906      	bls.n	8008aa6 <USB_SetTurnaroundTime+0x2a>
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	4a40      	ldr	r2, [pc, #256]	; (8008b9c <USB_SetTurnaroundTime+0x120>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d202      	bcs.n	8008aa6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008aa0:	230f      	movs	r3, #15
 8008aa2:	617b      	str	r3, [r7, #20]
 8008aa4:	e062      	b.n	8008b6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	4a3c      	ldr	r2, [pc, #240]	; (8008b9c <USB_SetTurnaroundTime+0x120>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d306      	bcc.n	8008abc <USB_SetTurnaroundTime+0x40>
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	4a3b      	ldr	r2, [pc, #236]	; (8008ba0 <USB_SetTurnaroundTime+0x124>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d202      	bcs.n	8008abc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008ab6:	230e      	movs	r3, #14
 8008ab8:	617b      	str	r3, [r7, #20]
 8008aba:	e057      	b.n	8008b6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	4a38      	ldr	r2, [pc, #224]	; (8008ba0 <USB_SetTurnaroundTime+0x124>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d306      	bcc.n	8008ad2 <USB_SetTurnaroundTime+0x56>
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	4a37      	ldr	r2, [pc, #220]	; (8008ba4 <USB_SetTurnaroundTime+0x128>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d202      	bcs.n	8008ad2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008acc:	230d      	movs	r3, #13
 8008ace:	617b      	str	r3, [r7, #20]
 8008ad0:	e04c      	b.n	8008b6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	4a33      	ldr	r2, [pc, #204]	; (8008ba4 <USB_SetTurnaroundTime+0x128>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d306      	bcc.n	8008ae8 <USB_SetTurnaroundTime+0x6c>
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	4a32      	ldr	r2, [pc, #200]	; (8008ba8 <USB_SetTurnaroundTime+0x12c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d802      	bhi.n	8008ae8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008ae2:	230c      	movs	r3, #12
 8008ae4:	617b      	str	r3, [r7, #20]
 8008ae6:	e041      	b.n	8008b6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	4a2f      	ldr	r2, [pc, #188]	; (8008ba8 <USB_SetTurnaroundTime+0x12c>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d906      	bls.n	8008afe <USB_SetTurnaroundTime+0x82>
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	4a2e      	ldr	r2, [pc, #184]	; (8008bac <USB_SetTurnaroundTime+0x130>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d802      	bhi.n	8008afe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008af8:	230b      	movs	r3, #11
 8008afa:	617b      	str	r3, [r7, #20]
 8008afc:	e036      	b.n	8008b6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	4a2a      	ldr	r2, [pc, #168]	; (8008bac <USB_SetTurnaroundTime+0x130>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d906      	bls.n	8008b14 <USB_SetTurnaroundTime+0x98>
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	4a29      	ldr	r2, [pc, #164]	; (8008bb0 <USB_SetTurnaroundTime+0x134>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d802      	bhi.n	8008b14 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b0e:	230a      	movs	r3, #10
 8008b10:	617b      	str	r3, [r7, #20]
 8008b12:	e02b      	b.n	8008b6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	4a26      	ldr	r2, [pc, #152]	; (8008bb0 <USB_SetTurnaroundTime+0x134>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d906      	bls.n	8008b2a <USB_SetTurnaroundTime+0xae>
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	4a25      	ldr	r2, [pc, #148]	; (8008bb4 <USB_SetTurnaroundTime+0x138>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d202      	bcs.n	8008b2a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008b24:	2309      	movs	r3, #9
 8008b26:	617b      	str	r3, [r7, #20]
 8008b28:	e020      	b.n	8008b6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	4a21      	ldr	r2, [pc, #132]	; (8008bb4 <USB_SetTurnaroundTime+0x138>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d306      	bcc.n	8008b40 <USB_SetTurnaroundTime+0xc4>
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	4a20      	ldr	r2, [pc, #128]	; (8008bb8 <USB_SetTurnaroundTime+0x13c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d802      	bhi.n	8008b40 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008b3a:	2308      	movs	r3, #8
 8008b3c:	617b      	str	r3, [r7, #20]
 8008b3e:	e015      	b.n	8008b6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	4a1d      	ldr	r2, [pc, #116]	; (8008bb8 <USB_SetTurnaroundTime+0x13c>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d906      	bls.n	8008b56 <USB_SetTurnaroundTime+0xda>
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	4a1c      	ldr	r2, [pc, #112]	; (8008bbc <USB_SetTurnaroundTime+0x140>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d202      	bcs.n	8008b56 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008b50:	2307      	movs	r3, #7
 8008b52:	617b      	str	r3, [r7, #20]
 8008b54:	e00a      	b.n	8008b6c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008b56:	2306      	movs	r3, #6
 8008b58:	617b      	str	r3, [r7, #20]
 8008b5a:	e007      	b.n	8008b6c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008b5c:	79fb      	ldrb	r3, [r7, #7]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d102      	bne.n	8008b68 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008b62:	2309      	movs	r3, #9
 8008b64:	617b      	str	r3, [r7, #20]
 8008b66:	e001      	b.n	8008b6c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008b68:	2309      	movs	r3, #9
 8008b6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	68da      	ldr	r2, [r3, #12]
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	029b      	lsls	r3, r3, #10
 8008b80:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008b84:	431a      	orrs	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	371c      	adds	r7, #28
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	00d8acbf 	.word	0x00d8acbf
 8008b9c:	00e4e1c0 	.word	0x00e4e1c0
 8008ba0:	00f42400 	.word	0x00f42400
 8008ba4:	01067380 	.word	0x01067380
 8008ba8:	011a499f 	.word	0x011a499f
 8008bac:	01312cff 	.word	0x01312cff
 8008bb0:	014ca43f 	.word	0x014ca43f
 8008bb4:	016e3600 	.word	0x016e3600
 8008bb8:	01a6ab1f 	.word	0x01a6ab1f
 8008bbc:	01e84800 	.word	0x01e84800

08008bc0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f043 0201 	orr.w	r2, r3, #1
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f023 0201 	bic.w	r2, r3, #1
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d115      	bne.n	8008c52 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c32:	2001      	movs	r0, #1
 8008c34:	f7f9 fda0 	bl	8002778 <HAL_Delay>
      ms++;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f001 fa45 	bl	800a0ce <USB_GetMode>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d01e      	beq.n	8008c88 <USB_SetCurrentMode+0x84>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2b31      	cmp	r3, #49	; 0x31
 8008c4e:	d9f0      	bls.n	8008c32 <USB_SetCurrentMode+0x2e>
 8008c50:	e01a      	b.n	8008c88 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c52:	78fb      	ldrb	r3, [r7, #3]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d115      	bne.n	8008c84 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c64:	2001      	movs	r0, #1
 8008c66:	f7f9 fd87 	bl	8002778 <HAL_Delay>
      ms++;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f001 fa2c 	bl	800a0ce <USB_GetMode>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d005      	beq.n	8008c88 <USB_SetCurrentMode+0x84>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b31      	cmp	r3, #49	; 0x31
 8008c80:	d9f0      	bls.n	8008c64 <USB_SetCurrentMode+0x60>
 8008c82:	e001      	b.n	8008c88 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e005      	b.n	8008c94 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2b32      	cmp	r3, #50	; 0x32
 8008c8c:	d101      	bne.n	8008c92 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e000      	b.n	8008c94 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b086      	sub	sp, #24
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	613b      	str	r3, [r7, #16]
 8008cba:	e009      	b.n	8008cd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	3340      	adds	r3, #64	; 0x40
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	613b      	str	r3, [r7, #16]
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	2b0e      	cmp	r3, #14
 8008cd4:	d9f2      	bls.n	8008cbc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d11c      	bne.n	8008d16 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cea:	f043 0302 	orr.w	r3, r3, #2
 8008cee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d00:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	639a      	str	r2, [r3, #56]	; 0x38
 8008d14:	e00b      	b.n	8008d2e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d26:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d34:	461a      	mov	r2, r3
 8008d36:	2300      	movs	r3, #0
 8008d38:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d40:	4619      	mov	r1, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d48:	461a      	mov	r2, r3
 8008d4a:	680b      	ldr	r3, [r1, #0]
 8008d4c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d10c      	bne.n	8008d6e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d104      	bne.n	8008d64 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f965 	bl	800902c <USB_SetDevSpeed>
 8008d62:	e008      	b.n	8008d76 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008d64:	2101      	movs	r1, #1
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f960 	bl	800902c <USB_SetDevSpeed>
 8008d6c:	e003      	b.n	8008d76 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d6e:	2103      	movs	r1, #3
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f95b 	bl	800902c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d76:	2110      	movs	r1, #16
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f8f3 	bl	8008f64 <USB_FlushTxFifo>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f91f 	bl	8008fcc <USB_FlushRxFifo>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d9e:	461a      	mov	r2, r3
 8008da0:	2300      	movs	r3, #0
 8008da2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008daa:	461a      	mov	r2, r3
 8008dac:	2300      	movs	r3, #0
 8008dae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db6:	461a      	mov	r2, r3
 8008db8:	2300      	movs	r3, #0
 8008dba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	613b      	str	r3, [r7, #16]
 8008dc0:	e043      	b.n	8008e4a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dd8:	d118      	bne.n	8008e0c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10a      	bne.n	8008df6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dec:	461a      	mov	r2, r3
 8008dee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008df2:	6013      	str	r3, [r2, #0]
 8008df4:	e013      	b.n	8008e1e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	015a      	lsls	r2, r3, #5
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e02:	461a      	mov	r2, r3
 8008e04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e08:	6013      	str	r3, [r2, #0]
 8008e0a:	e008      	b.n	8008e1e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	015a      	lsls	r2, r3, #5
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	4413      	add	r3, r2
 8008e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e18:	461a      	mov	r2, r3
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	015a      	lsls	r2, r3, #5
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	4413      	add	r3, r2
 8008e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	015a      	lsls	r2, r3, #5
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	4413      	add	r3, r2
 8008e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	3301      	adds	r3, #1
 8008e48:	613b      	str	r3, [r7, #16]
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	693a      	ldr	r2, [r7, #16]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d3b7      	bcc.n	8008dc2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e52:	2300      	movs	r3, #0
 8008e54:	613b      	str	r3, [r7, #16]
 8008e56:	e043      	b.n	8008ee0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e6e:	d118      	bne.n	8008ea2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d10a      	bne.n	8008e8c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e82:	461a      	mov	r2, r3
 8008e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e88:	6013      	str	r3, [r2, #0]
 8008e8a:	e013      	b.n	8008eb4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	015a      	lsls	r2, r3, #5
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4413      	add	r3, r2
 8008e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e98:	461a      	mov	r2, r3
 8008e9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e9e:	6013      	str	r3, [r2, #0]
 8008ea0:	e008      	b.n	8008eb4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	015a      	lsls	r2, r3, #5
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eae:	461a      	mov	r2, r3
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ed8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	3301      	adds	r3, #1
 8008ede:	613b      	str	r3, [r7, #16]
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	693a      	ldr	r2, [r7, #16]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d3b7      	bcc.n	8008e58 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ef6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008efa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d105      	bne.n	8008f1c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	f043 0210 	orr.w	r2, r3, #16
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	699a      	ldr	r2, [r3, #24]
 8008f20:	4b0f      	ldr	r3, [pc, #60]	; (8008f60 <USB_DevInit+0x2c4>)
 8008f22:	4313      	orrs	r3, r2
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d005      	beq.n	8008f3a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	f043 0208 	orr.w	r2, r3, #8
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d107      	bne.n	8008f50 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	699b      	ldr	r3, [r3, #24]
 8008f44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f48:	f043 0304 	orr.w	r3, r3, #4
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3718      	adds	r7, #24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f5c:	b004      	add	sp, #16
 8008f5e:	4770      	bx	lr
 8008f60:	803c3800 	.word	0x803c3800

08008f64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	3301      	adds	r3, #1
 8008f76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	4a13      	ldr	r2, [pc, #76]	; (8008fc8 <USB_FlushTxFifo+0x64>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d901      	bls.n	8008f84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e01b      	b.n	8008fbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	daf2      	bge.n	8008f72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	019b      	lsls	r3, r3, #6
 8008f94:	f043 0220 	orr.w	r2, r3, #32
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	4a08      	ldr	r2, [pc, #32]	; (8008fc8 <USB_FlushTxFifo+0x64>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d901      	bls.n	8008fae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e006      	b.n	8008fbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	f003 0320 	and.w	r3, r3, #32
 8008fb6:	2b20      	cmp	r3, #32
 8008fb8:	d0f0      	beq.n	8008f9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	00030d40 	.word	0x00030d40

08008fcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	4a11      	ldr	r2, [pc, #68]	; (8009028 <USB_FlushRxFifo+0x5c>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d901      	bls.n	8008fea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e018      	b.n	800901c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	daf2      	bge.n	8008fd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2210      	movs	r2, #16
 8008ffa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	3301      	adds	r3, #1
 8009000:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	4a08      	ldr	r2, [pc, #32]	; (8009028 <USB_FlushRxFifo+0x5c>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d901      	bls.n	800900e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e006      	b.n	800901c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	f003 0310 	and.w	r3, r3, #16
 8009016:	2b10      	cmp	r3, #16
 8009018:	d0f0      	beq.n	8008ffc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	00030d40 	.word	0x00030d40

0800902c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	460b      	mov	r3, r1
 8009036:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	78fb      	ldrb	r3, [r7, #3]
 8009046:	68f9      	ldr	r1, [r7, #12]
 8009048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800904c:	4313      	orrs	r3, r2
 800904e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3714      	adds	r7, #20
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800905e:	b480      	push	{r7}
 8009060:	b087      	sub	sp, #28
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	f003 0306 	and.w	r3, r3, #6
 8009076:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d102      	bne.n	8009084 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800907e:	2300      	movs	r3, #0
 8009080:	75fb      	strb	r3, [r7, #23]
 8009082:	e00a      	b.n	800909a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2b02      	cmp	r3, #2
 8009088:	d002      	beq.n	8009090 <USB_GetDevSpeed+0x32>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2b06      	cmp	r3, #6
 800908e:	d102      	bne.n	8009096 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009090:	2302      	movs	r3, #2
 8009092:	75fb      	strb	r3, [r7, #23]
 8009094:	e001      	b.n	800909a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009096:	230f      	movs	r3, #15
 8009098:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800909a:	7dfb      	ldrb	r3, [r7, #23]
}
 800909c:	4618      	mov	r0, r3
 800909e:	371c      	adds	r7, #28
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	785b      	ldrb	r3, [r3, #1]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d13a      	bne.n	800913a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ca:	69da      	ldr	r2, [r3, #28]
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	f003 030f 	and.w	r3, r3, #15
 80090d4:	2101      	movs	r1, #1
 80090d6:	fa01 f303 	lsl.w	r3, r1, r3
 80090da:	b29b      	uxth	r3, r3
 80090dc:	68f9      	ldr	r1, [r7, #12]
 80090de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090e2:	4313      	orrs	r3, r2
 80090e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d155      	bne.n	80091a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	015a      	lsls	r2, r3, #5
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	4413      	add	r3, r2
 8009104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	791b      	ldrb	r3, [r3, #4]
 8009116:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009118:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	059b      	lsls	r3, r3, #22
 800911e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009120:	4313      	orrs	r3, r2
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	0151      	lsls	r1, r2, #5
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	440a      	add	r2, r1
 800912a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800912e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009136:	6013      	str	r3, [r2, #0]
 8009138:	e036      	b.n	80091a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009140:	69da      	ldr	r2, [r3, #28]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	f003 030f 	and.w	r3, r3, #15
 800914a:	2101      	movs	r1, #1
 800914c:	fa01 f303 	lsl.w	r3, r1, r3
 8009150:	041b      	lsls	r3, r3, #16
 8009152:	68f9      	ldr	r1, [r7, #12]
 8009154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009158:	4313      	orrs	r3, r2
 800915a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	015a      	lsls	r2, r3, #5
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4413      	add	r3, r2
 8009164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800916e:	2b00      	cmp	r3, #0
 8009170:	d11a      	bne.n	80091a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	015a      	lsls	r2, r3, #5
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4413      	add	r3, r2
 800917a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	791b      	ldrb	r3, [r3, #4]
 800918c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800918e:	430b      	orrs	r3, r1
 8009190:	4313      	orrs	r3, r2
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	0151      	lsls	r1, r2, #5
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	440a      	add	r2, r1
 800919a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800919e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
	...

080091b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	785b      	ldrb	r3, [r3, #1]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d161      	bne.n	8009298 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091ea:	d11f      	bne.n	800922c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	015a      	lsls	r2, r3, #5
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4413      	add	r3, r2
 80091f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	0151      	lsls	r1, r2, #5
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	440a      	add	r2, r1
 8009202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009206:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800920a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	0151      	lsls	r1, r2, #5
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	440a      	add	r2, r1
 8009222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009226:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800922a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	f003 030f 	and.w	r3, r3, #15
 800923c:	2101      	movs	r1, #1
 800923e:	fa01 f303 	lsl.w	r3, r1, r3
 8009242:	b29b      	uxth	r3, r3
 8009244:	43db      	mvns	r3, r3
 8009246:	68f9      	ldr	r1, [r7, #12]
 8009248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800924c:	4013      	ands	r3, r2
 800924e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009256:	69da      	ldr	r2, [r3, #28]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	f003 030f 	and.w	r3, r3, #15
 8009260:	2101      	movs	r1, #1
 8009262:	fa01 f303 	lsl.w	r3, r1, r3
 8009266:	b29b      	uxth	r3, r3
 8009268:	43db      	mvns	r3, r3
 800926a:	68f9      	ldr	r1, [r7, #12]
 800926c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009270:	4013      	ands	r3, r2
 8009272:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	015a      	lsls	r2, r3, #5
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	4413      	add	r3, r2
 800927c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	0159      	lsls	r1, r3, #5
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	440b      	add	r3, r1
 800928a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800928e:	4619      	mov	r1, r3
 8009290:	4b35      	ldr	r3, [pc, #212]	; (8009368 <USB_DeactivateEndpoint+0x1b0>)
 8009292:	4013      	ands	r3, r2
 8009294:	600b      	str	r3, [r1, #0]
 8009296:	e060      	b.n	800935a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092ae:	d11f      	bne.n	80092f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	015a      	lsls	r2, r3, #5
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	4413      	add	r3, r2
 80092b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	0151      	lsls	r1, r2, #5
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	440a      	add	r2, r1
 80092c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80092ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	015a      	lsls	r2, r3, #5
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	4413      	add	r3, r2
 80092d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	0151      	lsls	r1, r2, #5
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	440a      	add	r2, r1
 80092e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	f003 030f 	and.w	r3, r3, #15
 8009300:	2101      	movs	r1, #1
 8009302:	fa01 f303 	lsl.w	r3, r1, r3
 8009306:	041b      	lsls	r3, r3, #16
 8009308:	43db      	mvns	r3, r3
 800930a:	68f9      	ldr	r1, [r7, #12]
 800930c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009310:	4013      	ands	r3, r2
 8009312:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800931a:	69da      	ldr	r2, [r3, #28]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	f003 030f 	and.w	r3, r3, #15
 8009324:	2101      	movs	r1, #1
 8009326:	fa01 f303 	lsl.w	r3, r1, r3
 800932a:	041b      	lsls	r3, r3, #16
 800932c:	43db      	mvns	r3, r3
 800932e:	68f9      	ldr	r1, [r7, #12]
 8009330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009334:	4013      	ands	r3, r2
 8009336:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	015a      	lsls	r2, r3, #5
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	4413      	add	r3, r2
 8009340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	0159      	lsls	r1, r3, #5
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	440b      	add	r3, r1
 800934e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009352:	4619      	mov	r1, r3
 8009354:	4b05      	ldr	r3, [pc, #20]	; (800936c <USB_DeactivateEndpoint+0x1b4>)
 8009356:	4013      	ands	r3, r2
 8009358:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3714      	adds	r7, #20
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	ec337800 	.word	0xec337800
 800936c:	eff37800 	.word	0xeff37800

08009370 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b08a      	sub	sp, #40	; 0x28
 8009374:	af02      	add	r7, sp, #8
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	4613      	mov	r3, r2
 800937c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	785b      	ldrb	r3, [r3, #1]
 800938c:	2b01      	cmp	r3, #1
 800938e:	f040 815c 	bne.w	800964a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d132      	bne.n	8009400 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	015a      	lsls	r2, r3, #5
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	4413      	add	r3, r2
 80093a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	69ba      	ldr	r2, [r7, #24]
 80093aa:	0151      	lsls	r1, r2, #5
 80093ac:	69fa      	ldr	r2, [r7, #28]
 80093ae:	440a      	add	r2, r1
 80093b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	015a      	lsls	r2, r3, #5
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	0151      	lsls	r1, r2, #5
 80093d0:	69fa      	ldr	r2, [r7, #28]
 80093d2:	440a      	add	r2, r1
 80093d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	015a      	lsls	r2, r3, #5
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	4413      	add	r3, r2
 80093e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	69ba      	ldr	r2, [r7, #24]
 80093ee:	0151      	lsls	r1, r2, #5
 80093f0:	69fa      	ldr	r2, [r7, #28]
 80093f2:	440a      	add	r2, r1
 80093f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093f8:	0cdb      	lsrs	r3, r3, #19
 80093fa:	04db      	lsls	r3, r3, #19
 80093fc:	6113      	str	r3, [r2, #16]
 80093fe:	e074      	b.n	80094ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	015a      	lsls	r2, r3, #5
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	4413      	add	r3, r2
 8009408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	69ba      	ldr	r2, [r7, #24]
 8009410:	0151      	lsls	r1, r2, #5
 8009412:	69fa      	ldr	r2, [r7, #28]
 8009414:	440a      	add	r2, r1
 8009416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800941a:	0cdb      	lsrs	r3, r3, #19
 800941c:	04db      	lsls	r3, r3, #19
 800941e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	015a      	lsls	r2, r3, #5
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	4413      	add	r3, r2
 8009428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	69ba      	ldr	r2, [r7, #24]
 8009430:	0151      	lsls	r1, r2, #5
 8009432:	69fa      	ldr	r2, [r7, #28]
 8009434:	440a      	add	r2, r1
 8009436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800943a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800943e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009442:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009450:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	6999      	ldr	r1, [r3, #24]
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	440b      	add	r3, r1
 800945c:	1e59      	subs	r1, r3, #1
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	fbb1 f3f3 	udiv	r3, r1, r3
 8009466:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009468:	4b9d      	ldr	r3, [pc, #628]	; (80096e0 <USB_EPStartXfer+0x370>)
 800946a:	400b      	ands	r3, r1
 800946c:	69b9      	ldr	r1, [r7, #24]
 800946e:	0148      	lsls	r0, r1, #5
 8009470:	69f9      	ldr	r1, [r7, #28]
 8009472:	4401      	add	r1, r0
 8009474:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009478:	4313      	orrs	r3, r2
 800947a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	015a      	lsls	r2, r3, #5
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	4413      	add	r3, r2
 8009484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009488:	691a      	ldr	r2, [r3, #16]
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	699b      	ldr	r3, [r3, #24]
 800948e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009492:	69b9      	ldr	r1, [r7, #24]
 8009494:	0148      	lsls	r0, r1, #5
 8009496:	69f9      	ldr	r1, [r7, #28]
 8009498:	4401      	add	r1, r0
 800949a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800949e:	4313      	orrs	r3, r2
 80094a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	791b      	ldrb	r3, [r3, #4]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d11f      	bne.n	80094ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	015a      	lsls	r2, r3, #5
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	4413      	add	r3, r2
 80094b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	69ba      	ldr	r2, [r7, #24]
 80094ba:	0151      	lsls	r1, r2, #5
 80094bc:	69fa      	ldr	r2, [r7, #28]
 80094be:	440a      	add	r2, r1
 80094c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80094c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	69ba      	ldr	r2, [r7, #24]
 80094da:	0151      	lsls	r1, r2, #5
 80094dc:	69fa      	ldr	r2, [r7, #28]
 80094de:	440a      	add	r2, r1
 80094e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80094ea:	79fb      	ldrb	r3, [r7, #7]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d14b      	bne.n	8009588 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d009      	beq.n	800950c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	015a      	lsls	r2, r3, #5
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	4413      	add	r3, r2
 8009500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009504:	461a      	mov	r2, r3
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	791b      	ldrb	r3, [r3, #4]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d128      	bne.n	8009566 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009520:	2b00      	cmp	r3, #0
 8009522:	d110      	bne.n	8009546 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	69ba      	ldr	r2, [r7, #24]
 8009534:	0151      	lsls	r1, r2, #5
 8009536:	69fa      	ldr	r2, [r7, #28]
 8009538:	440a      	add	r2, r1
 800953a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800953e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009542:	6013      	str	r3, [r2, #0]
 8009544:	e00f      	b.n	8009566 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	4413      	add	r3, r2
 800954e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	69ba      	ldr	r2, [r7, #24]
 8009556:	0151      	lsls	r1, r2, #5
 8009558:	69fa      	ldr	r2, [r7, #28]
 800955a:	440a      	add	r2, r1
 800955c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009564:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	015a      	lsls	r2, r3, #5
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	4413      	add	r3, r2
 800956e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	69ba      	ldr	r2, [r7, #24]
 8009576:	0151      	lsls	r1, r2, #5
 8009578:	69fa      	ldr	r2, [r7, #28]
 800957a:	440a      	add	r2, r1
 800957c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009580:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	e133      	b.n	80097f0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	4413      	add	r3, r2
 8009590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69ba      	ldr	r2, [r7, #24]
 8009598:	0151      	lsls	r1, r2, #5
 800959a:	69fa      	ldr	r2, [r7, #28]
 800959c:	440a      	add	r2, r1
 800959e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	791b      	ldrb	r3, [r3, #4]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d015      	beq.n	80095dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f000 811b 	beq.w	80097f0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	f003 030f 	and.w	r3, r3, #15
 80095ca:	2101      	movs	r1, #1
 80095cc:	fa01 f303 	lsl.w	r3, r1, r3
 80095d0:	69f9      	ldr	r1, [r7, #28]
 80095d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095d6:	4313      	orrs	r3, r2
 80095d8:	634b      	str	r3, [r1, #52]	; 0x34
 80095da:	e109      	b.n	80097f0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d110      	bne.n	800960e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	69ba      	ldr	r2, [r7, #24]
 80095fc:	0151      	lsls	r1, r2, #5
 80095fe:	69fa      	ldr	r2, [r7, #28]
 8009600:	440a      	add	r2, r1
 8009602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009606:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	e00f      	b.n	800962e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	015a      	lsls	r2, r3, #5
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	4413      	add	r3, r2
 8009616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	69ba      	ldr	r2, [r7, #24]
 800961e:	0151      	lsls	r1, r2, #5
 8009620:	69fa      	ldr	r2, [r7, #28]
 8009622:	440a      	add	r2, r1
 8009624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800962c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	6919      	ldr	r1, [r3, #16]
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	781a      	ldrb	r2, [r3, #0]
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	699b      	ldr	r3, [r3, #24]
 800963a:	b298      	uxth	r0, r3
 800963c:	79fb      	ldrb	r3, [r7, #7]
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	4603      	mov	r3, r0
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f000 fade 	bl	8009c04 <USB_WritePacket>
 8009648:	e0d2      	b.n	80097f0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	4413      	add	r3, r2
 8009652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	69ba      	ldr	r2, [r7, #24]
 800965a:	0151      	lsls	r1, r2, #5
 800965c:	69fa      	ldr	r2, [r7, #28]
 800965e:	440a      	add	r2, r1
 8009660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009664:	0cdb      	lsrs	r3, r3, #19
 8009666:	04db      	lsls	r3, r3, #19
 8009668:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	015a      	lsls	r2, r3, #5
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	4413      	add	r3, r2
 8009672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009676:	691b      	ldr	r3, [r3, #16]
 8009678:	69ba      	ldr	r2, [r7, #24]
 800967a:	0151      	lsls	r1, r2, #5
 800967c:	69fa      	ldr	r2, [r7, #28]
 800967e:	440a      	add	r2, r1
 8009680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009684:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009688:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800968c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d126      	bne.n	80096e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a2:	691a      	ldr	r2, [r3, #16]
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096ac:	69b9      	ldr	r1, [r7, #24]
 80096ae:	0148      	lsls	r0, r1, #5
 80096b0:	69f9      	ldr	r1, [r7, #28]
 80096b2:	4401      	add	r1, r0
 80096b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096b8:	4313      	orrs	r3, r2
 80096ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	015a      	lsls	r2, r3, #5
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	4413      	add	r3, r2
 80096c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	69ba      	ldr	r2, [r7, #24]
 80096cc:	0151      	lsls	r1, r2, #5
 80096ce:	69fa      	ldr	r2, [r7, #28]
 80096d0:	440a      	add	r2, r1
 80096d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096da:	6113      	str	r3, [r2, #16]
 80096dc:	e03a      	b.n	8009754 <USB_EPStartXfer+0x3e4>
 80096de:	bf00      	nop
 80096e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	699a      	ldr	r2, [r3, #24]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	4413      	add	r3, r2
 80096ee:	1e5a      	subs	r2, r3, #1
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096f8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	8afa      	ldrh	r2, [r7, #22]
 8009700:	fb03 f202 	mul.w	r2, r3, r2
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	015a      	lsls	r2, r3, #5
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	4413      	add	r3, r2
 8009710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009714:	691a      	ldr	r2, [r3, #16]
 8009716:	8afb      	ldrh	r3, [r7, #22]
 8009718:	04d9      	lsls	r1, r3, #19
 800971a:	4b38      	ldr	r3, [pc, #224]	; (80097fc <USB_EPStartXfer+0x48c>)
 800971c:	400b      	ands	r3, r1
 800971e:	69b9      	ldr	r1, [r7, #24]
 8009720:	0148      	lsls	r0, r1, #5
 8009722:	69f9      	ldr	r1, [r7, #28]
 8009724:	4401      	add	r1, r0
 8009726:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800972a:	4313      	orrs	r3, r2
 800972c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	015a      	lsls	r2, r3, #5
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	4413      	add	r3, r2
 8009736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973a:	691a      	ldr	r2, [r3, #16]
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	69db      	ldr	r3, [r3, #28]
 8009740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009744:	69b9      	ldr	r1, [r7, #24]
 8009746:	0148      	lsls	r0, r1, #5
 8009748:	69f9      	ldr	r1, [r7, #28]
 800974a:	4401      	add	r1, r0
 800974c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009750:	4313      	orrs	r3, r2
 8009752:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009754:	79fb      	ldrb	r3, [r7, #7]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d10d      	bne.n	8009776 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d009      	beq.n	8009776 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	6919      	ldr	r1, [r3, #16]
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	015a      	lsls	r2, r3, #5
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	4413      	add	r3, r2
 800976e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009772:	460a      	mov	r2, r1
 8009774:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	791b      	ldrb	r3, [r3, #4]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d128      	bne.n	80097d0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800978a:	2b00      	cmp	r3, #0
 800978c:	d110      	bne.n	80097b0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	015a      	lsls	r2, r3, #5
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	4413      	add	r3, r2
 8009796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	69ba      	ldr	r2, [r7, #24]
 800979e:	0151      	lsls	r1, r2, #5
 80097a0:	69fa      	ldr	r2, [r7, #28]
 80097a2:	440a      	add	r2, r1
 80097a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	e00f      	b.n	80097d0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	69ba      	ldr	r2, [r7, #24]
 80097c0:	0151      	lsls	r1, r2, #5
 80097c2:	69fa      	ldr	r2, [r7, #28]
 80097c4:	440a      	add	r2, r1
 80097c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	015a      	lsls	r2, r3, #5
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	69ba      	ldr	r2, [r7, #24]
 80097e0:	0151      	lsls	r1, r2, #5
 80097e2:	69fa      	ldr	r2, [r7, #28]
 80097e4:	440a      	add	r2, r1
 80097e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3720      	adds	r7, #32
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	1ff80000 	.word	0x1ff80000

08009800 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009800:	b480      	push	{r7}
 8009802:	b087      	sub	sp, #28
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	4613      	mov	r3, r2
 800980c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	785b      	ldrb	r3, [r3, #1]
 800981c:	2b01      	cmp	r3, #1
 800981e:	f040 80ce 	bne.w	80099be <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d132      	bne.n	8009890 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	015a      	lsls	r2, r3, #5
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	4413      	add	r3, r2
 8009832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	0151      	lsls	r1, r2, #5
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	440a      	add	r2, r1
 8009840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009844:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009848:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800984c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	015a      	lsls	r2, r3, #5
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	4413      	add	r3, r2
 8009856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	0151      	lsls	r1, r2, #5
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	440a      	add	r2, r1
 8009864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009868:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800986c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	015a      	lsls	r2, r3, #5
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	4413      	add	r3, r2
 8009876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	0151      	lsls	r1, r2, #5
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	440a      	add	r2, r1
 8009884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009888:	0cdb      	lsrs	r3, r3, #19
 800988a:	04db      	lsls	r3, r3, #19
 800988c:	6113      	str	r3, [r2, #16]
 800988e:	e04e      	b.n	800992e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	015a      	lsls	r2, r3, #5
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	4413      	add	r3, r2
 8009898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	693a      	ldr	r2, [r7, #16]
 80098a0:	0151      	lsls	r1, r2, #5
 80098a2:	697a      	ldr	r2, [r7, #20]
 80098a4:	440a      	add	r2, r1
 80098a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098aa:	0cdb      	lsrs	r3, r3, #19
 80098ac:	04db      	lsls	r3, r3, #19
 80098ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	015a      	lsls	r2, r3, #5
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	4413      	add	r3, r2
 80098b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	0151      	lsls	r1, r2, #5
 80098c2:	697a      	ldr	r2, [r7, #20]
 80098c4:	440a      	add	r2, r1
 80098c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80098ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	699a      	ldr	r2, [r3, #24]
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d903      	bls.n	80098e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	68da      	ldr	r2, [r3, #12]
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	015a      	lsls	r2, r3, #5
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	4413      	add	r3, r2
 80098f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	0151      	lsls	r1, r2, #5
 80098fa:	697a      	ldr	r2, [r7, #20]
 80098fc:	440a      	add	r2, r1
 80098fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009902:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009906:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	015a      	lsls	r2, r3, #5
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	4413      	add	r3, r2
 8009910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009914:	691a      	ldr	r2, [r3, #16]
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	699b      	ldr	r3, [r3, #24]
 800991a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800991e:	6939      	ldr	r1, [r7, #16]
 8009920:	0148      	lsls	r0, r1, #5
 8009922:	6979      	ldr	r1, [r7, #20]
 8009924:	4401      	add	r1, r0
 8009926:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800992a:	4313      	orrs	r3, r2
 800992c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800992e:	79fb      	ldrb	r3, [r7, #7]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d11e      	bne.n	8009972 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	695b      	ldr	r3, [r3, #20]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d009      	beq.n	8009950 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	015a      	lsls	r2, r3, #5
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	4413      	add	r3, r2
 8009944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009948:	461a      	mov	r2, r3
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	015a      	lsls	r2, r3, #5
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	4413      	add	r3, r2
 8009958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	0151      	lsls	r1, r2, #5
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	440a      	add	r2, r1
 8009966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800996a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800996e:	6013      	str	r3, [r2, #0]
 8009970:	e097      	b.n	8009aa2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	4413      	add	r3, r2
 800997a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	693a      	ldr	r2, [r7, #16]
 8009982:	0151      	lsls	r1, r2, #5
 8009984:	697a      	ldr	r2, [r7, #20]
 8009986:	440a      	add	r2, r1
 8009988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800998c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009990:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	2b00      	cmp	r3, #0
 8009998:	f000 8083 	beq.w	8009aa2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	f003 030f 	and.w	r3, r3, #15
 80099ac:	2101      	movs	r1, #1
 80099ae:	fa01 f303 	lsl.w	r3, r1, r3
 80099b2:	6979      	ldr	r1, [r7, #20]
 80099b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099b8:	4313      	orrs	r3, r2
 80099ba:	634b      	str	r3, [r1, #52]	; 0x34
 80099bc:	e071      	b.n	8009aa2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	015a      	lsls	r2, r3, #5
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	4413      	add	r3, r2
 80099c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	693a      	ldr	r2, [r7, #16]
 80099ce:	0151      	lsls	r1, r2, #5
 80099d0:	697a      	ldr	r2, [r7, #20]
 80099d2:	440a      	add	r2, r1
 80099d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099d8:	0cdb      	lsrs	r3, r3, #19
 80099da:	04db      	lsls	r3, r3, #19
 80099dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	015a      	lsls	r2, r3, #5
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	4413      	add	r3, r2
 80099e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	693a      	ldr	r2, [r7, #16]
 80099ee:	0151      	lsls	r1, r2, #5
 80099f0:	697a      	ldr	r2, [r7, #20]
 80099f2:	440a      	add	r2, r1
 80099f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a00:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	699b      	ldr	r3, [r3, #24]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d003      	beq.n	8009a12 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	68da      	ldr	r2, [r3, #12]
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	68da      	ldr	r2, [r3, #12]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	015a      	lsls	r2, r3, #5
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	4413      	add	r3, r2
 8009a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	0151      	lsls	r1, r2, #5
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	440a      	add	r2, r1
 8009a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	015a      	lsls	r2, r3, #5
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a46:	691a      	ldr	r2, [r3, #16]
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	69db      	ldr	r3, [r3, #28]
 8009a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a50:	6939      	ldr	r1, [r7, #16]
 8009a52:	0148      	lsls	r0, r1, #5
 8009a54:	6979      	ldr	r1, [r7, #20]
 8009a56:	4401      	add	r1, r0
 8009a58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009a60:	79fb      	ldrb	r3, [r7, #7]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d10d      	bne.n	8009a82 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d009      	beq.n	8009a82 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	6919      	ldr	r1, [r3, #16]
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	015a      	lsls	r2, r3, #5
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7e:	460a      	mov	r2, r1
 8009a80:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	015a      	lsls	r2, r3, #5
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	4413      	add	r3, r2
 8009a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	693a      	ldr	r2, [r7, #16]
 8009a92:	0151      	lsls	r1, r2, #5
 8009a94:	697a      	ldr	r2, [r7, #20]
 8009a96:	440a      	add	r2, r1
 8009a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009aa0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	371c      	adds	r7, #28
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b087      	sub	sp, #28
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	785b      	ldrb	r3, [r3, #1]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d14a      	bne.n	8009b64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	015a      	lsls	r2, r3, #5
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ae6:	f040 8086 	bne.w	8009bf6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	015a      	lsls	r2, r3, #5
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	4413      	add	r3, r2
 8009af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	683a      	ldr	r2, [r7, #0]
 8009afc:	7812      	ldrb	r2, [r2, #0]
 8009afe:	0151      	lsls	r1, r2, #5
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	440a      	add	r2, r1
 8009b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	015a      	lsls	r2, r3, #5
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	4413      	add	r3, r2
 8009b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	683a      	ldr	r2, [r7, #0]
 8009b20:	7812      	ldrb	r2, [r2, #0]
 8009b22:	0151      	lsls	r1, r2, #5
 8009b24:	693a      	ldr	r2, [r7, #16]
 8009b26:	440a      	add	r2, r1
 8009b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	3301      	adds	r3, #1
 8009b36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d902      	bls.n	8009b48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	75fb      	strb	r3, [r7, #23]
          break;
 8009b46:	e056      	b.n	8009bf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	015a      	lsls	r2, r3, #5
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	4413      	add	r3, r2
 8009b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b60:	d0e7      	beq.n	8009b32 <USB_EPStopXfer+0x82>
 8009b62:	e048      	b.n	8009bf6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	015a      	lsls	r2, r3, #5
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b7c:	d13b      	bne.n	8009bf6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	015a      	lsls	r2, r3, #5
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	4413      	add	r3, r2
 8009b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	7812      	ldrb	r2, [r2, #0]
 8009b92:	0151      	lsls	r1, r2, #5
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	440a      	add	r2, r1
 8009b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ba0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	015a      	lsls	r2, r3, #5
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	4413      	add	r3, r2
 8009bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	7812      	ldrb	r2, [r2, #0]
 8009bb6:	0151      	lsls	r1, r2, #5
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	440a      	add	r2, r1
 8009bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f242 7210 	movw	r2, #10000	; 0x2710
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d902      	bls.n	8009bdc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	75fb      	strb	r3, [r7, #23]
          break;
 8009bda:	e00c      	b.n	8009bf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bf4:	d0e7      	beq.n	8009bc6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	371c      	adds	r7, #28
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b089      	sub	sp, #36	; 0x24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	4611      	mov	r1, r2
 8009c10:	461a      	mov	r2, r3
 8009c12:	460b      	mov	r3, r1
 8009c14:	71fb      	strb	r3, [r7, #7]
 8009c16:	4613      	mov	r3, r2
 8009c18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009c22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d123      	bne.n	8009c72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009c2a:	88bb      	ldrh	r3, [r7, #4]
 8009c2c:	3303      	adds	r3, #3
 8009c2e:	089b      	lsrs	r3, r3, #2
 8009c30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009c32:	2300      	movs	r3, #0
 8009c34:	61bb      	str	r3, [r7, #24]
 8009c36:	e018      	b.n	8009c6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009c38:	79fb      	ldrb	r3, [r7, #7]
 8009c3a:	031a      	lsls	r2, r3, #12
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c44:	461a      	mov	r2, r3
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	3301      	adds	r3, #1
 8009c56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	3301      	adds	r3, #1
 8009c62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	3301      	adds	r3, #1
 8009c68:	61bb      	str	r3, [r7, #24]
 8009c6a:	69ba      	ldr	r2, [r7, #24]
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d3e2      	bcc.n	8009c38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3724      	adds	r7, #36	; 0x24
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b08b      	sub	sp, #44	; 0x2c
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009c96:	88fb      	ldrh	r3, [r7, #6]
 8009c98:	089b      	lsrs	r3, r3, #2
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009c9e:	88fb      	ldrh	r3, [r7, #6]
 8009ca0:	f003 0303 	and.w	r3, r3, #3
 8009ca4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	623b      	str	r3, [r7, #32]
 8009caa:	e014      	b.n	8009cd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	601a      	str	r2, [r3, #0]
    pDest++;
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cba:	3301      	adds	r3, #1
 8009cbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ccc:	3301      	adds	r3, #1
 8009cce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009cd0:	6a3b      	ldr	r3, [r7, #32]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	623b      	str	r3, [r7, #32]
 8009cd6:	6a3a      	ldr	r2, [r7, #32]
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d3e6      	bcc.n	8009cac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009cde:	8bfb      	ldrh	r3, [r7, #30]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d01e      	beq.n	8009d22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cee:	461a      	mov	r2, r3
 8009cf0:	f107 0310 	add.w	r3, r7, #16
 8009cf4:	6812      	ldr	r2, [r2, #0]
 8009cf6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009cf8:	693a      	ldr	r2, [r7, #16]
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	00db      	lsls	r3, r3, #3
 8009d00:	fa22 f303 	lsr.w	r3, r2, r3
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	701a      	strb	r2, [r3, #0]
      i++;
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	3301      	adds	r3, #1
 8009d14:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009d16:	8bfb      	ldrh	r3, [r7, #30]
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009d1c:	8bfb      	ldrh	r3, [r7, #30]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1ea      	bne.n	8009cf8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	372c      	adds	r7, #44	; 0x2c
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	785b      	ldrb	r3, [r3, #1]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d12c      	bne.n	8009da6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	015a      	lsls	r2, r3, #5
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4413      	add	r3, r2
 8009d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	db12      	blt.n	8009d84 <USB_EPSetStall+0x54>
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00f      	beq.n	8009d84 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	0151      	lsls	r1, r2, #5
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	440a      	add	r2, r1
 8009d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009d82:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	015a      	lsls	r2, r3, #5
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	0151      	lsls	r1, r2, #5
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	440a      	add	r2, r1
 8009d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009da2:	6013      	str	r3, [r2, #0]
 8009da4:	e02b      	b.n	8009dfe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	015a      	lsls	r2, r3, #5
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	4413      	add	r3, r2
 8009dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	db12      	blt.n	8009dde <USB_EPSetStall+0xae>
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00f      	beq.n	8009dde <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	015a      	lsls	r2, r3, #5
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	0151      	lsls	r1, r2, #5
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	440a      	add	r2, r1
 8009dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ddc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	015a      	lsls	r2, r3, #5
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	4413      	add	r3, r2
 8009de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	0151      	lsls	r1, r2, #5
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	440a      	add	r2, r1
 8009df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009dfc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	785b      	ldrb	r3, [r3, #1]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d128      	bne.n	8009e7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	015a      	lsls	r2, r3, #5
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	4413      	add	r3, r2
 8009e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	0151      	lsls	r1, r2, #5
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	440a      	add	r2, r1
 8009e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	791b      	ldrb	r3, [r3, #4]
 8009e4c:	2b03      	cmp	r3, #3
 8009e4e:	d003      	beq.n	8009e58 <USB_EPClearStall+0x4c>
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	791b      	ldrb	r3, [r3, #4]
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d138      	bne.n	8009eca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	015a      	lsls	r2, r3, #5
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	4413      	add	r3, r2
 8009e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	0151      	lsls	r1, r2, #5
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	440a      	add	r2, r1
 8009e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e76:	6013      	str	r3, [r2, #0]
 8009e78:	e027      	b.n	8009eca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	015a      	lsls	r2, r3, #5
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	4413      	add	r3, r2
 8009e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	0151      	lsls	r1, r2, #5
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	440a      	add	r2, r1
 8009e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	791b      	ldrb	r3, [r3, #4]
 8009e9e:	2b03      	cmp	r3, #3
 8009ea0:	d003      	beq.n	8009eaa <USB_EPClearStall+0x9e>
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	791b      	ldrb	r3, [r3, #4]
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d10f      	bne.n	8009eca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	015a      	lsls	r2, r3, #5
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68ba      	ldr	r2, [r7, #8]
 8009eba:	0151      	lsls	r1, r2, #5
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	440a      	add	r2, r1
 8009ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ec8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3714      	adds	r7, #20
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ef6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009efa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	78fb      	ldrb	r3, [r7, #3]
 8009f06:	011b      	lsls	r3, r3, #4
 8009f08:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009f0c:	68f9      	ldr	r1, [r7, #12]
 8009f0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f12:	4313      	orrs	r3, r2
 8009f14:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3714      	adds	r7, #20
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f3e:	f023 0303 	bic.w	r3, r3, #3
 8009f42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f52:	f023 0302 	bic.w	r3, r3, #2
 8009f56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3714      	adds	r7, #20
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr

08009f66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009f66:	b480      	push	{r7}
 8009f68:	b085      	sub	sp, #20
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f80:	f023 0303 	bic.w	r3, r3, #3
 8009f84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f94:	f043 0302 	orr.w	r3, r3, #2
 8009f98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	695b      	ldr	r3, [r3, #20]
 8009fb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3714      	adds	r7, #20
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr

08009fce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fce:	b480      	push	{r7}
 8009fd0:	b085      	sub	sp, #20
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe0:	699b      	ldr	r3, [r3, #24]
 8009fe2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fea:	69db      	ldr	r3, [r3, #28]
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	4013      	ands	r3, r2
 8009ff0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	0c1b      	lsrs	r3, r3, #16
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3714      	adds	r7, #20
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a002:	b480      	push	{r7}
 800a004:	b085      	sub	sp, #20
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a01e:	69db      	ldr	r3, [r3, #28]
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	4013      	ands	r3, r2
 800a024:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	b29b      	uxth	r3, r3
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a036:	b480      	push	{r7}
 800a038:	b085      	sub	sp, #20
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	460b      	mov	r3, r1
 800a040:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a046:	78fb      	ldrb	r3, [r7, #3]
 800a048:	015a      	lsls	r2, r3, #5
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	4413      	add	r3, r2
 800a04e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a05c:	695b      	ldr	r3, [r3, #20]
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	4013      	ands	r3, r2
 800a062:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a064:	68bb      	ldr	r3, [r7, #8]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr

0800a072 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a072:	b480      	push	{r7}
 800a074:	b087      	sub	sp, #28
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	460b      	mov	r3, r1
 800a07c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a094:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a096:	78fb      	ldrb	r3, [r7, #3]
 800a098:	f003 030f 	and.w	r3, r3, #15
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	fa22 f303 	lsr.w	r3, r2, r3
 800a0a2:	01db      	lsls	r3, r3, #7
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a0ac:	78fb      	ldrb	r3, [r7, #3]
 800a0ae:	015a      	lsls	r2, r3, #5
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	4013      	ands	r3, r2
 800a0be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a0c0:	68bb      	ldr	r3, [r7, #8]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	371c      	adds	r7, #28
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b083      	sub	sp, #12
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	695b      	ldr	r3, [r3, #20]
 800a0da:	f003 0301 	and.w	r3, r3, #1
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b085      	sub	sp, #20
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a104:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a108:	f023 0307 	bic.w	r3, r3, #7
 800a10c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a11c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a120:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a130:	b480      	push	{r7}
 800a132:	b087      	sub	sp, #28
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	460b      	mov	r3, r1
 800a13a:	607a      	str	r2, [r7, #4]
 800a13c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	333c      	adds	r3, #60	; 0x3c
 800a146:	3304      	adds	r3, #4
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	4a26      	ldr	r2, [pc, #152]	; (800a1e8 <USB_EP0_OutStart+0xb8>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d90a      	bls.n	800a16a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a164:	d101      	bne.n	800a16a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	e037      	b.n	800a1da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a170:	461a      	mov	r2, r3
 800a172:	2300      	movs	r3, #0
 800a174:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a184:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a188:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	697a      	ldr	r2, [r7, #20]
 800a194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a198:	f043 0318 	orr.w	r3, r3, #24
 800a19c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	697a      	ldr	r2, [r7, #20]
 800a1a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a1b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a1b2:	7afb      	ldrb	r3, [r7, #11]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d10f      	bne.n	800a1d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1be:	461a      	mov	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a1d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	371c      	adds	r7, #28
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	4f54300a 	.word	0x4f54300a

0800a1ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	4a13      	ldr	r2, [pc, #76]	; (800a250 <USB_CoreReset+0x64>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d901      	bls.n	800a20a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a206:	2303      	movs	r3, #3
 800a208:	e01b      	b.n	800a242 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	daf2      	bge.n	800a1f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a212:	2300      	movs	r3, #0
 800a214:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	f043 0201 	orr.w	r2, r3, #1
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	3301      	adds	r3, #1
 800a226:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	4a09      	ldr	r2, [pc, #36]	; (800a250 <USB_CoreReset+0x64>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d901      	bls.n	800a234 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a230:	2303      	movs	r3, #3
 800a232:	e006      	b.n	800a242 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	f003 0301 	and.w	r3, r3, #1
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d0f0      	beq.n	800a222 <USB_CoreReset+0x36>

  return HAL_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	00030d40 	.word	0x00030d40

0800a254 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800a260:	2054      	movs	r0, #84	; 0x54
 800a262:	f003 f885 	bl	800d370 <USBD_static_malloc>
 800a266:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d109      	bne.n	800a282 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	32b0      	adds	r2, #176	; 0xb0
 800a278:	2100      	movs	r1, #0
 800a27a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a27e:	2302      	movs	r3, #2
 800a280:	e08b      	b.n	800a39a <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	32b0      	adds	r2, #176	; 0xb0
 800a28c:	68f9      	ldr	r1, [r7, #12]
 800a28e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	32b0      	adds	r2, #176	; 0xb0
 800a29c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	7c1b      	ldrb	r3, [r3, #16]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d11b      	bne.n	800a2e6 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800a2ae:	4b3d      	ldr	r3, [pc, #244]	; (800a3a4 <USBD_CUSTOM_HID_Init+0x150>)
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	f003 020f 	and.w	r2, r3, #15
 800a2b6:	6879      	ldr	r1, [r7, #4]
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4413      	add	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	440b      	add	r3, r1
 800a2c2:	3326      	adds	r3, #38	; 0x26
 800a2c4:	2205      	movs	r2, #5
 800a2c6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800a2c8:	4b37      	ldr	r3, [pc, #220]	; (800a3a8 <USBD_CUSTOM_HID_Init+0x154>)
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	f003 020f 	and.w	r2, r3, #15
 800a2d0:	6879      	ldr	r1, [r7, #4]
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4413      	add	r3, r2
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	440b      	add	r3, r1
 800a2dc:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a2e0:	2205      	movs	r2, #5
 800a2e2:	801a      	strh	r2, [r3, #0]
 800a2e4:	e01a      	b.n	800a31c <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a2e6:	4b2f      	ldr	r3, [pc, #188]	; (800a3a4 <USBD_CUSTOM_HID_Init+0x150>)
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	f003 020f 	and.w	r2, r3, #15
 800a2ee:	6879      	ldr	r1, [r7, #4]
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	4413      	add	r3, r2
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	440b      	add	r3, r1
 800a2fa:	3326      	adds	r3, #38	; 0x26
 800a2fc:	2205      	movs	r2, #5
 800a2fe:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a300:	4b29      	ldr	r3, [pc, #164]	; (800a3a8 <USBD_CUSTOM_HID_Init+0x154>)
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	f003 020f 	and.w	r2, r3, #15
 800a308:	6879      	ldr	r1, [r7, #4]
 800a30a:	4613      	mov	r3, r2
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	4413      	add	r3, r2
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	440b      	add	r3, r1
 800a314:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a318:	2205      	movs	r2, #5
 800a31a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 800a31c:	4b21      	ldr	r3, [pc, #132]	; (800a3a4 <USBD_CUSTOM_HID_Init+0x150>)
 800a31e:	7819      	ldrb	r1, [r3, #0]
 800a320:	2340      	movs	r3, #64	; 0x40
 800a322:	2203      	movs	r2, #3
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f002 ff12 	bl	800d14e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800a32a:	4b1e      	ldr	r3, [pc, #120]	; (800a3a4 <USBD_CUSTOM_HID_Init+0x150>)
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	f003 020f 	and.w	r2, r3, #15
 800a332:	6879      	ldr	r1, [r7, #4]
 800a334:	4613      	mov	r3, r2
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	4413      	add	r3, r2
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	440b      	add	r3, r1
 800a33e:	3324      	adds	r3, #36	; 0x24
 800a340:	2201      	movs	r2, #1
 800a342:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800a344:	4b18      	ldr	r3, [pc, #96]	; (800a3a8 <USBD_CUSTOM_HID_Init+0x154>)
 800a346:	7819      	ldrb	r1, [r3, #0]
 800a348:	2340      	movs	r3, #64	; 0x40
 800a34a:	2203      	movs	r2, #3
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f002 fefe 	bl	800d14e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800a352:	4b15      	ldr	r3, [pc, #84]	; (800a3a8 <USBD_CUSTOM_HID_Init+0x154>)
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	f003 020f 	and.w	r2, r3, #15
 800a35a:	6879      	ldr	r1, [r7, #4]
 800a35c:	4613      	mov	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	440b      	add	r3, r1
 800a366:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a36a:	2201      	movs	r2, #1
 800a36c:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2200      	movs	r2, #0
 800a372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	33b0      	adds	r3, #176	; 0xb0
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4413      	add	r3, r2
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800a38a:	4b07      	ldr	r3, [pc, #28]	; (800a3a8 <USBD_CUSTOM_HID_Init+0x154>)
 800a38c:	7819      	ldrb	r1, [r3, #0]
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	2340      	movs	r3, #64	; 0x40
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f002 ffca 	bl	800d32c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	2000008e 	.word	0x2000008e
 800a3a8:	2000008f 	.word	0x2000008f

0800a3ac <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800a3b8:	4b37      	ldr	r3, [pc, #220]	; (800a498 <USBD_CUSTOM_HID_DeInit+0xec>)
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	4619      	mov	r1, r3
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f002 feeb 	bl	800d19a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 800a3c4:	4b34      	ldr	r3, [pc, #208]	; (800a498 <USBD_CUSTOM_HID_DeInit+0xec>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	f003 020f 	and.w	r2, r3, #15
 800a3cc:	6879      	ldr	r1, [r7, #4]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	4413      	add	r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	440b      	add	r3, r1
 800a3d8:	3324      	adds	r3, #36	; 0x24
 800a3da:	2200      	movs	r2, #0
 800a3dc:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800a3de:	4b2e      	ldr	r3, [pc, #184]	; (800a498 <USBD_CUSTOM_HID_DeInit+0xec>)
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	f003 020f 	and.w	r2, r3, #15
 800a3e6:	6879      	ldr	r1, [r7, #4]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	440b      	add	r3, r1
 800a3f2:	3326      	adds	r3, #38	; 0x26
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800a3f8:	4b28      	ldr	r3, [pc, #160]	; (800a49c <USBD_CUSTOM_HID_DeInit+0xf0>)
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f002 fecb 	bl	800d19a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800a404:	4b25      	ldr	r3, [pc, #148]	; (800a49c <USBD_CUSTOM_HID_DeInit+0xf0>)
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	f003 020f 	and.w	r2, r3, #15
 800a40c:	6879      	ldr	r1, [r7, #4]
 800a40e:	4613      	mov	r3, r2
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4413      	add	r3, r2
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	440b      	add	r3, r1
 800a418:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a41c:	2200      	movs	r2, #0
 800a41e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 800a420:	4b1e      	ldr	r3, [pc, #120]	; (800a49c <USBD_CUSTOM_HID_DeInit+0xf0>)
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	f003 020f 	and.w	r2, r3, #15
 800a428:	6879      	ldr	r1, [r7, #4]
 800a42a:	4613      	mov	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	440b      	add	r3, r1
 800a434:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a438:	2200      	movs	r2, #0
 800a43a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	32b0      	adds	r2, #176	; 0xb0
 800a446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d01f      	beq.n	800a48e <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	33b0      	adds	r3, #176	; 0xb0
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	4413      	add	r3, r2
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	32b0      	adds	r2, #176	; 0xb0
 800a46c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a470:	4618      	mov	r0, r3
 800a472:	f002 ff8b 	bl	800d38c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	32b0      	adds	r2, #176	; 0xb0
 800a480:	2100      	movs	r1, #0
 800a482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	2000008e 	.word	0x2000008e
 800a49c:	2000008f 	.word	0x2000008f

0800a4a0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b088      	sub	sp, #32
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	32b0      	adds	r2, #176	; 0xb0
 800a4b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d101      	bne.n	800a4d4 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800a4d0:	2303      	movs	r3, #3
 800a4d2:	e0f8      	b.n	800a6c6 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d056      	beq.n	800a58e <USBD_CUSTOM_HID_Setup+0xee>
 800a4e0:	2b20      	cmp	r3, #32
 800a4e2:	f040 80e8 	bne.w	800a6b6 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	785b      	ldrb	r3, [r3, #1]
 800a4ea:	3b02      	subs	r3, #2
 800a4ec:	2b09      	cmp	r3, #9
 800a4ee:	d846      	bhi.n	800a57e <USBD_CUSTOM_HID_Setup+0xde>
 800a4f0:	a201      	add	r2, pc, #4	; (adr r2, 800a4f8 <USBD_CUSTOM_HID_Setup+0x58>)
 800a4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f6:	bf00      	nop
 800a4f8:	0800a551 	.word	0x0800a551
 800a4fc:	0800a52f 	.word	0x0800a52f
 800a500:	0800a57f 	.word	0x0800a57f
 800a504:	0800a57f 	.word	0x0800a57f
 800a508:	0800a57f 	.word	0x0800a57f
 800a50c:	0800a57f 	.word	0x0800a57f
 800a510:	0800a57f 	.word	0x0800a57f
 800a514:	0800a561 	.word	0x0800a561
 800a518:	0800a53f 	.word	0x0800a53f
 800a51c:	0800a521 	.word	0x0800a521
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	885b      	ldrh	r3, [r3, #2]
 800a524:	b2db      	uxtb	r3, r3
 800a526:	461a      	mov	r2, r3
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 800a52c:	e02e      	b.n	800a58c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	3340      	adds	r3, #64	; 0x40
 800a532:	2201      	movs	r2, #1
 800a534:	4619      	mov	r1, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f001 fcce 	bl	800bed8 <USBD_CtlSendData>
          break;
 800a53c:	e026      	b.n	800a58c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	885b      	ldrh	r3, [r3, #2]
 800a542:	0a1b      	lsrs	r3, r3, #8
 800a544:	b29b      	uxth	r3, r3
 800a546:	b2db      	uxtb	r3, r3
 800a548:	461a      	mov	r2, r3
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 800a54e:	e01d      	b.n	800a58c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	3344      	adds	r3, #68	; 0x44
 800a554:	2201      	movs	r2, #1
 800a556:	4619      	mov	r1, r3
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f001 fcbd 	bl	800bed8 <USBD_CtlSendData>
          break;
 800a55e:	e015      	b.n	800a58c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	2201      	movs	r2, #1
 800a564:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800a566:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	88db      	ldrh	r3, [r3, #6]
 800a56c:	2b40      	cmp	r3, #64	; 0x40
 800a56e:	bf28      	it	cs
 800a570:	2340      	movcs	r3, #64	; 0x40
 800a572:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800a574:	461a      	mov	r2, r3
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f001 fcda 	bl	800bf30 <USBD_CtlPrepareRx>
          break;
 800a57c:	e006      	b.n	800a58c <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 800a57e:	6839      	ldr	r1, [r7, #0]
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f001 fc38 	bl	800bdf6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a586:	2303      	movs	r3, #3
 800a588:	75fb      	strb	r3, [r7, #23]
          break;
 800a58a:	bf00      	nop
      }
      break;
 800a58c:	e09a      	b.n	800a6c4 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	785b      	ldrb	r3, [r3, #1]
 800a592:	2b0b      	cmp	r3, #11
 800a594:	f200 8086 	bhi.w	800a6a4 <USBD_CUSTOM_HID_Setup+0x204>
 800a598:	a201      	add	r2, pc, #4	; (adr r2, 800a5a0 <USBD_CUSTOM_HID_Setup+0x100>)
 800a59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59e:	bf00      	nop
 800a5a0:	0800a5d1 	.word	0x0800a5d1
 800a5a4:	0800a6b3 	.word	0x0800a6b3
 800a5a8:	0800a6a5 	.word	0x0800a6a5
 800a5ac:	0800a6a5 	.word	0x0800a6a5
 800a5b0:	0800a6a5 	.word	0x0800a6a5
 800a5b4:	0800a6a5 	.word	0x0800a6a5
 800a5b8:	0800a5fb 	.word	0x0800a5fb
 800a5bc:	0800a6a5 	.word	0x0800a6a5
 800a5c0:	0800a6a5 	.word	0x0800a6a5
 800a5c4:	0800a6a5 	.word	0x0800a6a5
 800a5c8:	0800a653 	.word	0x0800a653
 800a5cc:	0800a67d 	.word	0x0800a67d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b03      	cmp	r3, #3
 800a5da:	d107      	bne.n	800a5ec <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a5dc:	f107 030e 	add.w	r3, r7, #14
 800a5e0:	2202      	movs	r2, #2
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f001 fc77 	bl	800bed8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a5ea:	e063      	b.n	800a6b4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800a5ec:	6839      	ldr	r1, [r7, #0]
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f001 fc01 	bl	800bdf6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	75fb      	strb	r3, [r7, #23]
          break;
 800a5f8:	e05c      	b.n	800a6b4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	885b      	ldrh	r3, [r3, #2]
 800a5fe:	0a1b      	lsrs	r3, r3, #8
 800a600:	b29b      	uxth	r3, r3
 800a602:	2b22      	cmp	r3, #34	; 0x22
 800a604:	d110      	bne.n	800a628 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	88db      	ldrh	r3, [r3, #6]
 800a60a:	2b3f      	cmp	r3, #63	; 0x3f
 800a60c:	bf28      	it	cs
 800a60e:	233f      	movcs	r3, #63	; 0x3f
 800a610:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	33b0      	adds	r3, #176	; 0xb0
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	4413      	add	r3, r2
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	61bb      	str	r3, [r7, #24]
 800a626:	e00d      	b.n	800a644 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	885b      	ldrh	r3, [r3, #2]
 800a62c:	0a1b      	lsrs	r3, r3, #8
 800a62e:	b29b      	uxth	r3, r3
 800a630:	2b21      	cmp	r3, #33	; 0x21
 800a632:	d107      	bne.n	800a644 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800a634:	4b26      	ldr	r3, [pc, #152]	; (800a6d0 <USBD_CUSTOM_HID_Setup+0x230>)
 800a636:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	88db      	ldrh	r3, [r3, #6]
 800a63c:	2b09      	cmp	r3, #9
 800a63e:	bf28      	it	cs
 800a640:	2309      	movcs	r3, #9
 800a642:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800a644:	8bfb      	ldrh	r3, [r7, #30]
 800a646:	461a      	mov	r2, r3
 800a648:	69b9      	ldr	r1, [r7, #24]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f001 fc44 	bl	800bed8 <USBD_CtlSendData>
          break;
 800a650:	e030      	b.n	800a6b4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	d107      	bne.n	800a66e <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	3348      	adds	r3, #72	; 0x48
 800a662:	2201      	movs	r2, #1
 800a664:	4619      	mov	r1, r3
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f001 fc36 	bl	800bed8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a66c:	e022      	b.n	800a6b4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800a66e:	6839      	ldr	r1, [r7, #0]
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f001 fbc0 	bl	800bdf6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a676:	2303      	movs	r3, #3
 800a678:	75fb      	strb	r3, [r7, #23]
          break;
 800a67a:	e01b      	b.n	800a6b4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a682:	b2db      	uxtb	r3, r3
 800a684:	2b03      	cmp	r3, #3
 800a686:	d106      	bne.n	800a696 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	885b      	ldrh	r3, [r3, #2]
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	461a      	mov	r2, r3
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a694:	e00e      	b.n	800a6b4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f001 fbac 	bl	800bdf6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	75fb      	strb	r3, [r7, #23]
          break;
 800a6a2:	e007      	b.n	800a6b4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a6a4:	6839      	ldr	r1, [r7, #0]
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f001 fba5 	bl	800bdf6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	75fb      	strb	r3, [r7, #23]
          break;
 800a6b0:	e000      	b.n	800a6b4 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 800a6b2:	bf00      	nop
      }
      break;
 800a6b4:	e006      	b.n	800a6c4 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800a6b6:	6839      	ldr	r1, [r7, #0]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f001 fb9c 	bl	800bdf6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a6c2:	bf00      	nop
  }
  return (uint8_t)ret;
 800a6c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3720      	adds	r7, #32
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	20000078 	.word	0x20000078

0800a6d4 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	32b0      	adds	r2, #176	; 0xb0
 800a6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d101      	bne.n	800a6f8 <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	e021      	b.n	800a73c <USBD_CUSTOM_HID_SendReport+0x68>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	32b0      	adds	r2, #176	; 0xb0
 800a702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a706:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	2b03      	cmp	r3, #3
 800a712:	d112      	bne.n	800a73a <USBD_CUSTOM_HID_SendReport+0x66>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d10b      	bne.n	800a736 <USBD_CUSTOM_HID_SendReport+0x62>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 800a726:	4b07      	ldr	r3, [pc, #28]	; (800a744 <USBD_CUSTOM_HID_SendReport+0x70>)
 800a728:	7819      	ldrb	r1, [r3, #0]
 800a72a:	88fb      	ldrh	r3, [r7, #6]
 800a72c:	68ba      	ldr	r2, [r7, #8]
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f002 fddb 	bl	800d2ea <USBD_LL_Transmit>
 800a734:	e001      	b.n	800a73a <USBD_CUSTOM_HID_SendReport+0x66>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800a736:	2301      	movs	r3, #1
 800a738:	e000      	b.n	800a73c <USBD_CUSTOM_HID_SendReport+0x68>
    }
  }
  return (uint8_t)USBD_OK;
 800a73a:	2300      	movs	r3, #0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	2000008e 	.word	0x2000008e

0800a748 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800a750:	2181      	movs	r1, #129	; 0x81
 800a752:	4815      	ldr	r0, [pc, #84]	; (800a7a8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800a754:	f000 fd17 	bl	800b186 <USBD_GetEpDesc>
 800a758:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800a75a:	2101      	movs	r1, #1
 800a75c:	4812      	ldr	r0, [pc, #72]	; (800a7a8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800a75e:	f000 fd12 	bl	800b186 <USBD_GetEpDesc>
 800a762:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d009      	beq.n	800a77e <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a772:	711a      	strb	r2, [r3, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2205      	movs	r2, #5
 800a77c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d009      	beq.n	800a798 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	2200      	movs	r2, #0
 800a788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a78c:	711a      	strb	r2, [r3, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	2205      	movs	r2, #5
 800a796:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2229      	movs	r2, #41	; 0x29
 800a79c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800a79e:	4b02      	ldr	r3, [pc, #8]	; (800a7a8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	2000004c 	.word	0x2000004c

0800a7ac <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800a7b4:	2181      	movs	r1, #129	; 0x81
 800a7b6:	4815      	ldr	r0, [pc, #84]	; (800a80c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800a7b8:	f000 fce5 	bl	800b186 <USBD_GetEpDesc>
 800a7bc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800a7be:	2101      	movs	r1, #1
 800a7c0:	4812      	ldr	r0, [pc, #72]	; (800a80c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800a7c2:	f000 fce0 	bl	800b186 <USBD_GetEpDesc>
 800a7c6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d009      	beq.n	800a7e2 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7d6:	711a      	strb	r2, [r3, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2205      	movs	r2, #5
 800a7e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d009      	beq.n	800a7fc <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7f0:	711a      	strb	r2, [r3, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	2205      	movs	r2, #5
 800a7fa:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2229      	movs	r2, #41	; 0x29
 800a800:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800a802:	4b02      	ldr	r3, [pc, #8]	; (800a80c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	2000004c 	.word	0x2000004c

0800a810 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800a818:	2181      	movs	r1, #129	; 0x81
 800a81a:	4815      	ldr	r0, [pc, #84]	; (800a870 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800a81c:	f000 fcb3 	bl	800b186 <USBD_GetEpDesc>
 800a820:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800a822:	2101      	movs	r1, #1
 800a824:	4812      	ldr	r0, [pc, #72]	; (800a870 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800a826:	f000 fcae 	bl	800b186 <USBD_GetEpDesc>
 800a82a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d009      	beq.n	800a846 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2200      	movs	r2, #0
 800a836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a83a:	711a      	strb	r2, [r3, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2205      	movs	r2, #5
 800a844:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d009      	beq.n	800a860 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	2200      	movs	r2, #0
 800a850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a854:	711a      	strb	r2, [r3, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	2205      	movs	r2, #5
 800a85e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2229      	movs	r2, #41	; 0x29
 800a864:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800a866:	4b02      	ldr	r3, [pc, #8]	; (800a870 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3710      	adds	r7, #16
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	2000004c 	.word	0x2000004c

0800a874 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	460b      	mov	r3, r1
 800a87e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	32b0      	adds	r2, #176	; 0xb0
 800a88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	32b0      	adds	r2, #176	; 0xb0
 800a8b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a8c0:	2303      	movs	r3, #3
 800a8c2:	e017      	b.n	800a8f4 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	32b0      	adds	r2, #176	; 0xb0
 800a8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d2:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	33b0      	adds	r3, #176	; 0xb0
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	4413      	add	r3, r2
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	7810      	ldrb	r0, [r2, #0]
 800a8ea:	68fa      	ldr	r2, [r7, #12]
 800a8ec:	7852      	ldrb	r2, [r2, #1]
 800a8ee:	4611      	mov	r1, r2
 800a8f0:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	32b0      	adds	r2, #176	; 0xb0
 800a90e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d101      	bne.n	800a91a <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a916:	2303      	movs	r3, #3
 800a918:	e00f      	b.n	800a93a <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	32b0      	adds	r2, #176	; 0xb0
 800a924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a928:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800a92a:	4b06      	ldr	r3, [pc, #24]	; (800a944 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 800a92c:	7819      	ldrb	r1, [r3, #0]
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	2340      	movs	r3, #64	; 0x40
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f002 fcfa 	bl	800d32c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	2000008f 	.word	0x2000008f

0800a948 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	32b0      	adds	r2, #176	; 0xb0
 800a95a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a95e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d101      	bne.n	800a96a <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a966:	2303      	movs	r3, #3
 800a968:	e016      	b.n	800a998 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d111      	bne.n	800a996 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	33b0      	adds	r3, #176	; 0xb0
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4413      	add	r3, r2
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	7810      	ldrb	r0, [r2, #0]
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	7852      	ldrb	r2, [r2, #1]
 800a98c:	4611      	mov	r1, r2
 800a98e:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	220a      	movs	r2, #10
 800a9ac:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800a9ae:	4b03      	ldr	r3, [pc, #12]	; (800a9bc <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	20000084 	.word	0x20000084

0800a9c0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d101      	bne.n	800a9d4 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	e009      	b.n	800a9e8 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	33b0      	adds	r3, #176	; 0xb0
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4413      	add	r3, r2
 800a9e2:	683a      	ldr	r2, [r7, #0]
 800a9e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b086      	sub	sp, #24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	4613      	mov	r3, r2
 800aa00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d101      	bne.n	800aa0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aa08:	2303      	movs	r3, #3
 800aa0a:	e01f      	b.n	800aa4c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d003      	beq.n	800aa32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2201      	movs	r2, #1
 800aa36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	79fa      	ldrb	r2, [r7, #7]
 800aa3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f002 fb1d 	bl	800d080 <USBD_LL_Init>
 800aa46:	4603      	mov	r3, r0
 800aa48:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3718      	adds	r7, #24
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d101      	bne.n	800aa6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aa68:	2303      	movs	r3, #3
 800aa6a:	e025      	b.n	800aab8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	683a      	ldr	r2, [r7, #0]
 800aa70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	32ae      	adds	r2, #174	; 0xae
 800aa7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d00f      	beq.n	800aaa8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	32ae      	adds	r2, #174	; 0xae
 800aa92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa98:	f107 020e 	add.w	r2, r7, #14
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	4798      	blx	r3
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800aaae:	1c5a      	adds	r2, r3, #1
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f002 fb25 	bl	800d118 <USBD_LL_Start>
 800aace:	4603      	mov	r3, r0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aae0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	370c      	adds	r7, #12
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b084      	sub	sp, #16
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d009      	beq.n	800ab1c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	78fa      	ldrb	r2, [r7, #3]
 800ab12:	4611      	mov	r1, r2
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	4798      	blx	r3
 800ab18:	4603      	mov	r3, r0
 800ab1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b084      	sub	sp, #16
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
 800ab2e:	460b      	mov	r3, r1
 800ab30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab32:	2300      	movs	r3, #0
 800ab34:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	78fa      	ldrb	r2, [r7, #3]
 800ab40:	4611      	mov	r1, r2
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	4798      	blx	r3
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d001      	beq.n	800ab50 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b084      	sub	sp, #16
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f001 f908 	bl	800bd82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2201      	movs	r2, #1
 800ab76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ab80:	461a      	mov	r2, r3
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab8e:	f003 031f 	and.w	r3, r3, #31
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	d01a      	beq.n	800abcc <USBD_LL_SetupStage+0x72>
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	d822      	bhi.n	800abe0 <USBD_LL_SetupStage+0x86>
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d002      	beq.n	800aba4 <USBD_LL_SetupStage+0x4a>
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d00a      	beq.n	800abb8 <USBD_LL_SetupStage+0x5e>
 800aba2:	e01d      	b.n	800abe0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abaa:	4619      	mov	r1, r3
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 fb5f 	bl	800b270 <USBD_StdDevReq>
 800abb2:	4603      	mov	r3, r0
 800abb4:	73fb      	strb	r3, [r7, #15]
      break;
 800abb6:	e020      	b.n	800abfa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abbe:	4619      	mov	r1, r3
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fbc7 	bl	800b354 <USBD_StdItfReq>
 800abc6:	4603      	mov	r3, r0
 800abc8:	73fb      	strb	r3, [r7, #15]
      break;
 800abca:	e016      	b.n	800abfa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abd2:	4619      	mov	r1, r3
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fc29 	bl	800b42c <USBD_StdEPReq>
 800abda:	4603      	mov	r3, r0
 800abdc:	73fb      	strb	r3, [r7, #15]
      break;
 800abde:	e00c      	b.n	800abfa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800abe6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800abea:	b2db      	uxtb	r3, r3
 800abec:	4619      	mov	r1, r3
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f002 faf2 	bl	800d1d8 <USBD_LL_StallEP>
 800abf4:	4603      	mov	r3, r0
 800abf6:	73fb      	strb	r3, [r7, #15]
      break;
 800abf8:	bf00      	nop
  }

  return ret;
 800abfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3710      	adds	r7, #16
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b086      	sub	sp, #24
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	607a      	str	r2, [r7, #4]
 800ac10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac12:	2300      	movs	r3, #0
 800ac14:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ac16:	7afb      	ldrb	r3, [r7, #11]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d16e      	bne.n	800acfa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ac22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac2a:	2b03      	cmp	r3, #3
 800ac2c:	f040 8098 	bne.w	800ad60 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	689a      	ldr	r2, [r3, #8]
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d913      	bls.n	800ac64 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	689a      	ldr	r2, [r3, #8]
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	1ad2      	subs	r2, r2, r3
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	68da      	ldr	r2, [r3, #12]
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	4293      	cmp	r3, r2
 800ac54:	bf28      	it	cs
 800ac56:	4613      	movcs	r3, r2
 800ac58:	461a      	mov	r2, r3
 800ac5a:	6879      	ldr	r1, [r7, #4]
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f001 f984 	bl	800bf6a <USBD_CtlContinueRx>
 800ac62:	e07d      	b.n	800ad60 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac6a:	f003 031f 	and.w	r3, r3, #31
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d014      	beq.n	800ac9c <USBD_LL_DataOutStage+0x98>
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	d81d      	bhi.n	800acb2 <USBD_LL_DataOutStage+0xae>
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d002      	beq.n	800ac80 <USBD_LL_DataOutStage+0x7c>
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d003      	beq.n	800ac86 <USBD_LL_DataOutStage+0x82>
 800ac7e:	e018      	b.n	800acb2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ac80:	2300      	movs	r3, #0
 800ac82:	75bb      	strb	r3, [r7, #22]
            break;
 800ac84:	e018      	b.n	800acb8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	4619      	mov	r1, r3
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f000 fa5e 	bl	800b152 <USBD_CoreFindIF>
 800ac96:	4603      	mov	r3, r0
 800ac98:	75bb      	strb	r3, [r7, #22]
            break;
 800ac9a:	e00d      	b.n	800acb8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	4619      	mov	r1, r3
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f000 fa60 	bl	800b16c <USBD_CoreFindEP>
 800acac:	4603      	mov	r3, r0
 800acae:	75bb      	strb	r3, [r7, #22]
            break;
 800acb0:	e002      	b.n	800acb8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800acb2:	2300      	movs	r3, #0
 800acb4:	75bb      	strb	r3, [r7, #22]
            break;
 800acb6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800acb8:	7dbb      	ldrb	r3, [r7, #22]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d119      	bne.n	800acf2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	2b03      	cmp	r3, #3
 800acc8:	d113      	bne.n	800acf2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800acca:	7dba      	ldrb	r2, [r7, #22]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	32ae      	adds	r2, #174	; 0xae
 800acd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00b      	beq.n	800acf2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800acda:	7dba      	ldrb	r2, [r7, #22]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ace2:	7dba      	ldrb	r2, [r7, #22]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	32ae      	adds	r2, #174	; 0xae
 800ace8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f001 f94a 	bl	800bf8c <USBD_CtlSendStatus>
 800acf8:	e032      	b.n	800ad60 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800acfa:	7afb      	ldrb	r3, [r7, #11]
 800acfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	4619      	mov	r1, r3
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f000 fa31 	bl	800b16c <USBD_CoreFindEP>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad0e:	7dbb      	ldrb	r3, [r7, #22]
 800ad10:	2bff      	cmp	r3, #255	; 0xff
 800ad12:	d025      	beq.n	800ad60 <USBD_LL_DataOutStage+0x15c>
 800ad14:	7dbb      	ldrb	r3, [r7, #22]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d122      	bne.n	800ad60 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	d117      	bne.n	800ad56 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ad26:	7dba      	ldrb	r2, [r7, #22]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	32ae      	adds	r2, #174	; 0xae
 800ad2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad30:	699b      	ldr	r3, [r3, #24]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00f      	beq.n	800ad56 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ad36:	7dba      	ldrb	r2, [r7, #22]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ad3e:	7dba      	ldrb	r2, [r7, #22]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	32ae      	adds	r2, #174	; 0xae
 800ad44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad48:	699b      	ldr	r3, [r3, #24]
 800ad4a:	7afa      	ldrb	r2, [r7, #11]
 800ad4c:	4611      	mov	r1, r2
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	4798      	blx	r3
 800ad52:	4603      	mov	r3, r0
 800ad54:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ad56:	7dfb      	ldrb	r3, [r7, #23]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d001      	beq.n	800ad60 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ad5c:	7dfb      	ldrb	r3, [r7, #23]
 800ad5e:	e000      	b.n	800ad62 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3718      	adds	r7, #24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b086      	sub	sp, #24
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	60f8      	str	r0, [r7, #12]
 800ad72:	460b      	mov	r3, r1
 800ad74:	607a      	str	r2, [r7, #4]
 800ad76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ad78:	7afb      	ldrb	r3, [r7, #11]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d16f      	bne.n	800ae5e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	3314      	adds	r3, #20
 800ad82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d15a      	bne.n	800ae44 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	689a      	ldr	r2, [r3, #8]
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d914      	bls.n	800adc4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	689a      	ldr	r2, [r3, #8]
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	1ad2      	subs	r2, r2, r3
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	461a      	mov	r2, r3
 800adae:	6879      	ldr	r1, [r7, #4]
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f001 f8ac 	bl	800bf0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adb6:	2300      	movs	r3, #0
 800adb8:	2200      	movs	r2, #0
 800adba:	2100      	movs	r1, #0
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f002 fab5 	bl	800d32c <USBD_LL_PrepareReceive>
 800adc2:	e03f      	b.n	800ae44 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	68da      	ldr	r2, [r3, #12]
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d11c      	bne.n	800ae0a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	685a      	ldr	r2, [r3, #4]
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800add8:	429a      	cmp	r2, r3
 800adda:	d316      	bcc.n	800ae0a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d20f      	bcs.n	800ae0a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800adea:	2200      	movs	r2, #0
 800adec:	2100      	movs	r1, #0
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f001 f88d 	bl	800bf0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adfc:	2300      	movs	r3, #0
 800adfe:	2200      	movs	r2, #0
 800ae00:	2100      	movs	r1, #0
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f002 fa92 	bl	800d32c <USBD_LL_PrepareReceive>
 800ae08:	e01c      	b.n	800ae44 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	2b03      	cmp	r3, #3
 800ae14:	d10f      	bne.n	800ae36 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d009      	beq.n	800ae36 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae36:	2180      	movs	r1, #128	; 0x80
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f002 f9cd 	bl	800d1d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f001 f8b7 	bl	800bfb2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d03a      	beq.n	800aec4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f7ff fe42 	bl	800aad8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ae5c:	e032      	b.n	800aec4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ae5e:	7afb      	ldrb	r3, [r7, #11]
 800ae60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	4619      	mov	r1, r3
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f000 f97f 	bl	800b16c <USBD_CoreFindEP>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae72:	7dfb      	ldrb	r3, [r7, #23]
 800ae74:	2bff      	cmp	r3, #255	; 0xff
 800ae76:	d025      	beq.n	800aec4 <USBD_LL_DataInStage+0x15a>
 800ae78:	7dfb      	ldrb	r3, [r7, #23]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d122      	bne.n	800aec4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	d11c      	bne.n	800aec4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ae8a:	7dfa      	ldrb	r2, [r7, #23]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	32ae      	adds	r2, #174	; 0xae
 800ae90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae94:	695b      	ldr	r3, [r3, #20]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d014      	beq.n	800aec4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ae9a:	7dfa      	ldrb	r2, [r7, #23]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aea2:	7dfa      	ldrb	r2, [r7, #23]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	32ae      	adds	r2, #174	; 0xae
 800aea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeac:	695b      	ldr	r3, [r3, #20]
 800aeae:	7afa      	ldrb	r2, [r7, #11]
 800aeb0:	4611      	mov	r1, r2
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	4798      	blx	r3
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aeba:	7dbb      	ldrb	r3, [r7, #22]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d001      	beq.n	800aec4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aec0:	7dbb      	ldrb	r3, [r7, #22]
 800aec2:	e000      	b.n	800aec6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3718      	adds	r7, #24
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b084      	sub	sp, #16
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2201      	movs	r2, #1
 800aede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af06:	2b00      	cmp	r3, #0
 800af08:	d014      	beq.n	800af34 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00e      	beq.n	800af34 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	6852      	ldr	r2, [r2, #4]
 800af22:	b2d2      	uxtb	r2, r2
 800af24:	4611      	mov	r1, r2
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	4798      	blx	r3
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800af30:	2303      	movs	r3, #3
 800af32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af34:	2340      	movs	r3, #64	; 0x40
 800af36:	2200      	movs	r2, #0
 800af38:	2100      	movs	r1, #0
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f002 f907 	bl	800d14e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2240      	movs	r2, #64	; 0x40
 800af4c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af50:	2340      	movs	r3, #64	; 0x40
 800af52:	2200      	movs	r2, #0
 800af54:	2180      	movs	r1, #128	; 0x80
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f002 f8f9 	bl	800d14e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2201      	movs	r2, #1
 800af60:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2240      	movs	r2, #64	; 0x40
 800af66:	621a      	str	r2, [r3, #32]

  return ret;
 800af68:	7bfb      	ldrb	r3, [r7, #15]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800af72:	b480      	push	{r7}
 800af74:	b083      	sub	sp, #12
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
 800af7a:	460b      	mov	r3, r1
 800af7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	78fa      	ldrb	r2, [r7, #3]
 800af82:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	370c      	adds	r7, #12
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr

0800af92 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800af92:	b480      	push	{r7}
 800af94:	b083      	sub	sp, #12
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afa0:	b2da      	uxtb	r2, r3
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2204      	movs	r2, #4
 800afac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	370c      	adds	r7, #12
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800afbe:	b480      	push	{r7}
 800afc0:	b083      	sub	sp, #12
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	2b04      	cmp	r3, #4
 800afd0:	d106      	bne.n	800afe0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800afd8:	b2da      	uxtb	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	370c      	adds	r7, #12
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b082      	sub	sp, #8
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800affc:	b2db      	uxtb	r3, r3
 800affe:	2b03      	cmp	r3, #3
 800b000:	d110      	bne.n	800b024 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00b      	beq.n	800b024 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b012:	69db      	ldr	r3, [r3, #28]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d005      	beq.n	800b024 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b01e:	69db      	ldr	r3, [r3, #28]
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b082      	sub	sp, #8
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	460b      	mov	r3, r1
 800b038:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	32ae      	adds	r2, #174	; 0xae
 800b044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d101      	bne.n	800b050 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b04c:	2303      	movs	r3, #3
 800b04e:	e01c      	b.n	800b08a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b056:	b2db      	uxtb	r3, r3
 800b058:	2b03      	cmp	r3, #3
 800b05a:	d115      	bne.n	800b088 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	32ae      	adds	r2, #174	; 0xae
 800b066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06a:	6a1b      	ldr	r3, [r3, #32]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00b      	beq.n	800b088 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	32ae      	adds	r2, #174	; 0xae
 800b07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b07e:	6a1b      	ldr	r3, [r3, #32]
 800b080:	78fa      	ldrb	r2, [r7, #3]
 800b082:	4611      	mov	r1, r2
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3708      	adds	r7, #8
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b082      	sub	sp, #8
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
 800b09a:	460b      	mov	r3, r1
 800b09c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	32ae      	adds	r2, #174	; 0xae
 800b0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d101      	bne.n	800b0b4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e01c      	b.n	800b0ee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	2b03      	cmp	r3, #3
 800b0be:	d115      	bne.n	800b0ec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	32ae      	adds	r2, #174	; 0xae
 800b0ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00b      	beq.n	800b0ec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	32ae      	adds	r2, #174	; 0xae
 800b0de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e4:	78fa      	ldrb	r2, [r7, #3]
 800b0e6:	4611      	mov	r1, r2
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b0f6:	b480      	push	{r7}
 800b0f8:	b083      	sub	sp, #12
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b114:	2300      	movs	r3, #0
 800b116:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00e      	beq.n	800b148 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	6852      	ldr	r2, [r2, #4]
 800b136:	b2d2      	uxtb	r2, r2
 800b138:	4611      	mov	r1, r2
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	4798      	blx	r3
 800b13e:	4603      	mov	r3, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d001      	beq.n	800b148 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b144:	2303      	movs	r3, #3
 800b146:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b148:	7bfb      	ldrb	r3, [r7, #15]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3710      	adds	r7, #16
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b152:	b480      	push	{r7}
 800b154:	b083      	sub	sp, #12
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
 800b15a:	460b      	mov	r3, r1
 800b15c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b15e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b160:	4618      	mov	r0, r3
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	460b      	mov	r3, r1
 800b176:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b178:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	370c      	adds	r7, #12
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr

0800b186 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b086      	sub	sp, #24
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	460b      	mov	r3, r1
 800b190:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b19a:	2300      	movs	r3, #0
 800b19c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	885b      	ldrh	r3, [r3, #2]
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d920      	bls.n	800b1f0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b1b6:	e013      	b.n	800b1e0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b1b8:	f107 030a 	add.w	r3, r7, #10
 800b1bc:	4619      	mov	r1, r3
 800b1be:	6978      	ldr	r0, [r7, #20]
 800b1c0:	f000 f81b 	bl	800b1fa <USBD_GetNextDesc>
 800b1c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	785b      	ldrb	r3, [r3, #1]
 800b1ca:	2b05      	cmp	r3, #5
 800b1cc:	d108      	bne.n	800b1e0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	789b      	ldrb	r3, [r3, #2]
 800b1d6:	78fa      	ldrb	r2, [r7, #3]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d008      	beq.n	800b1ee <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	885b      	ldrh	r3, [r3, #2]
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	897b      	ldrh	r3, [r7, #10]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d8e5      	bhi.n	800b1b8 <USBD_GetEpDesc+0x32>
 800b1ec:	e000      	b.n	800b1f0 <USBD_GetEpDesc+0x6a>
          break;
 800b1ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b1f0:	693b      	ldr	r3, [r7, #16]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3718      	adds	r7, #24
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b1fa:	b480      	push	{r7}
 800b1fc:	b085      	sub	sp, #20
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
 800b202:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	881a      	ldrh	r2, [r3, #0]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	b29b      	uxth	r3, r3
 800b212:	4413      	add	r3, r2
 800b214:	b29a      	uxth	r2, r3
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	461a      	mov	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	4413      	add	r3, r2
 800b224:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b226:	68fb      	ldr	r3, [r7, #12]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3714      	adds	r7, #20
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b234:	b480      	push	{r7}
 800b236:	b087      	sub	sp, #28
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	3301      	adds	r3, #1
 800b24a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b252:	8a3b      	ldrh	r3, [r7, #16]
 800b254:	021b      	lsls	r3, r3, #8
 800b256:	b21a      	sxth	r2, r3
 800b258:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b25c:	4313      	orrs	r3, r2
 800b25e:	b21b      	sxth	r3, r3
 800b260:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b262:	89fb      	ldrh	r3, [r7, #14]
}
 800b264:	4618      	mov	r0, r3
 800b266:	371c      	adds	r7, #28
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b27a:	2300      	movs	r3, #0
 800b27c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b286:	2b40      	cmp	r3, #64	; 0x40
 800b288:	d005      	beq.n	800b296 <USBD_StdDevReq+0x26>
 800b28a:	2b40      	cmp	r3, #64	; 0x40
 800b28c:	d857      	bhi.n	800b33e <USBD_StdDevReq+0xce>
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00f      	beq.n	800b2b2 <USBD_StdDevReq+0x42>
 800b292:	2b20      	cmp	r3, #32
 800b294:	d153      	bne.n	800b33e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	32ae      	adds	r2, #174	; 0xae
 800b2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a4:	689b      	ldr	r3, [r3, #8]
 800b2a6:	6839      	ldr	r1, [r7, #0]
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	4798      	blx	r3
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b2b0:	e04a      	b.n	800b348 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	785b      	ldrb	r3, [r3, #1]
 800b2b6:	2b09      	cmp	r3, #9
 800b2b8:	d83b      	bhi.n	800b332 <USBD_StdDevReq+0xc2>
 800b2ba:	a201      	add	r2, pc, #4	; (adr r2, 800b2c0 <USBD_StdDevReq+0x50>)
 800b2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c0:	0800b315 	.word	0x0800b315
 800b2c4:	0800b329 	.word	0x0800b329
 800b2c8:	0800b333 	.word	0x0800b333
 800b2cc:	0800b31f 	.word	0x0800b31f
 800b2d0:	0800b333 	.word	0x0800b333
 800b2d4:	0800b2f3 	.word	0x0800b2f3
 800b2d8:	0800b2e9 	.word	0x0800b2e9
 800b2dc:	0800b333 	.word	0x0800b333
 800b2e0:	0800b30b 	.word	0x0800b30b
 800b2e4:	0800b2fd 	.word	0x0800b2fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b2e8:	6839      	ldr	r1, [r7, #0]
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fa3c 	bl	800b768 <USBD_GetDescriptor>
          break;
 800b2f0:	e024      	b.n	800b33c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b2f2:	6839      	ldr	r1, [r7, #0]
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 fba1 	bl	800ba3c <USBD_SetAddress>
          break;
 800b2fa:	e01f      	b.n	800b33c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 fbe0 	bl	800bac4 <USBD_SetConfig>
 800b304:	4603      	mov	r3, r0
 800b306:	73fb      	strb	r3, [r7, #15]
          break;
 800b308:	e018      	b.n	800b33c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b30a:	6839      	ldr	r1, [r7, #0]
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fc83 	bl	800bc18 <USBD_GetConfig>
          break;
 800b312:	e013      	b.n	800b33c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fcb4 	bl	800bc84 <USBD_GetStatus>
          break;
 800b31c:	e00e      	b.n	800b33c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b31e:	6839      	ldr	r1, [r7, #0]
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 fce3 	bl	800bcec <USBD_SetFeature>
          break;
 800b326:	e009      	b.n	800b33c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fd07 	bl	800bd3e <USBD_ClrFeature>
          break;
 800b330:	e004      	b.n	800b33c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b332:	6839      	ldr	r1, [r7, #0]
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 fd5e 	bl	800bdf6 <USBD_CtlError>
          break;
 800b33a:	bf00      	nop
      }
      break;
 800b33c:	e004      	b.n	800b348 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b33e:	6839      	ldr	r1, [r7, #0]
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 fd58 	bl	800bdf6 <USBD_CtlError>
      break;
 800b346:	bf00      	nop
  }

  return ret;
 800b348:	7bfb      	ldrb	r3, [r7, #15]
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop

0800b354 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b36a:	2b40      	cmp	r3, #64	; 0x40
 800b36c:	d005      	beq.n	800b37a <USBD_StdItfReq+0x26>
 800b36e:	2b40      	cmp	r3, #64	; 0x40
 800b370:	d852      	bhi.n	800b418 <USBD_StdItfReq+0xc4>
 800b372:	2b00      	cmp	r3, #0
 800b374:	d001      	beq.n	800b37a <USBD_StdItfReq+0x26>
 800b376:	2b20      	cmp	r3, #32
 800b378:	d14e      	bne.n	800b418 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b380:	b2db      	uxtb	r3, r3
 800b382:	3b01      	subs	r3, #1
 800b384:	2b02      	cmp	r3, #2
 800b386:	d840      	bhi.n	800b40a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	889b      	ldrh	r3, [r3, #4]
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d836      	bhi.n	800b400 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	889b      	ldrh	r3, [r3, #4]
 800b396:	b2db      	uxtb	r3, r3
 800b398:	4619      	mov	r1, r3
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f7ff fed9 	bl	800b152 <USBD_CoreFindIF>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3a4:	7bbb      	ldrb	r3, [r7, #14]
 800b3a6:	2bff      	cmp	r3, #255	; 0xff
 800b3a8:	d01d      	beq.n	800b3e6 <USBD_StdItfReq+0x92>
 800b3aa:	7bbb      	ldrb	r3, [r7, #14]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d11a      	bne.n	800b3e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b3b0:	7bba      	ldrb	r2, [r7, #14]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	32ae      	adds	r2, #174	; 0xae
 800b3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00f      	beq.n	800b3e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b3c0:	7bba      	ldrb	r2, [r7, #14]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b3c8:	7bba      	ldrb	r2, [r7, #14]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	32ae      	adds	r2, #174	; 0xae
 800b3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	6839      	ldr	r1, [r7, #0]
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	4798      	blx	r3
 800b3da:	4603      	mov	r3, r0
 800b3dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b3de:	e004      	b.n	800b3ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b3e0:	2303      	movs	r3, #3
 800b3e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b3e4:	e001      	b.n	800b3ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b3e6:	2303      	movs	r3, #3
 800b3e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	88db      	ldrh	r3, [r3, #6]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d110      	bne.n	800b414 <USBD_StdItfReq+0xc0>
 800b3f2:	7bfb      	ldrb	r3, [r7, #15]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d10d      	bne.n	800b414 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 fdc7 	bl	800bf8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b3fe:	e009      	b.n	800b414 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fcf7 	bl	800bdf6 <USBD_CtlError>
          break;
 800b408:	e004      	b.n	800b414 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b40a:	6839      	ldr	r1, [r7, #0]
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f000 fcf2 	bl	800bdf6 <USBD_CtlError>
          break;
 800b412:	e000      	b.n	800b416 <USBD_StdItfReq+0xc2>
          break;
 800b414:	bf00      	nop
      }
      break;
 800b416:	e004      	b.n	800b422 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b418:	6839      	ldr	r1, [r7, #0]
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fceb 	bl	800bdf6 <USBD_CtlError>
      break;
 800b420:	bf00      	nop
  }

  return ret;
 800b422:	7bfb      	ldrb	r3, [r7, #15]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b436:	2300      	movs	r3, #0
 800b438:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	889b      	ldrh	r3, [r3, #4]
 800b43e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b448:	2b40      	cmp	r3, #64	; 0x40
 800b44a:	d007      	beq.n	800b45c <USBD_StdEPReq+0x30>
 800b44c:	2b40      	cmp	r3, #64	; 0x40
 800b44e:	f200 817f 	bhi.w	800b750 <USBD_StdEPReq+0x324>
 800b452:	2b00      	cmp	r3, #0
 800b454:	d02a      	beq.n	800b4ac <USBD_StdEPReq+0x80>
 800b456:	2b20      	cmp	r3, #32
 800b458:	f040 817a 	bne.w	800b750 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b45c:	7bbb      	ldrb	r3, [r7, #14]
 800b45e:	4619      	mov	r1, r3
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f7ff fe83 	bl	800b16c <USBD_CoreFindEP>
 800b466:	4603      	mov	r3, r0
 800b468:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b46a:	7b7b      	ldrb	r3, [r7, #13]
 800b46c:	2bff      	cmp	r3, #255	; 0xff
 800b46e:	f000 8174 	beq.w	800b75a <USBD_StdEPReq+0x32e>
 800b472:	7b7b      	ldrb	r3, [r7, #13]
 800b474:	2b00      	cmp	r3, #0
 800b476:	f040 8170 	bne.w	800b75a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b47a:	7b7a      	ldrb	r2, [r7, #13]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b482:	7b7a      	ldrb	r2, [r7, #13]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	32ae      	adds	r2, #174	; 0xae
 800b488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f000 8163 	beq.w	800b75a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b494:	7b7a      	ldrb	r2, [r7, #13]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	32ae      	adds	r2, #174	; 0xae
 800b49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	6839      	ldr	r1, [r7, #0]
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	4798      	blx	r3
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b4aa:	e156      	b.n	800b75a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	785b      	ldrb	r3, [r3, #1]
 800b4b0:	2b03      	cmp	r3, #3
 800b4b2:	d008      	beq.n	800b4c6 <USBD_StdEPReq+0x9a>
 800b4b4:	2b03      	cmp	r3, #3
 800b4b6:	f300 8145 	bgt.w	800b744 <USBD_StdEPReq+0x318>
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f000 809b 	beq.w	800b5f6 <USBD_StdEPReq+0x1ca>
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d03c      	beq.n	800b53e <USBD_StdEPReq+0x112>
 800b4c4:	e13e      	b.n	800b744 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	2b02      	cmp	r3, #2
 800b4d0:	d002      	beq.n	800b4d8 <USBD_StdEPReq+0xac>
 800b4d2:	2b03      	cmp	r3, #3
 800b4d4:	d016      	beq.n	800b504 <USBD_StdEPReq+0xd8>
 800b4d6:	e02c      	b.n	800b532 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4d8:	7bbb      	ldrb	r3, [r7, #14]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00d      	beq.n	800b4fa <USBD_StdEPReq+0xce>
 800b4de:	7bbb      	ldrb	r3, [r7, #14]
 800b4e0:	2b80      	cmp	r3, #128	; 0x80
 800b4e2:	d00a      	beq.n	800b4fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4e4:	7bbb      	ldrb	r3, [r7, #14]
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f001 fe75 	bl	800d1d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4ee:	2180      	movs	r1, #128	; 0x80
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f001 fe71 	bl	800d1d8 <USBD_LL_StallEP>
 800b4f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4f8:	e020      	b.n	800b53c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fc7a 	bl	800bdf6 <USBD_CtlError>
              break;
 800b502:	e01b      	b.n	800b53c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	885b      	ldrh	r3, [r3, #2]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10e      	bne.n	800b52a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b50c:	7bbb      	ldrb	r3, [r7, #14]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00b      	beq.n	800b52a <USBD_StdEPReq+0xfe>
 800b512:	7bbb      	ldrb	r3, [r7, #14]
 800b514:	2b80      	cmp	r3, #128	; 0x80
 800b516:	d008      	beq.n	800b52a <USBD_StdEPReq+0xfe>
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	88db      	ldrh	r3, [r3, #6]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d104      	bne.n	800b52a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b520:	7bbb      	ldrb	r3, [r7, #14]
 800b522:	4619      	mov	r1, r3
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f001 fe57 	bl	800d1d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 fd2e 	bl	800bf8c <USBD_CtlSendStatus>

              break;
 800b530:	e004      	b.n	800b53c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b532:	6839      	ldr	r1, [r7, #0]
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 fc5e 	bl	800bdf6 <USBD_CtlError>
              break;
 800b53a:	bf00      	nop
          }
          break;
 800b53c:	e107      	b.n	800b74e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b544:	b2db      	uxtb	r3, r3
 800b546:	2b02      	cmp	r3, #2
 800b548:	d002      	beq.n	800b550 <USBD_StdEPReq+0x124>
 800b54a:	2b03      	cmp	r3, #3
 800b54c:	d016      	beq.n	800b57c <USBD_StdEPReq+0x150>
 800b54e:	e04b      	b.n	800b5e8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b550:	7bbb      	ldrb	r3, [r7, #14]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00d      	beq.n	800b572 <USBD_StdEPReq+0x146>
 800b556:	7bbb      	ldrb	r3, [r7, #14]
 800b558:	2b80      	cmp	r3, #128	; 0x80
 800b55a:	d00a      	beq.n	800b572 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b55c:	7bbb      	ldrb	r3, [r7, #14]
 800b55e:	4619      	mov	r1, r3
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f001 fe39 	bl	800d1d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b566:	2180      	movs	r1, #128	; 0x80
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f001 fe35 	bl	800d1d8 <USBD_LL_StallEP>
 800b56e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b570:	e040      	b.n	800b5f4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b572:	6839      	ldr	r1, [r7, #0]
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 fc3e 	bl	800bdf6 <USBD_CtlError>
              break;
 800b57a:	e03b      	b.n	800b5f4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	885b      	ldrh	r3, [r3, #2]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d136      	bne.n	800b5f2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b584:	7bbb      	ldrb	r3, [r7, #14]
 800b586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d004      	beq.n	800b598 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b58e:	7bbb      	ldrb	r3, [r7, #14]
 800b590:	4619      	mov	r1, r3
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f001 fe3f 	bl	800d216 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 fcf7 	bl	800bf8c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b59e:	7bbb      	ldrb	r3, [r7, #14]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f7ff fde2 	bl	800b16c <USBD_CoreFindEP>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b5ac:	7b7b      	ldrb	r3, [r7, #13]
 800b5ae:	2bff      	cmp	r3, #255	; 0xff
 800b5b0:	d01f      	beq.n	800b5f2 <USBD_StdEPReq+0x1c6>
 800b5b2:	7b7b      	ldrb	r3, [r7, #13]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d11c      	bne.n	800b5f2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b5b8:	7b7a      	ldrb	r2, [r7, #13]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b5c0:	7b7a      	ldrb	r2, [r7, #13]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	32ae      	adds	r2, #174	; 0xae
 800b5c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d010      	beq.n	800b5f2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b5d0:	7b7a      	ldrb	r2, [r7, #13]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	32ae      	adds	r2, #174	; 0xae
 800b5d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	6839      	ldr	r1, [r7, #0]
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	4798      	blx	r3
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b5e6:	e004      	b.n	800b5f2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b5e8:	6839      	ldr	r1, [r7, #0]
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fc03 	bl	800bdf6 <USBD_CtlError>
              break;
 800b5f0:	e000      	b.n	800b5f4 <USBD_StdEPReq+0x1c8>
              break;
 800b5f2:	bf00      	nop
          }
          break;
 800b5f4:	e0ab      	b.n	800b74e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d002      	beq.n	800b608 <USBD_StdEPReq+0x1dc>
 800b602:	2b03      	cmp	r3, #3
 800b604:	d032      	beq.n	800b66c <USBD_StdEPReq+0x240>
 800b606:	e097      	b.n	800b738 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b608:	7bbb      	ldrb	r3, [r7, #14]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d007      	beq.n	800b61e <USBD_StdEPReq+0x1f2>
 800b60e:	7bbb      	ldrb	r3, [r7, #14]
 800b610:	2b80      	cmp	r3, #128	; 0x80
 800b612:	d004      	beq.n	800b61e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fbed 	bl	800bdf6 <USBD_CtlError>
                break;
 800b61c:	e091      	b.n	800b742 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b61e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b622:	2b00      	cmp	r3, #0
 800b624:	da0b      	bge.n	800b63e <USBD_StdEPReq+0x212>
 800b626:	7bbb      	ldrb	r3, [r7, #14]
 800b628:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b62c:	4613      	mov	r3, r2
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	4413      	add	r3, r2
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	3310      	adds	r3, #16
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	4413      	add	r3, r2
 800b63a:	3304      	adds	r3, #4
 800b63c:	e00b      	b.n	800b656 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b63e:	7bbb      	ldrb	r3, [r7, #14]
 800b640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b644:	4613      	mov	r3, r2
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	4413      	add	r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	4413      	add	r3, r2
 800b654:	3304      	adds	r3, #4
 800b656:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	2200      	movs	r2, #0
 800b65c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	2202      	movs	r2, #2
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 fc37 	bl	800bed8 <USBD_CtlSendData>
              break;
 800b66a:	e06a      	b.n	800b742 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b66c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b670:	2b00      	cmp	r3, #0
 800b672:	da11      	bge.n	800b698 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b674:	7bbb      	ldrb	r3, [r7, #14]
 800b676:	f003 020f 	and.w	r2, r3, #15
 800b67a:	6879      	ldr	r1, [r7, #4]
 800b67c:	4613      	mov	r3, r2
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	4413      	add	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	440b      	add	r3, r1
 800b686:	3324      	adds	r3, #36	; 0x24
 800b688:	881b      	ldrh	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d117      	bne.n	800b6be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b68e:	6839      	ldr	r1, [r7, #0]
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fbb0 	bl	800bdf6 <USBD_CtlError>
                  break;
 800b696:	e054      	b.n	800b742 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b698:	7bbb      	ldrb	r3, [r7, #14]
 800b69a:	f003 020f 	and.w	r2, r3, #15
 800b69e:	6879      	ldr	r1, [r7, #4]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	009b      	lsls	r3, r3, #2
 800b6a4:	4413      	add	r3, r2
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	440b      	add	r3, r1
 800b6aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b6ae:	881b      	ldrh	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d104      	bne.n	800b6be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b6b4:	6839      	ldr	r1, [r7, #0]
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fb9d 	bl	800bdf6 <USBD_CtlError>
                  break;
 800b6bc:	e041      	b.n	800b742 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	da0b      	bge.n	800b6de <USBD_StdEPReq+0x2b2>
 800b6c6:	7bbb      	ldrb	r3, [r7, #14]
 800b6c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	4413      	add	r3, r2
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	3310      	adds	r3, #16
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	4413      	add	r3, r2
 800b6da:	3304      	adds	r3, #4
 800b6dc:	e00b      	b.n	800b6f6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b6de:	7bbb      	ldrb	r3, [r7, #14]
 800b6e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	4413      	add	r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	3304      	adds	r3, #4
 800b6f6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b6f8:	7bbb      	ldrb	r3, [r7, #14]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d002      	beq.n	800b704 <USBD_StdEPReq+0x2d8>
 800b6fe:	7bbb      	ldrb	r3, [r7, #14]
 800b700:	2b80      	cmp	r3, #128	; 0x80
 800b702:	d103      	bne.n	800b70c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	2200      	movs	r2, #0
 800b708:	601a      	str	r2, [r3, #0]
 800b70a:	e00e      	b.n	800b72a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b70c:	7bbb      	ldrb	r3, [r7, #14]
 800b70e:	4619      	mov	r1, r3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f001 fd9f 	bl	800d254 <USBD_LL_IsStallEP>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d003      	beq.n	800b724 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	2201      	movs	r2, #1
 800b720:	601a      	str	r2, [r3, #0]
 800b722:	e002      	b.n	800b72a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	2200      	movs	r2, #0
 800b728:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	2202      	movs	r2, #2
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 fbd1 	bl	800bed8 <USBD_CtlSendData>
              break;
 800b736:	e004      	b.n	800b742 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b738:	6839      	ldr	r1, [r7, #0]
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fb5b 	bl	800bdf6 <USBD_CtlError>
              break;
 800b740:	bf00      	nop
          }
          break;
 800b742:	e004      	b.n	800b74e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b744:	6839      	ldr	r1, [r7, #0]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 fb55 	bl	800bdf6 <USBD_CtlError>
          break;
 800b74c:	bf00      	nop
      }
      break;
 800b74e:	e005      	b.n	800b75c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b750:	6839      	ldr	r1, [r7, #0]
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 fb4f 	bl	800bdf6 <USBD_CtlError>
      break;
 800b758:	e000      	b.n	800b75c <USBD_StdEPReq+0x330>
      break;
 800b75a:	bf00      	nop
  }

  return ret;
 800b75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
	...

0800b768 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b772:	2300      	movs	r3, #0
 800b774:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b776:	2300      	movs	r3, #0
 800b778:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b77a:	2300      	movs	r3, #0
 800b77c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	885b      	ldrh	r3, [r3, #2]
 800b782:	0a1b      	lsrs	r3, r3, #8
 800b784:	b29b      	uxth	r3, r3
 800b786:	3b01      	subs	r3, #1
 800b788:	2b06      	cmp	r3, #6
 800b78a:	f200 8128 	bhi.w	800b9de <USBD_GetDescriptor+0x276>
 800b78e:	a201      	add	r2, pc, #4	; (adr r2, 800b794 <USBD_GetDescriptor+0x2c>)
 800b790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b794:	0800b7b1 	.word	0x0800b7b1
 800b798:	0800b7c9 	.word	0x0800b7c9
 800b79c:	0800b809 	.word	0x0800b809
 800b7a0:	0800b9df 	.word	0x0800b9df
 800b7a4:	0800b9df 	.word	0x0800b9df
 800b7a8:	0800b97f 	.word	0x0800b97f
 800b7ac:	0800b9ab 	.word	0x0800b9ab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	7c12      	ldrb	r2, [r2, #16]
 800b7bc:	f107 0108 	add.w	r1, r7, #8
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	4798      	blx	r3
 800b7c4:	60f8      	str	r0, [r7, #12]
      break;
 800b7c6:	e112      	b.n	800b9ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	7c1b      	ldrb	r3, [r3, #16]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10d      	bne.n	800b7ec <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d8:	f107 0208 	add.w	r2, r7, #8
 800b7dc:	4610      	mov	r0, r2
 800b7de:	4798      	blx	r3
 800b7e0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	2202      	movs	r2, #2
 800b7e8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b7ea:	e100      	b.n	800b9ee <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	f107 0208 	add.w	r2, r7, #8
 800b7f8:	4610      	mov	r0, r2
 800b7fa:	4798      	blx	r3
 800b7fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	3301      	adds	r3, #1
 800b802:	2202      	movs	r2, #2
 800b804:	701a      	strb	r2, [r3, #0]
      break;
 800b806:	e0f2      	b.n	800b9ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	885b      	ldrh	r3, [r3, #2]
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	2b05      	cmp	r3, #5
 800b810:	f200 80ac 	bhi.w	800b96c <USBD_GetDescriptor+0x204>
 800b814:	a201      	add	r2, pc, #4	; (adr r2, 800b81c <USBD_GetDescriptor+0xb4>)
 800b816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b81a:	bf00      	nop
 800b81c:	0800b835 	.word	0x0800b835
 800b820:	0800b869 	.word	0x0800b869
 800b824:	0800b89d 	.word	0x0800b89d
 800b828:	0800b8d1 	.word	0x0800b8d1
 800b82c:	0800b905 	.word	0x0800b905
 800b830:	0800b939 	.word	0x0800b939
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00b      	beq.n	800b858 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	7c12      	ldrb	r2, [r2, #16]
 800b84c:	f107 0108 	add.w	r1, r7, #8
 800b850:	4610      	mov	r0, r2
 800b852:	4798      	blx	r3
 800b854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b856:	e091      	b.n	800b97c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 facb 	bl	800bdf6 <USBD_CtlError>
            err++;
 800b860:	7afb      	ldrb	r3, [r7, #11]
 800b862:	3301      	adds	r3, #1
 800b864:	72fb      	strb	r3, [r7, #11]
          break;
 800b866:	e089      	b.n	800b97c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00b      	beq.n	800b88c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	7c12      	ldrb	r2, [r2, #16]
 800b880:	f107 0108 	add.w	r1, r7, #8
 800b884:	4610      	mov	r0, r2
 800b886:	4798      	blx	r3
 800b888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b88a:	e077      	b.n	800b97c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b88c:	6839      	ldr	r1, [r7, #0]
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 fab1 	bl	800bdf6 <USBD_CtlError>
            err++;
 800b894:	7afb      	ldrb	r3, [r7, #11]
 800b896:	3301      	adds	r3, #1
 800b898:	72fb      	strb	r3, [r7, #11]
          break;
 800b89a:	e06f      	b.n	800b97c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00b      	beq.n	800b8c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	7c12      	ldrb	r2, [r2, #16]
 800b8b4:	f107 0108 	add.w	r1, r7, #8
 800b8b8:	4610      	mov	r0, r2
 800b8ba:	4798      	blx	r3
 800b8bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8be:	e05d      	b.n	800b97c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fa97 	bl	800bdf6 <USBD_CtlError>
            err++;
 800b8c8:	7afb      	ldrb	r3, [r7, #11]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b8ce:	e055      	b.n	800b97c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8d6:	691b      	ldr	r3, [r3, #16]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00b      	beq.n	800b8f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8e2:	691b      	ldr	r3, [r3, #16]
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	7c12      	ldrb	r2, [r2, #16]
 800b8e8:	f107 0108 	add.w	r1, r7, #8
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	4798      	blx	r3
 800b8f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8f2:	e043      	b.n	800b97c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8f4:	6839      	ldr	r1, [r7, #0]
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 fa7d 	bl	800bdf6 <USBD_CtlError>
            err++;
 800b8fc:	7afb      	ldrb	r3, [r7, #11]
 800b8fe:	3301      	adds	r3, #1
 800b900:	72fb      	strb	r3, [r7, #11]
          break;
 800b902:	e03b      	b.n	800b97c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b90a:	695b      	ldr	r3, [r3, #20]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00b      	beq.n	800b928 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b916:	695b      	ldr	r3, [r3, #20]
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	7c12      	ldrb	r2, [r2, #16]
 800b91c:	f107 0108 	add.w	r1, r7, #8
 800b920:	4610      	mov	r0, r2
 800b922:	4798      	blx	r3
 800b924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b926:	e029      	b.n	800b97c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b928:	6839      	ldr	r1, [r7, #0]
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 fa63 	bl	800bdf6 <USBD_CtlError>
            err++;
 800b930:	7afb      	ldrb	r3, [r7, #11]
 800b932:	3301      	adds	r3, #1
 800b934:	72fb      	strb	r3, [r7, #11]
          break;
 800b936:	e021      	b.n	800b97c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b93e:	699b      	ldr	r3, [r3, #24]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d00b      	beq.n	800b95c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b94a:	699b      	ldr	r3, [r3, #24]
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	7c12      	ldrb	r2, [r2, #16]
 800b950:	f107 0108 	add.w	r1, r7, #8
 800b954:	4610      	mov	r0, r2
 800b956:	4798      	blx	r3
 800b958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b95a:	e00f      	b.n	800b97c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 fa49 	bl	800bdf6 <USBD_CtlError>
            err++;
 800b964:	7afb      	ldrb	r3, [r7, #11]
 800b966:	3301      	adds	r3, #1
 800b968:	72fb      	strb	r3, [r7, #11]
          break;
 800b96a:	e007      	b.n	800b97c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b96c:	6839      	ldr	r1, [r7, #0]
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 fa41 	bl	800bdf6 <USBD_CtlError>
          err++;
 800b974:	7afb      	ldrb	r3, [r7, #11]
 800b976:	3301      	adds	r3, #1
 800b978:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b97a:	bf00      	nop
      }
      break;
 800b97c:	e037      	b.n	800b9ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	7c1b      	ldrb	r3, [r3, #16]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d109      	bne.n	800b99a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b98c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b98e:	f107 0208 	add.w	r2, r7, #8
 800b992:	4610      	mov	r0, r2
 800b994:	4798      	blx	r3
 800b996:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b998:	e029      	b.n	800b9ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b99a:	6839      	ldr	r1, [r7, #0]
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 fa2a 	bl	800bdf6 <USBD_CtlError>
        err++;
 800b9a2:	7afb      	ldrb	r3, [r7, #11]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	72fb      	strb	r3, [r7, #11]
      break;
 800b9a8:	e021      	b.n	800b9ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	7c1b      	ldrb	r3, [r3, #16]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d10d      	bne.n	800b9ce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ba:	f107 0208 	add.w	r2, r7, #8
 800b9be:	4610      	mov	r0, r2
 800b9c0:	4798      	blx	r3
 800b9c2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	2207      	movs	r2, #7
 800b9ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9cc:	e00f      	b.n	800b9ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b9ce:	6839      	ldr	r1, [r7, #0]
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 fa10 	bl	800bdf6 <USBD_CtlError>
        err++;
 800b9d6:	7afb      	ldrb	r3, [r7, #11]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	72fb      	strb	r3, [r7, #11]
      break;
 800b9dc:	e007      	b.n	800b9ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b9de:	6839      	ldr	r1, [r7, #0]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 fa08 	bl	800bdf6 <USBD_CtlError>
      err++;
 800b9e6:	7afb      	ldrb	r3, [r7, #11]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	72fb      	strb	r3, [r7, #11]
      break;
 800b9ec:	bf00      	nop
  }

  if (err != 0U)
 800b9ee:	7afb      	ldrb	r3, [r7, #11]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d11e      	bne.n	800ba32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	88db      	ldrh	r3, [r3, #6]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d016      	beq.n	800ba2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b9fc:	893b      	ldrh	r3, [r7, #8]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00e      	beq.n	800ba20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	88da      	ldrh	r2, [r3, #6]
 800ba06:	893b      	ldrh	r3, [r7, #8]
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	bf28      	it	cs
 800ba0c:	4613      	movcs	r3, r2
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba12:	893b      	ldrh	r3, [r7, #8]
 800ba14:	461a      	mov	r2, r3
 800ba16:	68f9      	ldr	r1, [r7, #12]
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 fa5d 	bl	800bed8 <USBD_CtlSendData>
 800ba1e:	e009      	b.n	800ba34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ba20:	6839      	ldr	r1, [r7, #0]
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f9e7 	bl	800bdf6 <USBD_CtlError>
 800ba28:	e004      	b.n	800ba34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 faae 	bl	800bf8c <USBD_CtlSendStatus>
 800ba30:	e000      	b.n	800ba34 <USBD_GetDescriptor+0x2cc>
    return;
 800ba32:	bf00      	nop
  }
}
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop

0800ba3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	889b      	ldrh	r3, [r3, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d131      	bne.n	800bab2 <USBD_SetAddress+0x76>
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	88db      	ldrh	r3, [r3, #6]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d12d      	bne.n	800bab2 <USBD_SetAddress+0x76>
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	885b      	ldrh	r3, [r3, #2]
 800ba5a:	2b7f      	cmp	r3, #127	; 0x7f
 800ba5c:	d829      	bhi.n	800bab2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	885b      	ldrh	r3, [r3, #2]
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	2b03      	cmp	r3, #3
 800ba74:	d104      	bne.n	800ba80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ba76:	6839      	ldr	r1, [r7, #0]
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 f9bc 	bl	800bdf6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba7e:	e01d      	b.n	800babc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	7bfa      	ldrb	r2, [r7, #15]
 800ba84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ba88:	7bfb      	ldrb	r3, [r7, #15]
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f001 fc0d 	bl	800d2ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 fa7a 	bl	800bf8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ba98:	7bfb      	ldrb	r3, [r7, #15]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d004      	beq.n	800baa8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2202      	movs	r2, #2
 800baa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baa6:	e009      	b.n	800babc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bab0:	e004      	b.n	800babc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bab2:	6839      	ldr	r1, [r7, #0]
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 f99e 	bl	800bdf6 <USBD_CtlError>
  }
}
 800baba:	bf00      	nop
 800babc:	bf00      	nop
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bace:	2300      	movs	r3, #0
 800bad0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	885b      	ldrh	r3, [r3, #2]
 800bad6:	b2da      	uxtb	r2, r3
 800bad8:	4b4e      	ldr	r3, [pc, #312]	; (800bc14 <USBD_SetConfig+0x150>)
 800bada:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800badc:	4b4d      	ldr	r3, [pc, #308]	; (800bc14 <USBD_SetConfig+0x150>)
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d905      	bls.n	800baf0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bae4:	6839      	ldr	r1, [r7, #0]
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 f985 	bl	800bdf6 <USBD_CtlError>
    return USBD_FAIL;
 800baec:	2303      	movs	r3, #3
 800baee:	e08c      	b.n	800bc0a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	2b02      	cmp	r3, #2
 800bafa:	d002      	beq.n	800bb02 <USBD_SetConfig+0x3e>
 800bafc:	2b03      	cmp	r3, #3
 800bafe:	d029      	beq.n	800bb54 <USBD_SetConfig+0x90>
 800bb00:	e075      	b.n	800bbee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bb02:	4b44      	ldr	r3, [pc, #272]	; (800bc14 <USBD_SetConfig+0x150>)
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d020      	beq.n	800bb4c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bb0a:	4b42      	ldr	r3, [pc, #264]	; (800bc14 <USBD_SetConfig+0x150>)
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	461a      	mov	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb14:	4b3f      	ldr	r3, [pc, #252]	; (800bc14 <USBD_SetConfig+0x150>)
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	4619      	mov	r1, r3
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7fe ffe7 	bl	800aaee <USBD_SetClassConfig>
 800bb20:	4603      	mov	r3, r0
 800bb22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bb24:	7bfb      	ldrb	r3, [r7, #15]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d008      	beq.n	800bb3c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bb2a:	6839      	ldr	r1, [r7, #0]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 f962 	bl	800bdf6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2202      	movs	r2, #2
 800bb36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb3a:	e065      	b.n	800bc08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 fa25 	bl	800bf8c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2203      	movs	r2, #3
 800bb46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bb4a:	e05d      	b.n	800bc08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 fa1d 	bl	800bf8c <USBD_CtlSendStatus>
      break;
 800bb52:	e059      	b.n	800bc08 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bb54:	4b2f      	ldr	r3, [pc, #188]	; (800bc14 <USBD_SetConfig+0x150>)
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d112      	bne.n	800bb82 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2202      	movs	r2, #2
 800bb60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bb64:	4b2b      	ldr	r3, [pc, #172]	; (800bc14 <USBD_SetConfig+0x150>)
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	461a      	mov	r2, r3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb6e:	4b29      	ldr	r3, [pc, #164]	; (800bc14 <USBD_SetConfig+0x150>)
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	4619      	mov	r1, r3
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f7fe ffd6 	bl	800ab26 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 fa06 	bl	800bf8c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb80:	e042      	b.n	800bc08 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bb82:	4b24      	ldr	r3, [pc, #144]	; (800bc14 <USBD_SetConfig+0x150>)
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	461a      	mov	r2, r3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d02a      	beq.n	800bbe6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	4619      	mov	r1, r3
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f7fe ffc4 	bl	800ab26 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bb9e:	4b1d      	ldr	r3, [pc, #116]	; (800bc14 <USBD_SetConfig+0x150>)
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	461a      	mov	r2, r3
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bba8:	4b1a      	ldr	r3, [pc, #104]	; (800bc14 <USBD_SetConfig+0x150>)
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	4619      	mov	r1, r3
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f7fe ff9d 	bl	800aaee <USBD_SetClassConfig>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bbb8:	7bfb      	ldrb	r3, [r7, #15]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d00f      	beq.n	800bbde <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bbbe:	6839      	ldr	r1, [r7, #0]
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 f918 	bl	800bdf6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	4619      	mov	r1, r3
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f7fe ffa9 	bl	800ab26 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2202      	movs	r2, #2
 800bbd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bbdc:	e014      	b.n	800bc08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 f9d4 	bl	800bf8c <USBD_CtlSendStatus>
      break;
 800bbe4:	e010      	b.n	800bc08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 f9d0 	bl	800bf8c <USBD_CtlSendStatus>
      break;
 800bbec:	e00c      	b.n	800bc08 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bbee:	6839      	ldr	r1, [r7, #0]
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 f900 	bl	800bdf6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bbf6:	4b07      	ldr	r3, [pc, #28]	; (800bc14 <USBD_SetConfig+0x150>)
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7fe ff92 	bl	800ab26 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bc02:	2303      	movs	r3, #3
 800bc04:	73fb      	strb	r3, [r7, #15]
      break;
 800bc06:	bf00      	nop
  }

  return ret;
 800bc08:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3710      	adds	r7, #16
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	20000468 	.word	0x20000468

0800bc18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	88db      	ldrh	r3, [r3, #6]
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d004      	beq.n	800bc34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bc2a:	6839      	ldr	r1, [r7, #0]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 f8e2 	bl	800bdf6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bc32:	e023      	b.n	800bc7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	2b02      	cmp	r3, #2
 800bc3e:	dc02      	bgt.n	800bc46 <USBD_GetConfig+0x2e>
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	dc03      	bgt.n	800bc4c <USBD_GetConfig+0x34>
 800bc44:	e015      	b.n	800bc72 <USBD_GetConfig+0x5a>
 800bc46:	2b03      	cmp	r3, #3
 800bc48:	d00b      	beq.n	800bc62 <USBD_GetConfig+0x4a>
 800bc4a:	e012      	b.n	800bc72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	3308      	adds	r3, #8
 800bc56:	2201      	movs	r2, #1
 800bc58:	4619      	mov	r1, r3
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 f93c 	bl	800bed8 <USBD_CtlSendData>
        break;
 800bc60:	e00c      	b.n	800bc7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	3304      	adds	r3, #4
 800bc66:	2201      	movs	r2, #1
 800bc68:	4619      	mov	r1, r3
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 f934 	bl	800bed8 <USBD_CtlSendData>
        break;
 800bc70:	e004      	b.n	800bc7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bc72:	6839      	ldr	r1, [r7, #0]
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f8be 	bl	800bdf6 <USBD_CtlError>
        break;
 800bc7a:	bf00      	nop
}
 800bc7c:	bf00      	nop
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	3b01      	subs	r3, #1
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d81e      	bhi.n	800bcda <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	88db      	ldrh	r3, [r3, #6]
 800bca0:	2b02      	cmp	r3, #2
 800bca2:	d004      	beq.n	800bcae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bca4:	6839      	ldr	r1, [r7, #0]
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 f8a5 	bl	800bdf6 <USBD_CtlError>
        break;
 800bcac:	e01a      	b.n	800bce4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d005      	beq.n	800bcca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	f043 0202 	orr.w	r2, r3, #2
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	330c      	adds	r3, #12
 800bcce:	2202      	movs	r2, #2
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 f900 	bl	800bed8 <USBD_CtlSendData>
      break;
 800bcd8:	e004      	b.n	800bce4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bcda:	6839      	ldr	r1, [r7, #0]
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 f88a 	bl	800bdf6 <USBD_CtlError>
      break;
 800bce2:	bf00      	nop
  }
}
 800bce4:	bf00      	nop
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	885b      	ldrh	r3, [r3, #2]
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d107      	bne.n	800bd0e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2201      	movs	r2, #1
 800bd02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 f940 	bl	800bf8c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bd0c:	e013      	b.n	800bd36 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	885b      	ldrh	r3, [r3, #2]
 800bd12:	2b02      	cmp	r3, #2
 800bd14:	d10b      	bne.n	800bd2e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	889b      	ldrh	r3, [r3, #4]
 800bd1a:	0a1b      	lsrs	r3, r3, #8
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	b2da      	uxtb	r2, r3
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 f930 	bl	800bf8c <USBD_CtlSendStatus>
}
 800bd2c:	e003      	b.n	800bd36 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bd2e:	6839      	ldr	r1, [r7, #0]
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 f860 	bl	800bdf6 <USBD_CtlError>
}
 800bd36:	bf00      	nop
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b082      	sub	sp, #8
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
 800bd46:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	3b01      	subs	r3, #1
 800bd52:	2b02      	cmp	r3, #2
 800bd54:	d80b      	bhi.n	800bd6e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	885b      	ldrh	r3, [r3, #2]
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d10c      	bne.n	800bd78 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 f910 	bl	800bf8c <USBD_CtlSendStatus>
      }
      break;
 800bd6c:	e004      	b.n	800bd78 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bd6e:	6839      	ldr	r1, [r7, #0]
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 f840 	bl	800bdf6 <USBD_CtlError>
      break;
 800bd76:	e000      	b.n	800bd7a <USBD_ClrFeature+0x3c>
      break;
 800bd78:	bf00      	nop
  }
}
 800bd7a:	bf00      	nop
 800bd7c:	3708      	adds	r7, #8
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}

0800bd82 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bd82:	b580      	push	{r7, lr}
 800bd84:	b084      	sub	sp, #16
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
 800bd8a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	781a      	ldrb	r2, [r3, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	781a      	ldrb	r2, [r3, #0]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bdac:	68f8      	ldr	r0, [r7, #12]
 800bdae:	f7ff fa41 	bl	800b234 <SWAPBYTE>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f7ff fa34 	bl	800b234 <SWAPBYTE>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	461a      	mov	r2, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	3301      	adds	r3, #1
 800bdde:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	f7ff fa27 	bl	800b234 <SWAPBYTE>
 800bde6:	4603      	mov	r3, r0
 800bde8:	461a      	mov	r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	80da      	strh	r2, [r3, #6]
}
 800bdee:	bf00      	nop
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b082      	sub	sp, #8
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
 800bdfe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800be00:	2180      	movs	r1, #128	; 0x80
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f001 f9e8 	bl	800d1d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800be08:	2100      	movs	r1, #0
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f001 f9e4 	bl	800d1d8 <USBD_LL_StallEP>
}
 800be10:	bf00      	nop
 800be12:	3708      	adds	r7, #8
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b086      	sub	sp, #24
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800be24:	2300      	movs	r3, #0
 800be26:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d036      	beq.n	800be9c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800be32:	6938      	ldr	r0, [r7, #16]
 800be34:	f000 f836 	bl	800bea4 <USBD_GetLen>
 800be38:	4603      	mov	r3, r0
 800be3a:	3301      	adds	r3, #1
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	005b      	lsls	r3, r3, #1
 800be40:	b29a      	uxth	r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800be46:	7dfb      	ldrb	r3, [r7, #23]
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	4413      	add	r3, r2
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	7812      	ldrb	r2, [r2, #0]
 800be50:	701a      	strb	r2, [r3, #0]
  idx++;
 800be52:	7dfb      	ldrb	r3, [r7, #23]
 800be54:	3301      	adds	r3, #1
 800be56:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800be58:	7dfb      	ldrb	r3, [r7, #23]
 800be5a:	68ba      	ldr	r2, [r7, #8]
 800be5c:	4413      	add	r3, r2
 800be5e:	2203      	movs	r2, #3
 800be60:	701a      	strb	r2, [r3, #0]
  idx++;
 800be62:	7dfb      	ldrb	r3, [r7, #23]
 800be64:	3301      	adds	r3, #1
 800be66:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800be68:	e013      	b.n	800be92 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
 800be6c:	68ba      	ldr	r2, [r7, #8]
 800be6e:	4413      	add	r3, r2
 800be70:	693a      	ldr	r2, [r7, #16]
 800be72:	7812      	ldrb	r2, [r2, #0]
 800be74:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	3301      	adds	r3, #1
 800be7a:	613b      	str	r3, [r7, #16]
    idx++;
 800be7c:	7dfb      	ldrb	r3, [r7, #23]
 800be7e:	3301      	adds	r3, #1
 800be80:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800be82:	7dfb      	ldrb	r3, [r7, #23]
 800be84:	68ba      	ldr	r2, [r7, #8]
 800be86:	4413      	add	r3, r2
 800be88:	2200      	movs	r2, #0
 800be8a:	701a      	strb	r2, [r3, #0]
    idx++;
 800be8c:	7dfb      	ldrb	r3, [r7, #23]
 800be8e:	3301      	adds	r3, #1
 800be90:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d1e7      	bne.n	800be6a <USBD_GetString+0x52>
 800be9a:	e000      	b.n	800be9e <USBD_GetString+0x86>
    return;
 800be9c:	bf00      	nop
  }
}
 800be9e:	3718      	adds	r7, #24
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b085      	sub	sp, #20
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800beac:	2300      	movs	r3, #0
 800beae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800beb4:	e005      	b.n	800bec2 <USBD_GetLen+0x1e>
  {
    len++;
 800beb6:	7bfb      	ldrb	r3, [r7, #15]
 800beb8:	3301      	adds	r3, #1
 800beba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	3301      	adds	r3, #1
 800bec0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1f5      	bne.n	800beb6 <USBD_GetLen+0x12>
  }

  return len;
 800beca:	7bfb      	ldrb	r3, [r7, #15]
}
 800becc:	4618      	mov	r0, r3
 800bece:	3714      	adds	r7, #20
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr

0800bed8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	60b9      	str	r1, [r7, #8]
 800bee2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2202      	movs	r2, #2
 800bee8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	2100      	movs	r1, #0
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f001 f9f3 	bl	800d2ea <USBD_LL_Transmit>

  return USBD_OK;
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b084      	sub	sp, #16
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	60f8      	str	r0, [r7, #12]
 800bf16:	60b9      	str	r1, [r7, #8]
 800bf18:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	2100      	movs	r1, #0
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f001 f9e2 	bl	800d2ea <USBD_LL_Transmit>

  return USBD_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2203      	movs	r2, #3
 800bf40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	68ba      	ldr	r2, [r7, #8]
 800bf58:	2100      	movs	r1, #0
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	f001 f9e6 	bl	800d32c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3710      	adds	r7, #16
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}

0800bf6a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b084      	sub	sp, #16
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	60f8      	str	r0, [r7, #12]
 800bf72:	60b9      	str	r1, [r7, #8]
 800bf74:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	2100      	movs	r1, #0
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f001 f9d5 	bl	800d32c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf82:	2300      	movs	r3, #0
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3710      	adds	r7, #16
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2204      	movs	r2, #4
 800bf98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f001 f9a1 	bl	800d2ea <USBD_LL_Transmit>

  return USBD_OK;
 800bfa8:	2300      	movs	r3, #0
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3708      	adds	r7, #8
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}

0800bfb2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bfb2:	b580      	push	{r7, lr}
 800bfb4:	b082      	sub	sp, #8
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2205      	movs	r2, #5
 800bfbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f001 f9af 	bl	800d32c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <QMC5883L_write_reg>:
#include "stm32f4xx.h"
#include "QMC5883L.h"

HAL_StatusTypeDef QMC5883L_write_reg(I2C_HandleTypeDef *hi2c, uint8_t p_reg_addr, uint8_t p_val){
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b086      	sub	sp, #24
 800bfdc:	af02      	add	r7, sp, #8
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	70fb      	strb	r3, [r7, #3]
 800bfe4:	4613      	mov	r3, r2
 800bfe6:	70bb      	strb	r3, [r7, #2]
	uint8_t l_out_buf[2];

	l_out_buf[0] = p_reg_addr;
 800bfe8:	78fb      	ldrb	r3, [r7, #3]
 800bfea:	733b      	strb	r3, [r7, #12]
	l_out_buf[1] = p_val;
 800bfec:	78bb      	ldrb	r3, [r7, #2]
 800bfee:	737b      	strb	r3, [r7, #13]

	return HAL_I2C_Master_Transmit(hi2c, QMC5883L_Addr, l_out_buf, 2, QMC5883L_I2C_timeout);
 800bff0:	f107 020c 	add.w	r2, r7, #12
 800bff4:	230a      	movs	r3, #10
 800bff6:	9300      	str	r3, [sp, #0]
 800bff8:	2302      	movs	r3, #2
 800bffa:	211b      	movs	r1, #27
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f7f7 f84d 	bl	800309c <HAL_I2C_Master_Transmit>
 800c002:	4603      	mov	r3, r0
}
 800c004:	4618      	mov	r0, r3
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <QMC5883L_soft_reset>:

HAL_StatusTypeDef QMC5883L_soft_reset(I2C_HandleTypeDef *hi2c){
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
	return QMC5883L_write_reg(hi2c, QMC5883L_Control_register_2, QMC5883L_Soft_reset);
 800c014:	2280      	movs	r2, #128	; 0x80
 800c016:	210a      	movs	r1, #10
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f7ff ffdd 	bl	800bfd8 <QMC5883L_write_reg>
 800c01e:	4603      	mov	r3, r0
}
 800c020:	4618      	mov	r0, r3
 800c022:	3708      	adds	r7, #8
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <QMC5883L_init>:

HAL_StatusTypeDef QMC5883L_init(I2C_HandleTypeDef *hi2c) {
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef l_ret;
	//static uint8_t l_out_buf[1] = {0};

	//Define Set/Reset period
	l_ret = QMC5883L_write_reg(hi2c, QMC5883L_Set_reset_period_register, 0x1);
 800c030:	2201      	movs	r2, #1
 800c032:	210b      	movs	r1, #11
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f7ff ffcf 	bl	800bfd8 <QMC5883L_write_reg>
 800c03a:	4603      	mov	r3, r0
 800c03c:	73fb      	strb	r3, [r7, #15]

	if (l_ret != HAL_OK)
 800c03e:	7bfb      	ldrb	r3, [r7, #15]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d001      	beq.n	800c048 <QMC5883L_init+0x20>
		return l_ret;
 800c044:	7bfb      	ldrb	r3, [r7, #15]
 800c046:	e018      	b.n	800c07a <QMC5883L_init+0x52>

	//Interrupt and roll-over pointer enable
	l_ret = QMC5883L_write_reg(hi2c, QMC5883L_Control_register_2, QMC5883L_Interrupt_enable | QMC5883L_Rollover_pointer_enable);
 800c048:	2240      	movs	r2, #64	; 0x40
 800c04a:	210a      	movs	r1, #10
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f7ff ffc3 	bl	800bfd8 <QMC5883L_write_reg>
 800c052:	4603      	mov	r3, r0
 800c054:	73fb      	strb	r3, [r7, #15]

	if (l_ret != HAL_OK)
 800c056:	7bfb      	ldrb	r3, [r7, #15]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d001      	beq.n	800c060 <QMC5883L_init+0x38>
		return l_ret;
 800c05c:	7bfb      	ldrb	r3, [r7, #15]
 800c05e:	e00c      	b.n	800c07a <QMC5883L_init+0x52>

	l_ret = QMC5883L_write_reg(hi2c, QMC5883L_Control_register, QMC5883L_Mode_standby | QMC5883L_Output_data_rate_200_Hz | QMC5883L_Measurement_range_2_G | QMC5883L_Oversample_rate_128);
 800c060:	228c      	movs	r2, #140	; 0x8c
 800c062:	2109      	movs	r1, #9
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f7ff ffb7 	bl	800bfd8 <QMC5883L_write_reg>
 800c06a:	4603      	mov	r3, r0
 800c06c:	73fb      	strb	r3, [r7, #15]

	if (l_ret != HAL_OK)
 800c06e:	7bfb      	ldrb	r3, [r7, #15]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d001      	beq.n	800c078 <QMC5883L_init+0x50>
		return l_ret;
 800c074:	7bfb      	ldrb	r3, [r7, #15]
 800c076:	e000      	b.n	800c07a <QMC5883L_init+0x52>

	//Init read start with 0 byte
	//l_ret = HAL_I2C_Master_Transmit(hi2c, QMC5883L_Addr, l_out_buf, 1, QMC5883L_I2C_timeout);

	return l_ret;
 800c078:	7bfb      	ldrb	r3, [r7, #15]
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <is_even>:
#include "stm32f4xx.h"
#include "TLV493D_A1B6.h"

static inline uint8_t is_even(uint8_t p_out_buf[4]) {
 800c082:	b480      	push	{r7}
 800c084:	b085      	sub	sp, #20
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
	uint8_t p = p_out_buf[0] ^ p_out_buf[1] ^ p_out_buf[2] ^ p_out_buf[3];
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	781a      	ldrb	r2, [r3, #0]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	3301      	adds	r3, #1
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	4053      	eors	r3, r2
 800c096:	b2da      	uxtb	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	3302      	adds	r3, #2
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	4053      	eors	r3, r2
 800c0a0:	b2da      	uxtb	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	3303      	adds	r3, #3
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	4053      	eors	r3, r2
 800c0aa:	73fb      	strb	r3, [r7, #15]
	p = p ^ (p << 4);
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
 800c0ae:	011b      	lsls	r3, r3, #4
 800c0b0:	b25a      	sxtb	r2, r3
 800c0b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0b6:	4053      	eors	r3, r2
 800c0b8:	b25b      	sxtb	r3, r3
 800c0ba:	73fb      	strb	r3, [r7, #15]
	p = p ^ (p << 2);
 800c0bc:	7bfb      	ldrb	r3, [r7, #15]
 800c0be:	009b      	lsls	r3, r3, #2
 800c0c0:	b25a      	sxtb	r2, r3
 800c0c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0c6:	4053      	eors	r3, r2
 800c0c8:	b25b      	sxtb	r3, r3
 800c0ca:	73fb      	strb	r3, [r7, #15]
	p = p ^ (p << 1);
 800c0cc:	7bfb      	ldrb	r3, [r7, #15]
 800c0ce:	005b      	lsls	r3, r3, #1
 800c0d0:	b25a      	sxtb	r2, r3
 800c0d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0d6:	4053      	eors	r3, r2
 800c0d8:	b25b      	sxtb	r3, r3
 800c0da:	73fb      	strb	r3, [r7, #15]

	return ~p & 0x80;
 800c0dc:	7bfb      	ldrb	r3, [r7, #15]
 800c0de:	43db      	mvns	r3, r3
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c0e6:	b2db      	uxtb	r3, r3
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3714      	adds	r7, #20
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <TLV493D_A1B6_set_mode>:

HAL_StatusTypeDef TLV493D_A1B6_set_mode(I2C_HandleTypeDef *p_hi2c, uint8_t p_addr, uint8_t p_new_IICAddr_bits) {
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af02      	add	r7, sp, #8
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	70fb      	strb	r3, [r7, #3]
 800c100:	4613      	mov	r3, r2
 800c102:	70bb      	strb	r3, [r7, #2]
	uint8_t l_out_buf[4] = {
 800c104:	2300      	movs	r3, #0
 800c106:	733b      	strb	r3, [r7, #12]
 800c108:	78bb      	ldrb	r3, [r7, #2]
 800c10a:	f043 0303 	orr.w	r3, r3, #3
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	737b      	strb	r3, [r7, #13]
 800c112:	2300      	movs	r3, #0
 800c114:	73bb      	strb	r3, [r7, #14]
 800c116:	23e0      	movs	r3, #224	; 0xe0
 800c118:	73fb      	strb	r3, [r7, #15]
		,p_new_IICAddr_bits | TLV493D_A1B6_Interrupt_disable | TLV493D_A1B6_Master_controlled_mode
		,0
		,TLV493D_A1B6_Temperature_measurement_disabled | TLV493D_A1B6_Low_power_period_12_ms| TLV493D_A1B6_Parity_test_enabled
	};

	l_out_buf[1] |= is_even(l_out_buf);		//Parity check, sum of all 32 bits from write registers 0H, 1H, 2H and 3H must be odd
 800c11a:	f107 030c 	add.w	r3, r7, #12
 800c11e:	4618      	mov	r0, r3
 800c120:	f7ff ffaf 	bl	800c082 <is_even>
 800c124:	4603      	mov	r3, r0
 800c126:	461a      	mov	r2, r3
 800c128:	7b7b      	ldrb	r3, [r7, #13]
 800c12a:	4313      	orrs	r3, r2
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	737b      	strb	r3, [r7, #13]

	return HAL_I2C_Master_Transmit(p_hi2c, p_addr, l_out_buf, 4, TLV493D_A1B6_I2C_timeout);
 800c130:	78fb      	ldrb	r3, [r7, #3]
 800c132:	b299      	uxth	r1, r3
 800c134:	f107 020c 	add.w	r2, r7, #12
 800c138:	230a      	movs	r3, #10
 800c13a:	9300      	str	r3, [sp, #0]
 800c13c:	2304      	movs	r3, #4
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f7f6 ffac 	bl	800309c <HAL_I2C_Master_Transmit>
 800c144:	4603      	mov	r3, r0
}
 800c146:	4618      	mov	r0, r3
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
	...

0800c150 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c154:	2200      	movs	r2, #0
 800c156:	4912      	ldr	r1, [pc, #72]	; (800c1a0 <MX_USB_DEVICE_Init+0x50>)
 800c158:	4812      	ldr	r0, [pc, #72]	; (800c1a4 <MX_USB_DEVICE_Init+0x54>)
 800c15a:	f7fe fc4b 	bl	800a9f4 <USBD_Init>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d001      	beq.n	800c168 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c164:	f7f5 ff3a 	bl	8001fdc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800c168:	490f      	ldr	r1, [pc, #60]	; (800c1a8 <MX_USB_DEVICE_Init+0x58>)
 800c16a:	480e      	ldr	r0, [pc, #56]	; (800c1a4 <MX_USB_DEVICE_Init+0x54>)
 800c16c:	f7fe fc72 	bl	800aa54 <USBD_RegisterClass>
 800c170:	4603      	mov	r3, r0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d001      	beq.n	800c17a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c176:	f7f5 ff31 	bl	8001fdc <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800c17a:	490c      	ldr	r1, [pc, #48]	; (800c1ac <MX_USB_DEVICE_Init+0x5c>)
 800c17c:	4809      	ldr	r0, [pc, #36]	; (800c1a4 <MX_USB_DEVICE_Init+0x54>)
 800c17e:	f7fe fc1f 	bl	800a9c0 <USBD_CUSTOM_HID_RegisterInterface>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d001      	beq.n	800c18c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c188:	f7f5 ff28 	bl	8001fdc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c18c:	4805      	ldr	r0, [pc, #20]	; (800c1a4 <MX_USB_DEVICE_Init+0x54>)
 800c18e:	f7fe fc97 	bl	800aac0 <USBD_Start>
 800c192:	4603      	mov	r3, r0
 800c194:	2b00      	cmp	r3, #0
 800c196:	d001      	beq.n	800c19c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c198:	f7f5 ff20 	bl	8001fdc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c19c:	bf00      	nop
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	200000e0 	.word	0x200000e0
 800c1a4:	2000046c 	.word	0x2000046c
 800c1a8:	20000014 	.word	0x20000014
 800c1ac:	200000d0 	.word	0x200000d0

0800c1b0 <init_compare_registers_for_sensors_timer>:
/* USER CODE BEGIN EFP */
void save_errors_in_report();

extern t_sensors_on_points l_sensors_points;

inline void init_compare_registers_for_sensors_timer() {
 800c1b0:	b480      	push	{r7}
 800c1b2:	af00      	add	r7, sp, #0
	TIM1->CCR1 = l_sensors_points.on_points_word_arr[0];	//Set the Capture Compare Register value
 800c1b4:	4b1a      	ldr	r3, [pc, #104]	; (800c220 <init_compare_registers_for_sensors_timer+0x70>)
 800c1b6:	889a      	ldrh	r2, [r3, #4]
 800c1b8:	4b1a      	ldr	r3, [pc, #104]	; (800c224 <init_compare_registers_for_sensors_timer+0x74>)
 800c1ba:	635a      	str	r2, [r3, #52]	; 0x34

	l_sensors_points.current_point_index = 1;
 800c1bc:	4b18      	ldr	r3, [pc, #96]	; (800c220 <init_compare_registers_for_sensors_timer+0x70>)
 800c1be:	2201      	movs	r2, #1
 800c1c0:	705a      	strb	r2, [r3, #1]

	if (l_sensors_points.number_of_poits >= 2) {
 800c1c2:	4b17      	ldr	r3, [pc, #92]	; (800c220 <init_compare_registers_for_sensors_timer+0x70>)
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d909      	bls.n	800c1de <init_compare_registers_for_sensors_timer+0x2e>
		TIM1->CCR2 = l_sensors_points.on_points_word_arr[1];
 800c1ca:	4b15      	ldr	r3, [pc, #84]	; (800c220 <init_compare_registers_for_sensors_timer+0x70>)
 800c1cc:	88da      	ldrh	r2, [r3, #6]
 800c1ce:	4b15      	ldr	r3, [pc, #84]	; (800c224 <init_compare_registers_for_sensors_timer+0x74>)
 800c1d0:	639a      	str	r2, [r3, #56]	; 0x38

		l_sensors_points.current_point_index++;
 800c1d2:	4b13      	ldr	r3, [pc, #76]	; (800c220 <init_compare_registers_for_sensors_timer+0x70>)
 800c1d4:	785b      	ldrb	r3, [r3, #1]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	b2da      	uxtb	r2, r3
 800c1da:	4b11      	ldr	r3, [pc, #68]	; (800c220 <init_compare_registers_for_sensors_timer+0x70>)
 800c1dc:	705a      	strb	r2, [r3, #1]
	}

	if (l_sensors_points.number_of_poits >= 3) {
 800c1de:	4b10      	ldr	r3, [pc, #64]	; (800c220 <init_compare_registers_for_sensors_timer+0x70>)
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	2b02      	cmp	r3, #2
 800c1e4:	d909      	bls.n	800c1fa <init_compare_registers_for_sensors_timer+0x4a>
		TIM1->CCR3 = l_sensors_points.on_points_word_arr[2];
 800c1e6:	4b0e      	ldr	r3, [pc, #56]	; (800c220 <init_compare_registers_for_sensors_timer+0x70>)
 800c1e8:	891a      	ldrh	r2, [r3, #8]
 800c1ea:	4b0e      	ldr	r3, [pc, #56]	; (800c224 <init_compare_registers_for_sensors_timer+0x74>)
 800c1ec:	63da      	str	r2, [r3, #60]	; 0x3c

		l_sensors_points.current_point_index++;
 800c1ee:	4b0c      	ldr	r3, [pc, #48]	; (800c220 <init_compare_registers_for_sensors_timer+0x70>)
 800c1f0:	785b      	ldrb	r3, [r3, #1]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	b2da      	uxtb	r2, r3
 800c1f6:	4b0a      	ldr	r3, [pc, #40]	; (800c220 <init_compare_registers_for_sensors_timer+0x70>)
 800c1f8:	705a      	strb	r2, [r3, #1]
	}

	if (l_sensors_points.number_of_poits >= 4) {
 800c1fa:	4b09      	ldr	r3, [pc, #36]	; (800c220 <init_compare_registers_for_sensors_timer+0x70>)
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	2b03      	cmp	r3, #3
 800c200:	d909      	bls.n	800c216 <init_compare_registers_for_sensors_timer+0x66>
		TIM1->CCR4 = l_sensors_points.on_points_word_arr[3];
 800c202:	4b07      	ldr	r3, [pc, #28]	; (800c220 <init_compare_registers_for_sensors_timer+0x70>)
 800c204:	895a      	ldrh	r2, [r3, #10]
 800c206:	4b07      	ldr	r3, [pc, #28]	; (800c224 <init_compare_registers_for_sensors_timer+0x74>)
 800c208:	641a      	str	r2, [r3, #64]	; 0x40

		l_sensors_points.current_point_index++;
 800c20a:	4b05      	ldr	r3, [pc, #20]	; (800c220 <init_compare_registers_for_sensors_timer+0x70>)
 800c20c:	785b      	ldrb	r3, [r3, #1]
 800c20e:	3301      	adds	r3, #1
 800c210:	b2da      	uxtb	r2, r3
 800c212:	4b03      	ldr	r3, [pc, #12]	; (800c220 <init_compare_registers_for_sensors_timer+0x70>)
 800c214:	705a      	strb	r2, [r3, #1]
	}

	//__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE | TIM_FLAG_COM | TIM_FLAG_CC1 | TIM_FLAG_CC2 | TIM_FLAG_CC3 | TIM_FLAG_CC4);
}
 800c216:	bf00      	nop
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr
 800c220:	100000ac 	.word	0x100000ac
 800c224:	40010000 	.word	0x40010000

0800c228 <copy_errors_data>:
extern uint8_t l_dbg_pos;

static uint8_t l_answer[D_ANSWER_LENGTH];
static uint8_t l_len;

inline static void copy_errors_data() {
 800c228:	b480      	push	{r7}
 800c22a:	af00      	add	r7, sp, #0
	l_answer[0]	= 6;		//Command result plus some data. Common length 63 bytes without report id.
 800c22c:	4b19      	ldr	r3, [pc, #100]	; (800c294 <copy_errors_data+0x6c>)
 800c22e:	2206      	movs	r2, #6
 800c230:	701a      	strb	r2, [r3, #0]

	l_answer[2]	= 8;		//Error occurs
 800c232:	4b18      	ldr	r3, [pc, #96]	; (800c294 <copy_errors_data+0x6c>)
 800c234:	2208      	movs	r2, #8
 800c236:	709a      	strb	r2, [r3, #2]
	l_answer[3] = l_i2c1_ext.state;
 800c238:	4b17      	ldr	r3, [pc, #92]	; (800c298 <copy_errors_data+0x70>)
 800c23a:	791b      	ldrb	r3, [r3, #4]
 800c23c:	b2da      	uxtb	r2, r3
 800c23e:	4b15      	ldr	r3, [pc, #84]	; (800c294 <copy_errors_data+0x6c>)
 800c240:	70da      	strb	r2, [r3, #3]
	l_answer[4] = l_i2c1_ext.error;
 800c242:	4b15      	ldr	r3, [pc, #84]	; (800c298 <copy_errors_data+0x70>)
 800c244:	7f5b      	ldrb	r3, [r3, #29]
 800c246:	b2da      	uxtb	r2, r3
 800c248:	4b12      	ldr	r3, [pc, #72]	; (800c294 <copy_errors_data+0x6c>)
 800c24a:	711a      	strb	r2, [r3, #4]
	l_answer[5] = l_i2c2_ext.state;
 800c24c:	4b13      	ldr	r3, [pc, #76]	; (800c29c <copy_errors_data+0x74>)
 800c24e:	791b      	ldrb	r3, [r3, #4]
 800c250:	b2da      	uxtb	r2, r3
 800c252:	4b10      	ldr	r3, [pc, #64]	; (800c294 <copy_errors_data+0x6c>)
 800c254:	715a      	strb	r2, [r3, #5]
	l_answer[6] = l_i2c2_ext.error;
 800c256:	4b11      	ldr	r3, [pc, #68]	; (800c29c <copy_errors_data+0x74>)
 800c258:	7f5b      	ldrb	r3, [r3, #29]
 800c25a:	b2da      	uxtb	r2, r3
 800c25c:	4b0d      	ldr	r3, [pc, #52]	; (800c294 <copy_errors_data+0x6c>)
 800c25e:	719a      	strb	r2, [r3, #6]
	l_answer[7] = l_i2c3_ext.state;
 800c260:	4b0f      	ldr	r3, [pc, #60]	; (800c2a0 <copy_errors_data+0x78>)
 800c262:	791b      	ldrb	r3, [r3, #4]
 800c264:	b2da      	uxtb	r2, r3
 800c266:	4b0b      	ldr	r3, [pc, #44]	; (800c294 <copy_errors_data+0x6c>)
 800c268:	71da      	strb	r2, [r3, #7]
	l_answer[8] = l_i2c3_ext.error;
 800c26a:	4b0d      	ldr	r3, [pc, #52]	; (800c2a0 <copy_errors_data+0x78>)
 800c26c:	7f5b      	ldrb	r3, [r3, #29]
 800c26e:	b2da      	uxtb	r2, r3
 800c270:	4b08      	ldr	r3, [pc, #32]	; (800c294 <copy_errors_data+0x6c>)
 800c272:	721a      	strb	r2, [r3, #8]
	l_answer[9] = l_error;
 800c274:	4b0b      	ldr	r3, [pc, #44]	; (800c2a4 <copy_errors_data+0x7c>)
 800c276:	781a      	ldrb	r2, [r3, #0]
 800c278:	4b06      	ldr	r3, [pc, #24]	; (800c294 <copy_errors_data+0x6c>)
 800c27a:	725a      	strb	r2, [r3, #9]
	l_answer[10] = l_sensors_points.point_number;
 800c27c:	4b0a      	ldr	r3, [pc, #40]	; (800c2a8 <copy_errors_data+0x80>)
 800c27e:	789a      	ldrb	r2, [r3, #2]
 800c280:	4b04      	ldr	r3, [pc, #16]	; (800c294 <copy_errors_data+0x6c>)
 800c282:	729a      	strb	r2, [r3, #10]

	l_len		= 65;		//Must be 64, but not work. TODO: find why.
 800c284:	4b09      	ldr	r3, [pc, #36]	; (800c2ac <copy_errors_data+0x84>)
 800c286:	2241      	movs	r2, #65	; 0x41
 800c288:	701a      	strb	r2, [r3, #0]
}
 800c28a:	bf00      	nop
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr
 800c294:	20000748 	.word	0x20000748
 800c298:	10000114 	.word	0x10000114
 800c29c:	10000134 	.word	0x10000134
 800c2a0:	10000154 	.word	0x10000154
 800c2a4:	100000a8 	.word	0x100000a8
 800c2a8:	100000ac 	.word	0x100000ac
 800c2ac:	2000078f 	.word	0x2000078f

0800c2b0 <copy_sensors_data>:

inline static void copy_sensors_data(int p_reset_i2c_state) {
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
	NVIC_DisableIRQ(I2C2_ER_IRQn);

	NVIC_DisableIRQ(I2C3_EV_IRQn);
	NVIC_DisableIRQ(I2C3_ER_IRQn);*/

	if (	data_ready == l_i2c1_ext.state
 800c2b8:	4b2b      	ldr	r3, [pc, #172]	; (800c368 <copy_sensors_data+0xb8>)
 800c2ba:	791b      	ldrb	r3, [r3, #4]
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	2b07      	cmp	r3, #7
 800c2c0:	d12d      	bne.n	800c31e <copy_sensors_data+0x6e>
		&&	data_ready == l_i2c2_ext.state
 800c2c2:	4b2a      	ldr	r3, [pc, #168]	; (800c36c <copy_sensors_data+0xbc>)
 800c2c4:	791b      	ldrb	r3, [r3, #4]
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	2b07      	cmp	r3, #7
 800c2ca:	d128      	bne.n	800c31e <copy_sensors_data+0x6e>
		&&	data_ready == l_i2c3_ext.state
 800c2cc:	4b28      	ldr	r3, [pc, #160]	; (800c370 <copy_sensors_data+0xc0>)
 800c2ce:	791b      	ldrb	r3, [r3, #4]
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	2b07      	cmp	r3, #7
 800c2d4:	d123      	bne.n	800c31e <copy_sensors_data+0x6e>
		&&	no_error == l_i2c1_ext.error
 800c2d6:	4b24      	ldr	r3, [pc, #144]	; (800c368 <copy_sensors_data+0xb8>)
 800c2d8:	7f5b      	ldrb	r3, [r3, #29]
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d11e      	bne.n	800c31e <copy_sensors_data+0x6e>
		&&	no_error == l_i2c2_ext.error
 800c2e0:	4b22      	ldr	r3, [pc, #136]	; (800c36c <copy_sensors_data+0xbc>)
 800c2e2:	7f5b      	ldrb	r3, [r3, #29]
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d119      	bne.n	800c31e <copy_sensors_data+0x6e>
		&&	no_error == l_i2c3_ext.error
 800c2ea:	4b21      	ldr	r3, [pc, #132]	; (800c370 <copy_sensors_data+0xc0>)
 800c2ec:	7f5b      	ldrb	r3, [r3, #29]
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d114      	bne.n	800c31e <copy_sensors_data+0x6e>
	) {
		//save_errors_in_report();

		memcpy(l_answer, l_report, D_ANSWER_LENGTH);
 800c2f4:	4a1f      	ldr	r2, [pc, #124]	; (800c374 <copy_sensors_data+0xc4>)
 800c2f6:	4b20      	ldr	r3, [pc, #128]	; (800c378 <copy_sensors_data+0xc8>)
 800c2f8:	4610      	mov	r0, r2
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	2347      	movs	r3, #71	; 0x47
 800c2fe:	461a      	mov	r2, r3
 800c300:	f001 f89e 	bl	800d440 <memcpy>

		l_answer[0]	= 1;		//Answer consist of sensors data
 800c304:	4b1b      	ldr	r3, [pc, #108]	; (800c374 <copy_sensors_data+0xc4>)
 800c306:	2201      	movs	r2, #1
 800c308:	701a      	strb	r2, [r3, #0]
		l_answer[1] = l_command;
 800c30a:	4b1c      	ldr	r3, [pc, #112]	; (800c37c <copy_sensors_data+0xcc>)
 800c30c:	781a      	ldrb	r2, [r3, #0]
 800c30e:	4b19      	ldr	r3, [pc, #100]	; (800c374 <copy_sensors_data+0xc4>)
 800c310:	705a      	strb	r2, [r3, #1]
		l_answer[70] = l_sensors_points.point_number;
 800c312:	4b1b      	ldr	r3, [pc, #108]	; (800c380 <copy_sensors_data+0xd0>)
 800c314:	789a      	ldrb	r2, [r3, #2]
 800c316:	4b17      	ldr	r3, [pc, #92]	; (800c374 <copy_sensors_data+0xc4>)
 800c318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c31c:	e001      	b.n	800c322 <copy_sensors_data+0x72>
	} else {
		//memcpy(l_answer, l_debug, D_ANSWER_LENGTH);
		copy_errors_data();
 800c31e:	f7ff ff83 	bl	800c228 <copy_errors_data>
	}

	if (p_reset_i2c_state) {
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d01a      	beq.n	800c35e <copy_sensors_data+0xae>
		l_i2c1_ext.state = l_i2c2_ext.state = l_i2c3_ext.state = init_state;
 800c328:	2200      	movs	r2, #0
 800c32a:	4b11      	ldr	r3, [pc, #68]	; (800c370 <copy_sensors_data+0xc0>)
 800c32c:	4611      	mov	r1, r2
 800c32e:	7119      	strb	r1, [r3, #4]
 800c330:	4b0e      	ldr	r3, [pc, #56]	; (800c36c <copy_sensors_data+0xbc>)
 800c332:	4611      	mov	r1, r2
 800c334:	7119      	strb	r1, [r3, #4]
 800c336:	4b0c      	ldr	r3, [pc, #48]	; (800c368 <copy_sensors_data+0xb8>)
 800c338:	711a      	strb	r2, [r3, #4]
		l_i2c1_ext.error = l_i2c2_ext.error = l_i2c3_ext.error = l_error = no_error;
 800c33a:	4b12      	ldr	r3, [pc, #72]	; (800c384 <copy_sensors_data+0xd4>)
 800c33c:	2200      	movs	r2, #0
 800c33e:	701a      	strb	r2, [r3, #0]
 800c340:	4b10      	ldr	r3, [pc, #64]	; (800c384 <copy_sensors_data+0xd4>)
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	4a0a      	ldr	r2, [pc, #40]	; (800c370 <copy_sensors_data+0xc0>)
 800c346:	4619      	mov	r1, r3
 800c348:	7751      	strb	r1, [r2, #29]
 800c34a:	4a08      	ldr	r2, [pc, #32]	; (800c36c <copy_sensors_data+0xbc>)
 800c34c:	4619      	mov	r1, r3
 800c34e:	7751      	strb	r1, [r2, #29]
 800c350:	4a05      	ldr	r2, [pc, #20]	; (800c368 <copy_sensors_data+0xb8>)
 800c352:	7753      	strb	r3, [r2, #29]

		//dbg(19)

		memset(l_report, 0, D_ANSWER_LENGTH);
 800c354:	2247      	movs	r2, #71	; 0x47
 800c356:	2100      	movs	r1, #0
 800c358:	4807      	ldr	r0, [pc, #28]	; (800c378 <copy_sensors_data+0xc8>)
 800c35a:	f001 f87f 	bl	800d45c <memset>
	}
}
 800c35e:	bf00      	nop
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	10000114 	.word	0x10000114
 800c36c:	10000134 	.word	0x10000134
 800c370:	10000154 	.word	0x10000154
 800c374:	20000748 	.word	0x20000748
 800c378:	10000018 	.word	0x10000018
 800c37c:	100000a9 	.word	0x100000a9
 800c380:	100000ac 	.word	0x100000ac
 800c384:	100000a8 	.word	0x100000a8

0800c388 <need_send_data>:

void need_send_data() {
 800c388:	b580      	push	{r7, lr}
 800c38a:	af00      	add	r7, sp, #0
	copy_sensors_data(1);
 800c38c:	2001      	movs	r0, #1
 800c38e:	f7ff ff8f 	bl	800c2b0 <copy_sensors_data>

	//dbg(20)

	//After transfer complete call USBD_CUSTOM_HID_DataIn - rewritten in main.c
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, l_answer, D_ANSWER_LENGTH);
 800c392:	2247      	movs	r2, #71	; 0x47
 800c394:	4902      	ldr	r1, [pc, #8]	; (800c3a0 <need_send_data+0x18>)
 800c396:	4803      	ldr	r0, [pc, #12]	; (800c3a4 <need_send_data+0x1c>)
 800c398:	f7fe f99c 	bl	800a6d4 <USBD_CUSTOM_HID_SendReport>
}
 800c39c:	bf00      	nop
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	20000748 	.word	0x20000748
 800c3a4:	2000046c 	.word	0x2000046c

0800c3a8 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c3ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800c3bc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800c3c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c3cc:	b08c      	sub	sp, #48	; 0x30
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	460a      	mov	r2, r1
 800c3d4:	71fb      	strb	r3, [r7, #7]
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
	dbg(81)
 800c3da:	4b97      	ldr	r3, [pc, #604]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	2b46      	cmp	r3, #70	; 0x46
 800c3e0:	d902      	bls.n	800c3e8 <CUSTOM_HID_OutEvent_FS+0x20>
 800c3e2:	4b95      	ldr	r3, [pc, #596]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c3e4:	2202      	movs	r2, #2
 800c3e6:	701a      	strb	r2, [r3, #0]
 800c3e8:	4b93      	ldr	r3, [pc, #588]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	1c5a      	adds	r2, r3, #1
 800c3ee:	b2d1      	uxtb	r1, r2
 800c3f0:	4a91      	ldr	r2, [pc, #580]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c3f2:	7011      	strb	r1, [r2, #0]
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	4b91      	ldr	r3, [pc, #580]	; (800c63c <CUSTOM_HID_OutEvent_FS+0x274>)
 800c3f8:	2151      	movs	r1, #81	; 0x51
 800c3fa:	5499      	strb	r1, [r3, r2]
	dbg(event_idx)
 800c3fc:	4b8e      	ldr	r3, [pc, #568]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	2b46      	cmp	r3, #70	; 0x46
 800c402:	d902      	bls.n	800c40a <CUSTOM_HID_OutEvent_FS+0x42>
 800c404:	4b8c      	ldr	r3, [pc, #560]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c406:	2202      	movs	r2, #2
 800c408:	701a      	strb	r2, [r3, #0]
 800c40a:	4b8b      	ldr	r3, [pc, #556]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	1c5a      	adds	r2, r3, #1
 800c410:	b2d1      	uxtb	r1, r2
 800c412:	4a89      	ldr	r2, [pc, #548]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c414:	7011      	strb	r1, [r2, #0]
 800c416:	4619      	mov	r1, r3
 800c418:	4a88      	ldr	r2, [pc, #544]	; (800c63c <CUSTOM_HID_OutEvent_FS+0x274>)
 800c41a:	79fb      	ldrb	r3, [r7, #7]
 800c41c:	5453      	strb	r3, [r2, r1]

	/* Start next USB packet transfer once data processing is completed */
	USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800c41e:	4888      	ldr	r0, [pc, #544]	; (800c640 <CUSTOM_HID_OutEvent_FS+0x278>)
 800c420:	f7fe fa6c 	bl	800a8fc <USBD_CUSTOM_HID_ReceivePacket>

	switch (event_idx) {
 800c424:	79fb      	ldrb	r3, [r7, #7]
 800c426:	2b02      	cmp	r3, #2
 800c428:	d003      	beq.n	800c432 <CUSTOM_HID_OutEvent_FS+0x6a>
 800c42a:	2b05      	cmp	r3, #5
 800c42c:	f000 8368 	beq.w	800cb00 <CUSTOM_HID_OutEvent_FS+0x738>
 800c430:	e3a3      	b.n	800cb7a <CUSTOM_HID_OutEvent_FS+0x7b2>
		case 0x02:			//Command
			;
			dbg(82)
 800c432:	4b81      	ldr	r3, [pc, #516]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	2b46      	cmp	r3, #70	; 0x46
 800c438:	d902      	bls.n	800c440 <CUSTOM_HID_OutEvent_FS+0x78>
 800c43a:	4b7f      	ldr	r3, [pc, #508]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c43c:	2202      	movs	r2, #2
 800c43e:	701a      	strb	r2, [r3, #0]
 800c440:	4b7d      	ldr	r3, [pc, #500]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	1c5a      	adds	r2, r3, #1
 800c446:	b2d1      	uxtb	r1, r2
 800c448:	4a7b      	ldr	r2, [pc, #492]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c44a:	7011      	strb	r1, [r2, #0]
 800c44c:	461a      	mov	r2, r3
 800c44e:	4b7b      	ldr	r3, [pc, #492]	; (800c63c <CUSTOM_HID_OutEvent_FS+0x274>)
 800c450:	2152      	movs	r1, #82	; 0x52
 800c452:	5499      	strb	r1, [r3, r2]
			USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c454:	4b7a      	ldr	r3, [pc, #488]	; (800c640 <CUSTOM_HID_OutEvent_FS+0x278>)
 800c456:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c45a:	627b      	str	r3, [r7, #36]	; 0x24

			uint8_t *l_command_arr = hhid->Report_buf;
 800c45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45e:	623b      	str	r3, [r7, #32]
			l_command = l_command_arr[1];
 800c460:	6a3b      	ldr	r3, [r7, #32]
 800c462:	785a      	ldrb	r2, [r3, #1]
 800c464:	4b77      	ldr	r3, [pc, #476]	; (800c644 <CUSTOM_HID_OutEvent_FS+0x27c>)
 800c466:	701a      	strb	r2, [r3, #0]

			dbg(l_command)
 800c468:	4b73      	ldr	r3, [pc, #460]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	2b46      	cmp	r3, #70	; 0x46
 800c46e:	d902      	bls.n	800c476 <CUSTOM_HID_OutEvent_FS+0xae>
 800c470:	4b71      	ldr	r3, [pc, #452]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c472:	2202      	movs	r2, #2
 800c474:	701a      	strb	r2, [r3, #0]
 800c476:	4b70      	ldr	r3, [pc, #448]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	1c5a      	adds	r2, r3, #1
 800c47c:	b2d1      	uxtb	r1, r2
 800c47e:	4a6e      	ldr	r2, [pc, #440]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c480:	7011      	strb	r1, [r2, #0]
 800c482:	461a      	mov	r2, r3
 800c484:	4b6f      	ldr	r3, [pc, #444]	; (800c644 <CUSTOM_HID_OutEvent_FS+0x27c>)
 800c486:	7819      	ldrb	r1, [r3, #0]
 800c488:	4b6c      	ldr	r3, [pc, #432]	; (800c63c <CUSTOM_HID_OutEvent_FS+0x274>)
 800c48a:	5499      	strb	r1, [r3, r2]
			dbg(83)
 800c48c:	4b6a      	ldr	r3, [pc, #424]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	2b46      	cmp	r3, #70	; 0x46
 800c492:	d902      	bls.n	800c49a <CUSTOM_HID_OutEvent_FS+0xd2>
 800c494:	4b68      	ldr	r3, [pc, #416]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c496:	2202      	movs	r2, #2
 800c498:	701a      	strb	r2, [r3, #0]
 800c49a:	4b67      	ldr	r3, [pc, #412]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	1c5a      	adds	r2, r3, #1
 800c4a0:	b2d1      	uxtb	r1, r2
 800c4a2:	4a65      	ldr	r2, [pc, #404]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c4a4:	7011      	strb	r1, [r2, #0]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	4b64      	ldr	r3, [pc, #400]	; (800c63c <CUSTOM_HID_OutEvent_FS+0x274>)
 800c4aa:	2153      	movs	r1, #83	; 0x53
 800c4ac:	5499      	strb	r1, [r3, r2]
			0 - USB report ID (Device -> Host)
			1 - Repeat command index
			2 - Result: 1 - success, >1 - error code
			*/

			l_answer[0] = 4;			//Command result
 800c4ae:	4b66      	ldr	r3, [pc, #408]	; (800c648 <CUSTOM_HID_OutEvent_FS+0x280>)
 800c4b0:	2204      	movs	r2, #4
 800c4b2:	701a      	strb	r2, [r3, #0]
			l_answer[1] = l_command;
 800c4b4:	4b63      	ldr	r3, [pc, #396]	; (800c644 <CUSTOM_HID_OutEvent_FS+0x27c>)
 800c4b6:	781a      	ldrb	r2, [r3, #0]
 800c4b8:	4b63      	ldr	r3, [pc, #396]	; (800c648 <CUSTOM_HID_OutEvent_FS+0x280>)
 800c4ba:	705a      	strb	r2, [r3, #1]

			l_len = 3;
 800c4bc:	4b63      	ldr	r3, [pc, #396]	; (800c64c <CUSTOM_HID_OutEvent_FS+0x284>)
 800c4be:	2203      	movs	r2, #3
 800c4c0:	701a      	strb	r2, [r3, #0]
			uint8_t l_res = 1;			//1 - success, >1 - error code
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			switch (l_command) {
 800c4c8:	4b5e      	ldr	r3, [pc, #376]	; (800c644 <CUSTOM_HID_OutEvent_FS+0x27c>)
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	2b08      	cmp	r3, #8
 800c4d0:	f200 82f8 	bhi.w	800cac4 <CUSTOM_HID_OutEvent_FS+0x6fc>
 800c4d4:	a201      	add	r2, pc, #4	; (adr r2, 800c4dc <CUSTOM_HID_OutEvent_FS+0x114>)
 800c4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4da:	bf00      	nop
 800c4dc:	0800c9e7 	.word	0x0800c9e7
 800c4e0:	0800c501 	.word	0x0800c501
 800c4e4:	0800ca1f 	.word	0x0800ca1f
 800c4e8:	0800c501 	.word	0x0800c501
 800c4ec:	0800c9bf 	.word	0x0800c9bf
 800c4f0:	0800c501 	.word	0x0800c501
 800c4f4:	0800ca71 	.word	0x0800ca71
 800c4f8:	0800ca77 	.word	0x0800ca77
 800c4fc:	0800ca91 	.word	0x0800ca91
				case 2:		//ON_LEDS
				case 4:		//ON_SENSORS
				case 6:		//COMMON_ON
					;
					dbg(2)
 800c500:	4b4d      	ldr	r3, [pc, #308]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	2b46      	cmp	r3, #70	; 0x46
 800c506:	d902      	bls.n	800c50e <CUSTOM_HID_OutEvent_FS+0x146>
 800c508:	4b4b      	ldr	r3, [pc, #300]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c50a:	2202      	movs	r2, #2
 800c50c:	701a      	strb	r2, [r3, #0]
 800c50e:	4b4a      	ldr	r3, [pc, #296]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	1c5a      	adds	r2, r3, #1
 800c514:	b2d1      	uxtb	r1, r2
 800c516:	4a48      	ldr	r2, [pc, #288]	; (800c638 <CUSTOM_HID_OutEvent_FS+0x270>)
 800c518:	7011      	strb	r1, [r2, #0]
 800c51a:	461a      	mov	r2, r3
 800c51c:	4b47      	ldr	r3, [pc, #284]	; (800c63c <CUSTOM_HID_OutEvent_FS+0x274>)
 800c51e:	2102      	movs	r1, #2
 800c520:	5499      	strb	r1, [r3, r2]

					uint16_t l_one_tick_length	= l_command_arr[2] | (uint16_t) l_command_arr[3] << 8 ;
 800c522:	6a3b      	ldr	r3, [r7, #32]
 800c524:	3302      	adds	r3, #2
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	b21a      	sxth	r2, r3
 800c52a:	6a3b      	ldr	r3, [r7, #32]
 800c52c:	3303      	adds	r3, #3
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	021b      	lsls	r3, r3, #8
 800c532:	b21b      	sxth	r3, r3
 800c534:	4313      	orrs	r3, r2
 800c536:	b21b      	sxth	r3, r3
 800c538:	83fb      	strh	r3, [r7, #30]
					uint16_t l_pixels_per_tick	= l_command_arr[4] | (uint16_t) l_command_arr[5] << 8 ;
 800c53a:	6a3b      	ldr	r3, [r7, #32]
 800c53c:	3304      	adds	r3, #4
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	b21a      	sxth	r2, r3
 800c542:	6a3b      	ldr	r3, [r7, #32]
 800c544:	3305      	adds	r3, #5
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	021b      	lsls	r3, r3, #8
 800c54a:	b21b      	sxth	r3, r3
 800c54c:	4313      	orrs	r3, r2
 800c54e:	b21b      	sxth	r3, r3
 800c550:	83bb      	strh	r3, [r7, #28]
					uint8_t l_number_of_ticks	= l_command_arr[6];
 800c552:	6a3b      	ldr	r3, [r7, #32]
 800c554:	799b      	ldrb	r3, [r3, #6]
 800c556:	76fb      	strb	r3, [r7, #27]
					uint8_t l_number_of_leds	= l_command_arr[7];
 800c558:	6a3b      	ldr	r3, [r7, #32]
 800c55a:	79db      	ldrb	r3, [r3, #7]
 800c55c:	76bb      	strb	r3, [r7, #26]
					uint8_t i = 8;
 800c55e:	2308      	movs	r3, #8
 800c560:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

					if (	2 == l_command		//ON_LEDS
 800c564:	4b37      	ldr	r3, [pc, #220]	; (800c644 <CUSTOM_HID_OutEvent_FS+0x27c>)
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d004      	beq.n	800c576 <CUSTOM_HID_OutEvent_FS+0x1ae>
						||	6 == l_command		//COMMON_ON
 800c56c:	4b35      	ldr	r3, [pc, #212]	; (800c644 <CUSTOM_HID_OutEvent_FS+0x27c>)
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	2b06      	cmp	r3, #6
 800c572:	f040 80fa 	bne.w	800c76a <CUSTOM_HID_OutEvent_FS+0x3a2>
					) {
						if (TIM3->CR1 & TIM_CR1_CEN)
 800c576:	4b36      	ldr	r3, [pc, #216]	; (800c650 <CUSTOM_HID_OutEvent_FS+0x288>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f003 0301 	and.w	r3, r3, #1
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d003      	beq.n	800c58a <CUSTOM_HID_OutEvent_FS+0x1c2>
							l_res = 2;		//LEDs already started
 800c582:	2302      	movs	r3, #2
 800c584:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c588:	e0ef      	b.n	800c76a <CUSTOM_HID_OutEvent_FS+0x3a2>
						else if (l_number_of_leds > 0) {
 800c58a:	7ebb      	ldrb	r3, [r7, #26]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f000 80ec 	beq.w	800c76a <CUSTOM_HID_OutEvent_FS+0x3a2>
 800c592:	466b      	mov	r3, sp
 800c594:	4618      	mov	r0, r3
							l_slots_tick.number_of_ticks	= l_number_of_ticks;
 800c596:	4a2f      	ldr	r2, [pc, #188]	; (800c654 <CUSTOM_HID_OutEvent_FS+0x28c>)
 800c598:	7efb      	ldrb	r3, [r7, #27]
 800c59a:	7013      	strb	r3, [r2, #0]
							l_slots_tick.number_of_leds		= l_number_of_leds;
 800c59c:	4a2d      	ldr	r2, [pc, #180]	; (800c654 <CUSTOM_HID_OutEvent_FS+0x28c>)
 800c59e:	7ebb      	ldrb	r3, [r7, #26]
 800c5a0:	7053      	strb	r3, [r2, #1]
							l_slots_tick.current_tick		= 0;
 800c5a2:	4b2c      	ldr	r3, [pc, #176]	; (800c654 <CUSTOM_HID_OutEvent_FS+0x28c>)
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	709a      	strb	r2, [r3, #2]

							uint8_t l_prev_turn[l_number_of_leds];
 800c5a8:	7eb9      	ldrb	r1, [r7, #26]
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	3b01      	subs	r3, #1
 800c5ae:	617b      	str	r3, [r7, #20]
 800c5b0:	b2cb      	uxtb	r3, r1
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	4698      	mov	r8, r3
 800c5b6:	4691      	mov	r9, r2
 800c5b8:	f04f 0200 	mov.w	r2, #0
 800c5bc:	f04f 0300 	mov.w	r3, #0
 800c5c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c5c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c5c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c5cc:	b2cb      	uxtb	r3, r1
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	461c      	mov	r4, r3
 800c5d2:	4615      	mov	r5, r2
 800c5d4:	f04f 0200 	mov.w	r2, #0
 800c5d8:	f04f 0300 	mov.w	r3, #0
 800c5dc:	00eb      	lsls	r3, r5, #3
 800c5de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c5e2:	00e2      	lsls	r2, r4, #3
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	3307      	adds	r3, #7
 800c5e8:	08db      	lsrs	r3, r3, #3
 800c5ea:	00db      	lsls	r3, r3, #3
 800c5ec:	ebad 0d03 	sub.w	sp, sp, r3
 800c5f0:	466b      	mov	r3, sp
 800c5f2:	3300      	adds	r3, #0
 800c5f4:	613b      	str	r3, [r7, #16]
							uint16_t l_on_led_points;
							uint8_t l_slot;
							uint8_t l_turn;

							for (uint8_t j = 0; j < l_number_of_leds; j++, i+=3) {
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800c5fc:	e09f      	b.n	800c73e <CUSTOM_HID_OutEvent_FS+0x376>
								l_slot			= l_command_arr[i] - 1;
 800c5fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c602:	6a3a      	ldr	r2, [r7, #32]
 800c604:	4413      	add	r3, r2
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	3b01      	subs	r3, #1
 800c60a:	73fb      	strb	r3, [r7, #15]
								l_on_led_points	= l_command_arr[i + 1] | (uint16_t) l_command_arr[i + 2] << 8;
 800c60c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c610:	3301      	adds	r3, #1
 800c612:	6a3a      	ldr	r2, [r7, #32]
 800c614:	4413      	add	r3, r2
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	b21a      	sxth	r2, r3
 800c61a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c61e:	3302      	adds	r3, #2
 800c620:	6a39      	ldr	r1, [r7, #32]
 800c622:	440b      	add	r3, r1
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	021b      	lsls	r3, r3, #8
 800c628:	b21b      	sxth	r3, r3
 800c62a:	4313      	orrs	r3, r2
 800c62c:	b21b      	sxth	r3, r3
 800c62e:	81bb      	strh	r3, [r7, #12]

								for (uint8_t k = 0; k < l_number_of_ticks; k++) {
 800c630:	2300      	movs	r3, #0
 800c632:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800c636:	e073      	b.n	800c720 <CUSTOM_HID_OutEvent_FS+0x358>
 800c638:	100000a7 	.word	0x100000a7
 800c63c:	10000060 	.word	0x10000060
 800c640:	2000046c 	.word	0x2000046c
 800c644:	100000a9 	.word	0x100000a9
 800c648:	20000748 	.word	0x20000748
 800c64c:	2000078f 	.word	0x2000078f
 800c650:	40000400 	.word	0x40000400
 800c654:	100000d0 	.word	0x100000d0
									l_turn = (l_on_led_points & 1U << k) > 0;
 800c658:	89ba      	ldrh	r2, [r7, #12]
 800c65a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c65e:	fa22 f303 	lsr.w	r3, r2, r3
 800c662:	f003 0301 	and.w	r3, r3, #1
 800c666:	2b00      	cmp	r3, #0
 800c668:	bf14      	ite	ne
 800c66a:	2301      	movne	r3, #1
 800c66c:	2300      	moveq	r3, #0
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	72fb      	strb	r3, [r7, #11]

									if (0 == j) {
 800c672:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c676:	2b00      	cmp	r3, #0
 800c678:	d10d      	bne.n	800c696 <CUSTOM_HID_OutEvent_FS+0x2ce>
										l_slots_tick.tick[k].on_slots = 0;
 800c67a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c67e:	4aab      	ldr	r2, [pc, #684]	; (800c92c <CUSTOM_HID_OutEvent_FS+0x564>)
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	4413      	add	r3, r2
 800c684:	2200      	movs	r2, #0
 800c686:	80da      	strh	r2, [r3, #6]
										l_slots_tick.tick[k].off_slots = 0;
 800c688:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c68c:	4aa7      	ldr	r2, [pc, #668]	; (800c92c <CUSTOM_HID_OutEvent_FS+0x564>)
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	4413      	add	r3, r2
 800c692:	2200      	movs	r2, #0
 800c694:	809a      	strh	r2, [r3, #4]
									}

									if (l_prev_turn[j] != l_turn
 800c696:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c69a:	693a      	ldr	r2, [r7, #16]
 800c69c:	5cd3      	ldrb	r3, [r2, r3]
 800c69e:	7afa      	ldrb	r2, [r7, #11]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d103      	bne.n	800c6ac <CUSTOM_HID_OutEvent_FS+0x2e4>
										|| 0 == k
 800c6a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d134      	bne.n	800c716 <CUSTOM_HID_OutEvent_FS+0x34e>
									) {
										if (l_turn)
 800c6ac:	7afb      	ldrb	r3, [r7, #11]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d016      	beq.n	800c6e0 <CUSTOM_HID_OutEvent_FS+0x318>
											l_slots_tick.tick[k].on_slots |= (uint16_t) 1 << l_slot;
 800c6b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c6b6:	4a9d      	ldr	r2, [pc, #628]	; (800c92c <CUSTOM_HID_OutEvent_FS+0x564>)
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	4413      	add	r3, r2
 800c6bc:	88db      	ldrh	r3, [r3, #6]
 800c6be:	b21a      	sxth	r2, r3
 800c6c0:	7bfb      	ldrb	r3, [r7, #15]
 800c6c2:	2101      	movs	r1, #1
 800c6c4:	fa01 f303 	lsl.w	r3, r1, r3
 800c6c8:	b21b      	sxth	r3, r3
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	b21a      	sxth	r2, r3
 800c6ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c6d2:	b291      	uxth	r1, r2
 800c6d4:	4a95      	ldr	r2, [pc, #596]	; (800c92c <CUSTOM_HID_OutEvent_FS+0x564>)
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	4413      	add	r3, r2
 800c6da:	460a      	mov	r2, r1
 800c6dc:	80da      	strh	r2, [r3, #6]
 800c6de:	e015      	b.n	800c70c <CUSTOM_HID_OutEvent_FS+0x344>
										else
											l_slots_tick.tick[k].off_slots |= (uint16_t) 1 << l_slot;
 800c6e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c6e4:	4a91      	ldr	r2, [pc, #580]	; (800c92c <CUSTOM_HID_OutEvent_FS+0x564>)
 800c6e6:	009b      	lsls	r3, r3, #2
 800c6e8:	4413      	add	r3, r2
 800c6ea:	889b      	ldrh	r3, [r3, #4]
 800c6ec:	b21a      	sxth	r2, r3
 800c6ee:	7bfb      	ldrb	r3, [r7, #15]
 800c6f0:	2101      	movs	r1, #1
 800c6f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c6f6:	b21b      	sxth	r3, r3
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	b21a      	sxth	r2, r3
 800c6fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c700:	b291      	uxth	r1, r2
 800c702:	4a8a      	ldr	r2, [pc, #552]	; (800c92c <CUSTOM_HID_OutEvent_FS+0x564>)
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	4413      	add	r3, r2
 800c708:	460a      	mov	r2, r1
 800c70a:	809a      	strh	r2, [r3, #4]

										l_prev_turn[j] = l_turn;
 800c70c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c710:	693a      	ldr	r2, [r7, #16]
 800c712:	7af9      	ldrb	r1, [r7, #11]
 800c714:	54d1      	strb	r1, [r2, r3]
								for (uint8_t k = 0; k < l_number_of_ticks; k++) {
 800c716:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c71a:	3301      	adds	r3, #1
 800c71c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800c720:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c724:	7efb      	ldrb	r3, [r7, #27]
 800c726:	429a      	cmp	r2, r3
 800c728:	d396      	bcc.n	800c658 <CUSTOM_HID_OutEvent_FS+0x290>
							for (uint8_t j = 0; j < l_number_of_leds; j++, i+=3) {
 800c72a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c72e:	3301      	adds	r3, #1
 800c730:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800c734:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c738:	3303      	adds	r3, #3
 800c73a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800c73e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800c742:	7ebb      	ldrb	r3, [r7, #26]
 800c744:	429a      	cmp	r2, r3
 800c746:	f4ff af5a 	bcc.w	800c5fe <CUSTOM_HID_OutEvent_FS+0x236>
									}
								}
							}

							//TIM3->CR1 |= TIM_CR1_UDIS;
							TIM3->ARR = l_one_tick_length;
 800c74a:	4a79      	ldr	r2, [pc, #484]	; (800c930 <CUSTOM_HID_OutEvent_FS+0x568>)
 800c74c:	8bfb      	ldrh	r3, [r7, #30]
 800c74e:	62d3      	str	r3, [r2, #44]	; 0x2c
							TIM3->CNT = 0;
 800c750:	4b77      	ldr	r3, [pc, #476]	; (800c930 <CUSTOM_HID_OutEvent_FS+0x568>)
 800c752:	2200      	movs	r2, #0
 800c754:	625a      	str	r2, [r3, #36]	; 0x24
							//htim3.State = HAL_TIM_STATE_BUSY;
							TIM3->SR = 0;
 800c756:	4b76      	ldr	r3, [pc, #472]	; (800c930 <CUSTOM_HID_OutEvent_FS+0x568>)
 800c758:	2200      	movs	r2, #0
 800c75a:	611a      	str	r2, [r3, #16]
							TIM3->CR1 |= TIM_CR1_CEN;
 800c75c:	4b74      	ldr	r3, [pc, #464]	; (800c930 <CUSTOM_HID_OutEvent_FS+0x568>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a73      	ldr	r2, [pc, #460]	; (800c930 <CUSTOM_HID_OutEvent_FS+0x568>)
 800c762:	f043 0301 	orr.w	r3, r3, #1
 800c766:	6013      	str	r3, [r2, #0]
 800c768:	4685      	mov	sp, r0
							//TIM3->CR1 &= ~TIM_CR1_UDIS;
						}
					}

					uint8_t l_number_of_time_points	= l_command_arr[i];
 800c76a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c76e:	6a3a      	ldr	r2, [r7, #32]
 800c770:	4413      	add	r3, r2
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	72bb      	strb	r3, [r7, #10]

					if (	4 == l_command		//ON_SENSORS
 800c776:	4b6f      	ldr	r3, [pc, #444]	; (800c934 <CUSTOM_HID_OutEvent_FS+0x56c>)
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	2b04      	cmp	r3, #4
 800c77c:	d004      	beq.n	800c788 <CUSTOM_HID_OutEvent_FS+0x3c0>
						||	6 == l_command		//COMMON_ON
 800c77e:	4b6d      	ldr	r3, [pc, #436]	; (800c934 <CUSTOM_HID_OutEvent_FS+0x56c>)
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	2b06      	cmp	r3, #6
 800c784:	f040 80f7 	bne.w	800c976 <CUSTOM_HID_OutEvent_FS+0x5ae>
					) {
						if (TIM1->CR1 & TIM_CR1_CEN) {
 800c788:	4b6b      	ldr	r3, [pc, #428]	; (800c938 <CUSTOM_HID_OutEvent_FS+0x570>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f003 0301 	and.w	r3, r3, #1
 800c790:	2b00      	cmp	r3, #0
 800c792:	d01a      	beq.n	800c7ca <CUSTOM_HID_OutEvent_FS+0x402>
							l_res = (2 == l_res) ?	3		//LEDs and timer already started
 800c794:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d101      	bne.n	800c7a0 <CUSTOM_HID_OutEvent_FS+0x3d8>
 800c79c:	2303      	movs	r3, #3
 800c79e:	e000      	b.n	800c7a2 <CUSTOM_HID_OutEvent_FS+0x3da>
 800c7a0:	2304      	movs	r3, #4
 800c7a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
												:	4;		//Timer already started

							dbg(3)
 800c7a6:	4b65      	ldr	r3, [pc, #404]	; (800c93c <CUSTOM_HID_OutEvent_FS+0x574>)
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	2b46      	cmp	r3, #70	; 0x46
 800c7ac:	d902      	bls.n	800c7b4 <CUSTOM_HID_OutEvent_FS+0x3ec>
 800c7ae:	4b63      	ldr	r3, [pc, #396]	; (800c93c <CUSTOM_HID_OutEvent_FS+0x574>)
 800c7b0:	2202      	movs	r2, #2
 800c7b2:	701a      	strb	r2, [r3, #0]
 800c7b4:	4b61      	ldr	r3, [pc, #388]	; (800c93c <CUSTOM_HID_OutEvent_FS+0x574>)
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	1c5a      	adds	r2, r3, #1
 800c7ba:	b2d1      	uxtb	r1, r2
 800c7bc:	4a5f      	ldr	r2, [pc, #380]	; (800c93c <CUSTOM_HID_OutEvent_FS+0x574>)
 800c7be:	7011      	strb	r1, [r2, #0]
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	4b5f      	ldr	r3, [pc, #380]	; (800c940 <CUSTOM_HID_OutEvent_FS+0x578>)
 800c7c4:	2103      	movs	r1, #3
 800c7c6:	5499      	strb	r1, [r3, r2]
 800c7c8:	e0d5      	b.n	800c976 <CUSTOM_HID_OutEvent_FS+0x5ae>
						} else if (l_number_of_time_points > 0) {
 800c7ca:	7abb      	ldrb	r3, [r7, #10]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	f000 80d2 	beq.w	800c976 <CUSTOM_HID_OutEvent_FS+0x5ae>
							dbg(4)
 800c7d2:	4b5a      	ldr	r3, [pc, #360]	; (800c93c <CUSTOM_HID_OutEvent_FS+0x574>)
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	2b46      	cmp	r3, #70	; 0x46
 800c7d8:	d902      	bls.n	800c7e0 <CUSTOM_HID_OutEvent_FS+0x418>
 800c7da:	4b58      	ldr	r3, [pc, #352]	; (800c93c <CUSTOM_HID_OutEvent_FS+0x574>)
 800c7dc:	2202      	movs	r2, #2
 800c7de:	701a      	strb	r2, [r3, #0]
 800c7e0:	4b56      	ldr	r3, [pc, #344]	; (800c93c <CUSTOM_HID_OutEvent_FS+0x574>)
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	1c5a      	adds	r2, r3, #1
 800c7e6:	b2d1      	uxtb	r1, r2
 800c7e8:	4a54      	ldr	r2, [pc, #336]	; (800c93c <CUSTOM_HID_OutEvent_FS+0x574>)
 800c7ea:	7011      	strb	r1, [r2, #0]
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	4b54      	ldr	r3, [pc, #336]	; (800c940 <CUSTOM_HID_OutEvent_FS+0x578>)
 800c7f0:	2104      	movs	r1, #4
 800c7f2:	5499      	strb	r1, [r3, r2]

							l_i2c1_ext.state = l_i2c2_ext.state = l_i2c3_ext.state = init_state;
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	4b53      	ldr	r3, [pc, #332]	; (800c944 <CUSTOM_HID_OutEvent_FS+0x57c>)
 800c7f8:	4611      	mov	r1, r2
 800c7fa:	7119      	strb	r1, [r3, #4]
 800c7fc:	4b52      	ldr	r3, [pc, #328]	; (800c948 <CUSTOM_HID_OutEvent_FS+0x580>)
 800c7fe:	4611      	mov	r1, r2
 800c800:	7119      	strb	r1, [r3, #4]
 800c802:	4b52      	ldr	r3, [pc, #328]	; (800c94c <CUSTOM_HID_OutEvent_FS+0x584>)
 800c804:	711a      	strb	r2, [r3, #4]
							l_i2c1_ext.error = l_i2c2_ext.error = l_i2c3_ext.error = l_error = no_error;
 800c806:	4b52      	ldr	r3, [pc, #328]	; (800c950 <CUSTOM_HID_OutEvent_FS+0x588>)
 800c808:	2200      	movs	r2, #0
 800c80a:	701a      	strb	r2, [r3, #0]
 800c80c:	4b50      	ldr	r3, [pc, #320]	; (800c950 <CUSTOM_HID_OutEvent_FS+0x588>)
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	4a4c      	ldr	r2, [pc, #304]	; (800c944 <CUSTOM_HID_OutEvent_FS+0x57c>)
 800c812:	4619      	mov	r1, r3
 800c814:	7751      	strb	r1, [r2, #29]
 800c816:	4a4c      	ldr	r2, [pc, #304]	; (800c948 <CUSTOM_HID_OutEvent_FS+0x580>)
 800c818:	4619      	mov	r1, r3
 800c81a:	7751      	strb	r1, [r2, #29]
 800c81c:	4a4b      	ldr	r2, [pc, #300]	; (800c94c <CUSTOM_HID_OutEvent_FS+0x584>)
 800c81e:	7753      	strb	r3, [r2, #29]

							l_sensors_points.number_of_poits = l_number_of_time_points;
 800c820:	4a4c      	ldr	r2, [pc, #304]	; (800c954 <CUSTOM_HID_OutEvent_FS+0x58c>)
 800c822:	7abb      	ldrb	r3, [r7, #10]
 800c824:	7013      	strb	r3, [r2, #0]
							l_sensors_points.point_number = 0;
 800c826:	4b4b      	ldr	r3, [pc, #300]	; (800c954 <CUSTOM_HID_OutEvent_FS+0x58c>)
 800c828:	2200      	movs	r2, #0
 800c82a:	709a      	strb	r2, [r3, #2]
							i++;
 800c82c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c830:	3301      	adds	r3, #1
 800c832:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

							memcpy(l_sensors_points.on_points_word_arr, &l_command_arr[i], l_number_of_time_points * 2);
 800c836:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c83a:	6a3a      	ldr	r2, [r7, #32]
 800c83c:	18d1      	adds	r1, r2, r3
 800c83e:	7abb      	ldrb	r3, [r7, #10]
 800c840:	005b      	lsls	r3, r3, #1
 800c842:	461a      	mov	r2, r3
 800c844:	4844      	ldr	r0, [pc, #272]	; (800c958 <CUSTOM_HID_OutEvent_FS+0x590>)
 800c846:	f000 fdfb 	bl	800d440 <memcpy>

							for (uint8_t j = 0; j < l_number_of_time_points; j++) {
 800c84a:	2300      	movs	r3, #0
 800c84c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c850:	e019      	b.n	800c886 <CUSTOM_HID_OutEvent_FS+0x4be>
								l_sensors_points.on_points_word_arr[j] = (uint32_t) l_sensors_points.on_points_word_arr[j] * l_one_tick_length / l_pixels_per_tick;
 800c852:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c856:	4a3f      	ldr	r2, [pc, #252]	; (800c954 <CUSTOM_HID_OutEvent_FS+0x58c>)
 800c858:	005b      	lsls	r3, r3, #1
 800c85a:	4413      	add	r3, r2
 800c85c:	889b      	ldrh	r3, [r3, #4]
 800c85e:	461a      	mov	r2, r3
 800c860:	8bfb      	ldrh	r3, [r7, #30]
 800c862:	fb03 f202 	mul.w	r2, r3, r2
 800c866:	8bbb      	ldrh	r3, [r7, #28]
 800c868:	fbb2 f2f3 	udiv	r2, r2, r3
 800c86c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c870:	b291      	uxth	r1, r2
 800c872:	4a38      	ldr	r2, [pc, #224]	; (800c954 <CUSTOM_HID_OutEvent_FS+0x58c>)
 800c874:	005b      	lsls	r3, r3, #1
 800c876:	4413      	add	r3, r2
 800c878:	460a      	mov	r2, r1
 800c87a:	809a      	strh	r2, [r3, #4]
							for (uint8_t j = 0; j < l_number_of_time_points; j++) {
 800c87c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c880:	3301      	adds	r3, #1
 800c882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c886:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800c88a:	7abb      	ldrb	r3, [r7, #10]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d3e0      	bcc.n	800c852 <CUSTOM_HID_OutEvent_FS+0x48a>
							}

							dbg(l_sensors_points.point_number)
 800c890:	4b2a      	ldr	r3, [pc, #168]	; (800c93c <CUSTOM_HID_OutEvent_FS+0x574>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	2b46      	cmp	r3, #70	; 0x46
 800c896:	d902      	bls.n	800c89e <CUSTOM_HID_OutEvent_FS+0x4d6>
 800c898:	4b28      	ldr	r3, [pc, #160]	; (800c93c <CUSTOM_HID_OutEvent_FS+0x574>)
 800c89a:	2202      	movs	r2, #2
 800c89c:	701a      	strb	r2, [r3, #0]
 800c89e:	4b27      	ldr	r3, [pc, #156]	; (800c93c <CUSTOM_HID_OutEvent_FS+0x574>)
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	1c5a      	adds	r2, r3, #1
 800c8a4:	b2d1      	uxtb	r1, r2
 800c8a6:	4a25      	ldr	r2, [pc, #148]	; (800c93c <CUSTOM_HID_OutEvent_FS+0x574>)
 800c8a8:	7011      	strb	r1, [r2, #0]
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	4b29      	ldr	r3, [pc, #164]	; (800c954 <CUSTOM_HID_OutEvent_FS+0x58c>)
 800c8ae:	7899      	ldrb	r1, [r3, #2]
 800c8b0:	4b23      	ldr	r3, [pc, #140]	; (800c940 <CUSTOM_HID_OutEvent_FS+0x578>)
 800c8b2:	5499      	strb	r1, [r3, r2]

							//TIM1->CR1 |= TIM_CR1_UDIS;
							TIM1->ARR = l_number_of_ticks * l_one_tick_length;
 800c8b4:	7efb      	ldrb	r3, [r7, #27]
 800c8b6:	8bfa      	ldrh	r2, [r7, #30]
 800c8b8:	fb03 f202 	mul.w	r2, r3, r2
 800c8bc:	4b1e      	ldr	r3, [pc, #120]	; (800c938 <CUSTOM_HID_OutEvent_FS+0x570>)
 800c8be:	62da      	str	r2, [r3, #44]	; 0x2c

							init_compare_registers_for_sensors_timer();
 800c8c0:	f7ff fc76 	bl	800c1b0 <init_compare_registers_for_sensors_timer>

							TIM1->CNT = 0;
 800c8c4:	4b1c      	ldr	r3, [pc, #112]	; (800c938 <CUSTOM_HID_OutEvent_FS+0x570>)
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	625a      	str	r2, [r3, #36]	; 0x24

							TIM1->DIER = TIM_IT_UPDATE
								| TIM_IT_CC1
								| ((l_sensors_points.number_of_poits >= 2) ? TIM_IT_CC2 : 0)
 800c8ca:	4b22      	ldr	r3, [pc, #136]	; (800c954 <CUSTOM_HID_OutEvent_FS+0x58c>)
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	d901      	bls.n	800c8d6 <CUSTOM_HID_OutEvent_FS+0x50e>
 800c8d2:	2207      	movs	r2, #7
 800c8d4:	e000      	b.n	800c8d8 <CUSTOM_HID_OutEvent_FS+0x510>
 800c8d6:	2203      	movs	r2, #3
								| ((l_sensors_points.number_of_poits >= 3) ? TIM_IT_CC3 : 0)
 800c8d8:	4b1e      	ldr	r3, [pc, #120]	; (800c954 <CUSTOM_HID_OutEvent_FS+0x58c>)
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	d901      	bls.n	800c8e4 <CUSTOM_HID_OutEvent_FS+0x51c>
 800c8e0:	2308      	movs	r3, #8
 800c8e2:	e000      	b.n	800c8e6 <CUSTOM_HID_OutEvent_FS+0x51e>
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	4313      	orrs	r3, r2
								| ((l_sensors_points.number_of_poits >= 4) ? TIM_IT_CC4 : 0);
 800c8e8:	4a1a      	ldr	r2, [pc, #104]	; (800c954 <CUSTOM_HID_OutEvent_FS+0x58c>)
 800c8ea:	7812      	ldrb	r2, [r2, #0]
 800c8ec:	2a03      	cmp	r2, #3
 800c8ee:	d901      	bls.n	800c8f4 <CUSTOM_HID_OutEvent_FS+0x52c>
 800c8f0:	2210      	movs	r2, #16
 800c8f2:	e000      	b.n	800c8f6 <CUSTOM_HID_OutEvent_FS+0x52e>
 800c8f4:	2200      	movs	r2, #0
							TIM1->DIER = TIM_IT_UPDATE
 800c8f6:	4910      	ldr	r1, [pc, #64]	; (800c938 <CUSTOM_HID_OutEvent_FS+0x570>)
								| ((l_sensors_points.number_of_poits >= 4) ? TIM_IT_CC4 : 0);
 800c8f8:	4313      	orrs	r3, r2
							TIM1->DIER = TIM_IT_UPDATE
 800c8fa:	60cb      	str	r3, [r1, #12]

							TIM1->CCER = TIM_CCER_CC1E
								| ((l_sensors_points.number_of_poits >= 2) ? TIM_CCER_CC2E : 0)
 800c8fc:	4b15      	ldr	r3, [pc, #84]	; (800c954 <CUSTOM_HID_OutEvent_FS+0x58c>)
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	2b01      	cmp	r3, #1
 800c902:	d901      	bls.n	800c908 <CUSTOM_HID_OutEvent_FS+0x540>
 800c904:	2211      	movs	r2, #17
 800c906:	e000      	b.n	800c90a <CUSTOM_HID_OutEvent_FS+0x542>
 800c908:	2201      	movs	r2, #1
								| ((l_sensors_points.number_of_poits >= 3) ? TIM_CCER_CC3E : 0)
 800c90a:	4b12      	ldr	r3, [pc, #72]	; (800c954 <CUSTOM_HID_OutEvent_FS+0x58c>)
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d902      	bls.n	800c918 <CUSTOM_HID_OutEvent_FS+0x550>
 800c912:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c916:	e000      	b.n	800c91a <CUSTOM_HID_OutEvent_FS+0x552>
 800c918:	2300      	movs	r3, #0
 800c91a:	4313      	orrs	r3, r2
								| ((l_sensors_points.number_of_poits >= 4) ? TIM_CCER_CC4E : 0);
 800c91c:	4a0d      	ldr	r2, [pc, #52]	; (800c954 <CUSTOM_HID_OutEvent_FS+0x58c>)
 800c91e:	7812      	ldrb	r2, [r2, #0]
 800c920:	2a03      	cmp	r2, #3
 800c922:	d91b      	bls.n	800c95c <CUSTOM_HID_OutEvent_FS+0x594>
 800c924:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c928:	e019      	b.n	800c95e <CUSTOM_HID_OutEvent_FS+0x596>
 800c92a:	bf00      	nop
 800c92c:	100000d0 	.word	0x100000d0
 800c930:	40000400 	.word	0x40000400
 800c934:	100000a9 	.word	0x100000a9
 800c938:	40010000 	.word	0x40010000
 800c93c:	100000a7 	.word	0x100000a7
 800c940:	10000060 	.word	0x10000060
 800c944:	10000154 	.word	0x10000154
 800c948:	10000134 	.word	0x10000134
 800c94c:	10000114 	.word	0x10000114
 800c950:	100000a8 	.word	0x100000a8
 800c954:	100000ac 	.word	0x100000ac
 800c958:	100000b0 	.word	0x100000b0
 800c95c:	2200      	movs	r2, #0
							TIM1->CCER = TIM_CCER_CC1E
 800c95e:	498a      	ldr	r1, [pc, #552]	; (800cb88 <CUSTOM_HID_OutEvent_FS+0x7c0>)
								| ((l_sensors_points.number_of_poits >= 4) ? TIM_CCER_CC4E : 0);
 800c960:	4313      	orrs	r3, r2
							TIM1->CCER = TIM_CCER_CC1E
 800c962:	620b      	str	r3, [r1, #32]

							//htim1.State = HAL_TIM_STATE_BUSY;
							TIM1->SR = 0;
 800c964:	4b88      	ldr	r3, [pc, #544]	; (800cb88 <CUSTOM_HID_OutEvent_FS+0x7c0>)
 800c966:	2200      	movs	r2, #0
 800c968:	611a      	str	r2, [r3, #16]
							TIM1->CR1 |= TIM_CR1_CEN;
 800c96a:	4b87      	ldr	r3, [pc, #540]	; (800cb88 <CUSTOM_HID_OutEvent_FS+0x7c0>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a86      	ldr	r2, [pc, #536]	; (800cb88 <CUSTOM_HID_OutEvent_FS+0x7c0>)
 800c970:	f043 0301 	orr.w	r3, r3, #1
 800c974:	6013      	str	r3, [r2, #0]
							//TIM1->CR1 &= ~TIM_CR1_UDIS;
						}
					}

					if (1 == l_res) {
 800c976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	f040 80a6 	bne.w	800cacc <CUSTOM_HID_OutEvent_FS+0x704>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800c980:	2200      	movs	r2, #0
 800c982:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c986:	4881      	ldr	r0, [pc, #516]	; (800cb8c <CUSTOM_HID_OutEvent_FS+0x7c4>)
 800c988:	f7f6 f9f8 	bl	8002d7c <HAL_GPIO_WritePin>

						//TIM5->CR1 |= TIM_CR1_UDIS;
						TIM5->CNT = 0;
 800c98c:	4b80      	ldr	r3, [pc, #512]	; (800cb90 <CUSTOM_HID_OutEvent_FS+0x7c8>)
 800c98e:	2200      	movs	r2, #0
 800c990:	625a      	str	r2, [r3, #36]	; 0x24
						//htim5.State = HAL_TIM_STATE_BUSY;
						TIM5->SR = 0;
 800c992:	4b7f      	ldr	r3, [pc, #508]	; (800cb90 <CUSTOM_HID_OutEvent_FS+0x7c8>)
 800c994:	2200      	movs	r2, #0
 800c996:	611a      	str	r2, [r3, #16]
						TIM5->CR1 |= TIM_CR1_CEN;
 800c998:	4b7d      	ldr	r3, [pc, #500]	; (800cb90 <CUSTOM_HID_OutEvent_FS+0x7c8>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a7c      	ldr	r2, [pc, #496]	; (800cb90 <CUSTOM_HID_OutEvent_FS+0x7c8>)
 800c99e:	f043 0301 	orr.w	r3, r3, #1
 800c9a2:	6013      	str	r3, [r2, #0]
						//TIM5->CR1 &= ~TIM_CR1_UDIS;

						if (	2 == l_command		//ON_LEDS
 800c9a4:	4b7b      	ldr	r3, [pc, #492]	; (800cb94 <CUSTOM_HID_OutEvent_FS+0x7cc>)
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	2b02      	cmp	r3, #2
 800c9aa:	d004      	beq.n	800c9b6 <CUSTOM_HID_OutEvent_FS+0x5ee>
							||	6 == l_command		//COMMON_ON
 800c9ac:	4b79      	ldr	r3, [pc, #484]	; (800cb94 <CUSTOM_HID_OutEvent_FS+0x7cc>)
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	2b06      	cmp	r3, #6
 800c9b2:	f040 808b 	bne.w	800cacc <CUSTOM_HID_OutEvent_FS+0x704>
						)
							HAL_TIM_PeriodElapsedCallback(&htim3);
 800c9b6:	4878      	ldr	r0, [pc, #480]	; (800cb98 <CUSTOM_HID_OutEvent_FS+0x7d0>)
 800c9b8:	f7f4 f994 	bl	8000ce4 <HAL_TIM_PeriodElapsedCallback>
					}

					break;
 800c9bc:	e086      	b.n	800cacc <CUSTOM_HID_OutEvent_FS+0x704>
				case 5:		//COMMON_OFF
					if (TIM5->CR1 & TIM_CR1_CEN) {
 800c9be:	4b74      	ldr	r3, [pc, #464]	; (800cb90 <CUSTOM_HID_OutEvent_FS+0x7c8>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f003 0301 	and.w	r3, r3, #1
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d00a      	beq.n	800c9e0 <CUSTOM_HID_OutEvent_FS+0x618>
						TIM5->CR1 &= ~TIM_CR1_CEN;
 800c9ca:	4b71      	ldr	r3, [pc, #452]	; (800cb90 <CUSTOM_HID_OutEvent_FS+0x7c8>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4a70      	ldr	r2, [pc, #448]	; (800cb90 <CUSTOM_HID_OutEvent_FS+0x7c8>)
 800c9d0:	f023 0301 	bic.w	r3, r3, #1
 800c9d4:	6013      	str	r3, [r2, #0]
						htim5.State = HAL_TIM_STATE_READY;
 800c9d6:	4b71      	ldr	r3, [pc, #452]	; (800cb9c <CUSTOM_HID_OutEvent_FS+0x7d4>)
 800c9d8:	2201      	movs	r2, #1
 800c9da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c9de:	e002      	b.n	800c9e6 <CUSTOM_HID_OutEvent_FS+0x61e>
					 } else
						l_res = 6;		//LEDs and sensors points timer already stopped
 800c9e0:	2306      	movs	r3, #6
 800c9e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				case 1:		//OFF_LEDS
					 if (TIM3->CR1 & TIM_CR1_CEN) {
 800c9e6:	4b6e      	ldr	r3, [pc, #440]	; (800cba0 <CUSTOM_HID_OutEvent_FS+0x7d8>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f003 0301 	and.w	r3, r3, #1
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d00a      	beq.n	800ca08 <CUSTOM_HID_OutEvent_FS+0x640>
						TIM3->CR1 &= ~TIM_CR1_CEN;
 800c9f2:	4b6b      	ldr	r3, [pc, #428]	; (800cba0 <CUSTOM_HID_OutEvent_FS+0x7d8>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a6a      	ldr	r2, [pc, #424]	; (800cba0 <CUSTOM_HID_OutEvent_FS+0x7d8>)
 800c9f8:	f023 0301 	bic.w	r3, r3, #1
 800c9fc:	6013      	str	r3, [r2, #0]
						htim3.State = HAL_TIM_STATE_READY;
 800c9fe:	4b66      	ldr	r3, [pc, #408]	; (800cb98 <CUSTOM_HID_OutEvent_FS+0x7d0>)
 800ca00:	2201      	movs	r2, #1
 800ca02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ca06:	e006      	b.n	800ca16 <CUSTOM_HID_OutEvent_FS+0x64e>
					} else if (1 == l_res)
 800ca08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d102      	bne.n	800ca16 <CUSTOM_HID_OutEvent_FS+0x64e>
						l_res = 5;			//LEDs already stopped
 800ca10:	2305      	movs	r3, #5
 800ca12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

					if (1 == l_command)
 800ca16:	4b5f      	ldr	r3, [pc, #380]	; (800cb94 <CUSTOM_HID_OutEvent_FS+0x7cc>)
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d058      	beq.n	800cad0 <CUSTOM_HID_OutEvent_FS+0x708>
						break;
				case 3:		//OFF_SENSORS
					if (TIM14->CR1 & TIM_CR1_CEN) {
 800ca1e:	4b61      	ldr	r3, [pc, #388]	; (800cba4 <CUSTOM_HID_OutEvent_FS+0x7dc>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f003 0301 	and.w	r3, r3, #1
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d009      	beq.n	800ca3e <CUSTOM_HID_OutEvent_FS+0x676>
						TIM14->CR1 &= ~TIM_CR1_CEN;
 800ca2a:	4b5e      	ldr	r3, [pc, #376]	; (800cba4 <CUSTOM_HID_OutEvent_FS+0x7dc>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a5d      	ldr	r2, [pc, #372]	; (800cba4 <CUSTOM_HID_OutEvent_FS+0x7dc>)
 800ca30:	f023 0301 	bic.w	r3, r3, #1
 800ca34:	6013      	str	r3, [r2, #0]
						htim14.State = HAL_TIM_STATE_READY;
 800ca36:	4b5c      	ldr	r3, [pc, #368]	; (800cba8 <CUSTOM_HID_OutEvent_FS+0x7e0>)
 800ca38:	2201      	movs	r2, #1
 800ca3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}

					if (TIM1->CR1 & TIM_CR1_CEN) {
 800ca3e:	4b52      	ldr	r3, [pc, #328]	; (800cb88 <CUSTOM_HID_OutEvent_FS+0x7c0>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f003 0301 	and.w	r3, r3, #1
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d00a      	beq.n	800ca60 <CUSTOM_HID_OutEvent_FS+0x698>
						TIM1->CR1 &= ~TIM_CR1_CEN;
 800ca4a:	4b4f      	ldr	r3, [pc, #316]	; (800cb88 <CUSTOM_HID_OutEvent_FS+0x7c0>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4a4e      	ldr	r2, [pc, #312]	; (800cb88 <CUSTOM_HID_OutEvent_FS+0x7c0>)
 800ca50:	f023 0301 	bic.w	r3, r3, #1
 800ca54:	6013      	str	r3, [r2, #0]
						htim1.State = HAL_TIM_STATE_READY;
 800ca56:	4b55      	ldr	r3, [pc, #340]	; (800cbac <CUSTOM_HID_OutEvent_FS+0x7e4>)
 800ca58:	2201      	movs	r2, #1
 800ca5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					} else if (1 == l_res)
						l_res = 7;		//Sensors points timer already stopped

					break;
 800ca5e:	e039      	b.n	800cad4 <CUSTOM_HID_OutEvent_FS+0x70c>
					} else if (1 == l_res)
 800ca60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d135      	bne.n	800cad4 <CUSTOM_HID_OutEvent_FS+0x70c>
						l_res = 7;		//Sensors points timer already stopped
 800ca68:	2307      	movs	r3, #7
 800ca6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800ca6e:	e031      	b.n	800cad4 <CUSTOM_HID_OutEvent_FS+0x70c>
				case 7:		//GET_SENSORS_ERRORS
					copy_errors_data();
 800ca70:	f7ff fbda 	bl	800c228 <copy_errors_data>

					break;
 800ca74:	e02f      	b.n	800cad6 <CUSTOM_HID_OutEvent_FS+0x70e>
				case 8:		//GET_SENSORS_DATA
					copy_sensors_data(0);
 800ca76:	2000      	movs	r0, #0
 800ca78:	f7ff fc1a 	bl	800c2b0 <copy_sensors_data>

					l_answer[0]	= 1;		//Answer consist of sensors data
 800ca7c:	4b4c      	ldr	r3, [pc, #304]	; (800cbb0 <CUSTOM_HID_OutEvent_FS+0x7e8>)
 800ca7e:	2201      	movs	r2, #1
 800ca80:	701a      	strb	r2, [r3, #0]
					l_answer[1]	= 8;		//Command
 800ca82:	4b4b      	ldr	r3, [pc, #300]	; (800cbb0 <CUSTOM_HID_OutEvent_FS+0x7e8>)
 800ca84:	2208      	movs	r2, #8
 800ca86:	705a      	strb	r2, [r3, #1]

					l_len		= D_ANSWER_LENGTH;
 800ca88:	4b4a      	ldr	r3, [pc, #296]	; (800cbb4 <CUSTOM_HID_OutEvent_FS+0x7ec>)
 800ca8a:	2247      	movs	r2, #71	; 0x47
 800ca8c:	701a      	strb	r2, [r3, #0]

					break;
 800ca8e:	e022      	b.n	800cad6 <CUSTOM_HID_OutEvent_FS+0x70e>
				case 9:		//GET_DEBUG_DATA
					memcpy(l_answer, l_debug, D_ANSWER_LENGTH);
 800ca90:	4a47      	ldr	r2, [pc, #284]	; (800cbb0 <CUSTOM_HID_OutEvent_FS+0x7e8>)
 800ca92:	4b49      	ldr	r3, [pc, #292]	; (800cbb8 <CUSTOM_HID_OutEvent_FS+0x7f0>)
 800ca94:	4610      	mov	r0, r2
 800ca96:	4619      	mov	r1, r3
 800ca98:	2347      	movs	r3, #71	; 0x47
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	f000 fcd0 	bl	800d440 <memcpy>

					l_len		= D_ANSWER_LENGTH;
 800caa0:	4b44      	ldr	r3, [pc, #272]	; (800cbb4 <CUSTOM_HID_OutEvent_FS+0x7ec>)
 800caa2:	2247      	movs	r2, #71	; 0x47
 800caa4:	701a      	strb	r2, [r3, #0]

					memset(l_debug, 0, D_ANSWER_LENGTH);
 800caa6:	2247      	movs	r2, #71	; 0x47
 800caa8:	2100      	movs	r1, #0
 800caaa:	4843      	ldr	r0, [pc, #268]	; (800cbb8 <CUSTOM_HID_OutEvent_FS+0x7f0>)
 800caac:	f000 fcd6 	bl	800d45c <memset>
					l_dbg_pos	= 2;
 800cab0:	4b42      	ldr	r3, [pc, #264]	; (800cbbc <CUSTOM_HID_OutEvent_FS+0x7f4>)
 800cab2:	2202      	movs	r2, #2
 800cab4:	701a      	strb	r2, [r3, #0]
					l_answer[0]	= 6;
 800cab6:	4b3e      	ldr	r3, [pc, #248]	; (800cbb0 <CUSTOM_HID_OutEvent_FS+0x7e8>)
 800cab8:	2206      	movs	r2, #6
 800caba:	701a      	strb	r2, [r3, #0]
					l_answer[1]	= 9;
 800cabc:	4b3c      	ldr	r3, [pc, #240]	; (800cbb0 <CUSTOM_HID_OutEvent_FS+0x7e8>)
 800cabe:	2209      	movs	r2, #9
 800cac0:	705a      	strb	r2, [r3, #1]

					break;
 800cac2:	e008      	b.n	800cad6 <CUSTOM_HID_OutEvent_FS+0x70e>
				default:
					l_res = 8;		//Command not supported
 800cac4:	2308      	movs	r3, #8
 800cac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800caca:	e004      	b.n	800cad6 <CUSTOM_HID_OutEvent_FS+0x70e>
					break;
 800cacc:	bf00      	nop
 800cace:	e002      	b.n	800cad6 <CUSTOM_HID_OutEvent_FS+0x70e>
						break;
 800cad0:	bf00      	nop
 800cad2:	e000      	b.n	800cad6 <CUSTOM_HID_OutEvent_FS+0x70e>
					break;
 800cad4:	bf00      	nop
			}

			if (	8 != l_command
 800cad6:	4b2f      	ldr	r3, [pc, #188]	; (800cb94 <CUSTOM_HID_OutEvent_FS+0x7cc>)
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	2b08      	cmp	r3, #8
 800cadc:	d007      	beq.n	800caee <CUSTOM_HID_OutEvent_FS+0x726>
				&&	9 != l_command
 800cade:	4b2d      	ldr	r3, [pc, #180]	; (800cb94 <CUSTOM_HID_OutEvent_FS+0x7cc>)
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	2b09      	cmp	r3, #9
 800cae4:	d003      	beq.n	800caee <CUSTOM_HID_OutEvent_FS+0x726>
			)
				l_answer[2] = l_res;
 800cae6:	4a32      	ldr	r2, [pc, #200]	; (800cbb0 <CUSTOM_HID_OutEvent_FS+0x7e8>)
 800cae8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800caec:	7093      	strb	r3, [r2, #2]

			//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);

			//After transfer complete call USBD_CUSTOM_HID_DataIn - rewritten in main.c
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, l_answer, l_len);
 800caee:	4b31      	ldr	r3, [pc, #196]	; (800cbb4 <CUSTOM_HID_OutEvent_FS+0x7ec>)
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	461a      	mov	r2, r3
 800caf6:	492e      	ldr	r1, [pc, #184]	; (800cbb0 <CUSTOM_HID_OutEvent_FS+0x7e8>)
 800caf8:	4831      	ldr	r0, [pc, #196]	; (800cbc0 <CUSTOM_HID_OutEvent_FS+0x7f8>)
 800cafa:	f7fd fdeb 	bl	800a6d4 <USBD_CUSTOM_HID_SendReport>

			break;
 800cafe:	e03c      	b.n	800cb7a <CUSTOM_HID_OutEvent_FS+0x7b2>
		case 0x05:		//Get sensors data
			if (
				(		(l_i2c1_ext.state == data_ready	|| l_i2c1_ext.error != no_error)
 800cb00:	4b30      	ldr	r3, [pc, #192]	; (800cbc4 <CUSTOM_HID_OutEvent_FS+0x7fc>)
 800cb02:	791b      	ldrb	r3, [r3, #4]
 800cb04:	b2db      	uxtb	r3, r3
			if (
 800cb06:	2b07      	cmp	r3, #7
 800cb08:	d004      	beq.n	800cb14 <CUSTOM_HID_OutEvent_FS+0x74c>
				(		(l_i2c1_ext.state == data_ready	|| l_i2c1_ext.error != no_error)
 800cb0a:	4b2e      	ldr	r3, [pc, #184]	; (800cbc4 <CUSTOM_HID_OutEvent_FS+0x7fc>)
 800cb0c:	7f5b      	ldrb	r3, [r3, #29]
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d013      	beq.n	800cb3c <CUSTOM_HID_OutEvent_FS+0x774>
					&&	(l_i2c2_ext.state == data_ready	|| l_i2c2_ext.error != no_error)
 800cb14:	4b2c      	ldr	r3, [pc, #176]	; (800cbc8 <CUSTOM_HID_OutEvent_FS+0x800>)
 800cb16:	791b      	ldrb	r3, [r3, #4]
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	2b07      	cmp	r3, #7
 800cb1c:	d004      	beq.n	800cb28 <CUSTOM_HID_OutEvent_FS+0x760>
 800cb1e:	4b2a      	ldr	r3, [pc, #168]	; (800cbc8 <CUSTOM_HID_OutEvent_FS+0x800>)
 800cb20:	7f5b      	ldrb	r3, [r3, #29]
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d009      	beq.n	800cb3c <CUSTOM_HID_OutEvent_FS+0x774>
					&&	(l_i2c3_ext.state == data_ready	|| l_i2c3_ext.error != no_error)
 800cb28:	4b28      	ldr	r3, [pc, #160]	; (800cbcc <CUSTOM_HID_OutEvent_FS+0x804>)
 800cb2a:	791b      	ldrb	r3, [r3, #4]
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	2b07      	cmp	r3, #7
 800cb30:	d008      	beq.n	800cb44 <CUSTOM_HID_OutEvent_FS+0x77c>
 800cb32:	4b26      	ldr	r3, [pc, #152]	; (800cbcc <CUSTOM_HID_OutEvent_FS+0x804>)
 800cb34:	7f5b      	ldrb	r3, [r3, #29]
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d103      	bne.n	800cb44 <CUSTOM_HID_OutEvent_FS+0x77c>
				)
				||	l_error != no_error
 800cb3c:	4b24      	ldr	r3, [pc, #144]	; (800cbd0 <CUSTOM_HID_OutEvent_FS+0x808>)
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d007      	beq.n	800cb54 <CUSTOM_HID_OutEvent_FS+0x78c>
			) {
				//dbg(5)

				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800cb44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cb48:	4810      	ldr	r0, [pc, #64]	; (800cb8c <CUSTOM_HID_OutEvent_FS+0x7c4>)
 800cb4a:	f7f6 f930 	bl	8002dae <HAL_GPIO_TogglePin>

				//dbg(41)
				need_send_data();
 800cb4e:	f7ff fc1b 	bl	800c388 <need_send_data>
					TIM14->SR = 0;
					TIM14->CR1 |= TIM_CR1_CEN;
				}
			}

			break;
 800cb52:	e011      	b.n	800cb78 <CUSTOM_HID_OutEvent_FS+0x7b0>
				if (TIM14->CR1 & TIM_CR1_CEN) {
 800cb54:	4b13      	ldr	r3, [pc, #76]	; (800cba4 <CUSTOM_HID_OutEvent_FS+0x7dc>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f003 0301 	and.w	r3, r3, #1
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d10b      	bne.n	800cb78 <CUSTOM_HID_OutEvent_FS+0x7b0>
					TIM14->CNT = 0;
 800cb60:	4b10      	ldr	r3, [pc, #64]	; (800cba4 <CUSTOM_HID_OutEvent_FS+0x7dc>)
 800cb62:	2200      	movs	r2, #0
 800cb64:	625a      	str	r2, [r3, #36]	; 0x24
					TIM14->SR = 0;
 800cb66:	4b0f      	ldr	r3, [pc, #60]	; (800cba4 <CUSTOM_HID_OutEvent_FS+0x7dc>)
 800cb68:	2200      	movs	r2, #0
 800cb6a:	611a      	str	r2, [r3, #16]
					TIM14->CR1 |= TIM_CR1_CEN;
 800cb6c:	4b0d      	ldr	r3, [pc, #52]	; (800cba4 <CUSTOM_HID_OutEvent_FS+0x7dc>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a0c      	ldr	r2, [pc, #48]	; (800cba4 <CUSTOM_HID_OutEvent_FS+0x7dc>)
 800cb72:	f043 0301 	orr.w	r3, r3, #1
 800cb76:	6013      	str	r3, [r2, #0]
			break;
 800cb78:	bf00      	nop
	}

	return (USBD_OK);
 800cb7a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3730      	adds	r7, #48	; 0x30
 800cb80:	46bd      	mov	sp, r7
 800cb82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800cb86:	bf00      	nop
 800cb88:	40010000 	.word	0x40010000
 800cb8c:	40020c00 	.word	0x40020c00
 800cb90:	40000c00 	.word	0x40000c00
 800cb94:	100000a9 	.word	0x100000a9
 800cb98:	200002b0 	.word	0x200002b0
 800cb9c:	200002f8 	.word	0x200002f8
 800cba0:	40000400 	.word	0x40000400
 800cba4:	40002000 	.word	0x40002000
 800cba8:	20000418 	.word	0x20000418
 800cbac:	20000268 	.word	0x20000268
 800cbb0:	20000748 	.word	0x20000748
 800cbb4:	2000078f 	.word	0x2000078f
 800cbb8:	10000060 	.word	0x10000060
 800cbbc:	100000a7 	.word	0x100000a7
 800cbc0:	2000046c 	.word	0x2000046c
 800cbc4:	10000114 	.word	0x10000114
 800cbc8:	10000134 	.word	0x10000134
 800cbcc:	10000154 	.word	0x10000154
 800cbd0:	100000a8 	.word	0x100000a8

0800cbd4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b083      	sub	sp, #12
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	4603      	mov	r3, r0
 800cbdc:	6039      	str	r1, [r7, #0]
 800cbde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	2212      	movs	r2, #18
 800cbe4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cbe6:	4b03      	ldr	r3, [pc, #12]	; (800cbf4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	370c      	adds	r7, #12
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr
 800cbf4:	200000fc 	.word	0x200000fc

0800cbf8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	4603      	mov	r3, r0
 800cc00:	6039      	str	r1, [r7, #0]
 800cc02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	2204      	movs	r2, #4
 800cc08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cc0a:	4b03      	ldr	r3, [pc, #12]	; (800cc18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	370c      	adds	r7, #12
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr
 800cc18:	20000110 	.word	0x20000110

0800cc1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	4603      	mov	r3, r0
 800cc24:	6039      	str	r1, [r7, #0]
 800cc26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc28:	79fb      	ldrb	r3, [r7, #7]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d105      	bne.n	800cc3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc2e:	683a      	ldr	r2, [r7, #0]
 800cc30:	4907      	ldr	r1, [pc, #28]	; (800cc50 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc32:	4808      	ldr	r0, [pc, #32]	; (800cc54 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc34:	f7ff f8f0 	bl	800be18 <USBD_GetString>
 800cc38:	e004      	b.n	800cc44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc3a:	683a      	ldr	r2, [r7, #0]
 800cc3c:	4904      	ldr	r1, [pc, #16]	; (800cc50 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc3e:	4805      	ldr	r0, [pc, #20]	; (800cc54 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc40:	f7ff f8ea 	bl	800be18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc44:	4b02      	ldr	r3, [pc, #8]	; (800cc50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3708      	adds	r7, #8
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	20000790 	.word	0x20000790
 800cc54:	0800d4e4 	.word	0x0800d4e4

0800cc58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	4603      	mov	r3, r0
 800cc60:	6039      	str	r1, [r7, #0]
 800cc62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc64:	683a      	ldr	r2, [r7, #0]
 800cc66:	4904      	ldr	r1, [pc, #16]	; (800cc78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc68:	4804      	ldr	r0, [pc, #16]	; (800cc7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc6a:	f7ff f8d5 	bl	800be18 <USBD_GetString>
  return USBD_StrDesc;
 800cc6e:	4b02      	ldr	r3, [pc, #8]	; (800cc78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3708      	adds	r7, #8
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}
 800cc78:	20000790 	.word	0x20000790
 800cc7c:	0800d4e8 	.word	0x0800d4e8

0800cc80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	4603      	mov	r3, r0
 800cc88:	6039      	str	r1, [r7, #0]
 800cc8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	221a      	movs	r2, #26
 800cc90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc92:	f000 f843 	bl	800cd1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc96:	4b02      	ldr	r3, [pc, #8]	; (800cca0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3708      	adds	r7, #8
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	20000114 	.word	0x20000114

0800cca4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	4603      	mov	r3, r0
 800ccac:	6039      	str	r1, [r7, #0]
 800ccae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ccb0:	79fb      	ldrb	r3, [r7, #7]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d105      	bne.n	800ccc2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccb6:	683a      	ldr	r2, [r7, #0]
 800ccb8:	4907      	ldr	r1, [pc, #28]	; (800ccd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccba:	4808      	ldr	r0, [pc, #32]	; (800ccdc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ccbc:	f7ff f8ac 	bl	800be18 <USBD_GetString>
 800ccc0:	e004      	b.n	800cccc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccc2:	683a      	ldr	r2, [r7, #0]
 800ccc4:	4904      	ldr	r1, [pc, #16]	; (800ccd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccc6:	4805      	ldr	r0, [pc, #20]	; (800ccdc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ccc8:	f7ff f8a6 	bl	800be18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cccc:	4b02      	ldr	r3, [pc, #8]	; (800ccd8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3708      	adds	r7, #8
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	20000790 	.word	0x20000790
 800ccdc:	0800d4f4 	.word	0x0800d4f4

0800cce0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	4603      	mov	r3, r0
 800cce8:	6039      	str	r1, [r7, #0]
 800ccea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccec:	79fb      	ldrb	r3, [r7, #7]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d105      	bne.n	800ccfe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccf2:	683a      	ldr	r2, [r7, #0]
 800ccf4:	4907      	ldr	r1, [pc, #28]	; (800cd14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccf6:	4808      	ldr	r0, [pc, #32]	; (800cd18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccf8:	f7ff f88e 	bl	800be18 <USBD_GetString>
 800ccfc:	e004      	b.n	800cd08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	4904      	ldr	r1, [pc, #16]	; (800cd14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd02:	4805      	ldr	r0, [pc, #20]	; (800cd18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd04:	f7ff f888 	bl	800be18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd08:	4b02      	ldr	r3, [pc, #8]	; (800cd14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	20000790 	.word	0x20000790
 800cd18:	0800d508 	.word	0x0800d508

0800cd1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd22:	4b0f      	ldr	r3, [pc, #60]	; (800cd60 <Get_SerialNum+0x44>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd28:	4b0e      	ldr	r3, [pc, #56]	; (800cd64 <Get_SerialNum+0x48>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd2e:	4b0e      	ldr	r3, [pc, #56]	; (800cd68 <Get_SerialNum+0x4c>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	4413      	add	r3, r2
 800cd3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d009      	beq.n	800cd56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd42:	2208      	movs	r2, #8
 800cd44:	4909      	ldr	r1, [pc, #36]	; (800cd6c <Get_SerialNum+0x50>)
 800cd46:	68f8      	ldr	r0, [r7, #12]
 800cd48:	f000 f814 	bl	800cd74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd4c:	2204      	movs	r2, #4
 800cd4e:	4908      	ldr	r1, [pc, #32]	; (800cd70 <Get_SerialNum+0x54>)
 800cd50:	68b8      	ldr	r0, [r7, #8]
 800cd52:	f000 f80f 	bl	800cd74 <IntToUnicode>
  }
}
 800cd56:	bf00      	nop
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	1fff7a10 	.word	0x1fff7a10
 800cd64:	1fff7a14 	.word	0x1fff7a14
 800cd68:	1fff7a18 	.word	0x1fff7a18
 800cd6c:	20000116 	.word	0x20000116
 800cd70:	20000126 	.word	0x20000126

0800cd74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b087      	sub	sp, #28
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	4613      	mov	r3, r2
 800cd80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd82:	2300      	movs	r3, #0
 800cd84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd86:	2300      	movs	r3, #0
 800cd88:	75fb      	strb	r3, [r7, #23]
 800cd8a:	e027      	b.n	800cddc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	0f1b      	lsrs	r3, r3, #28
 800cd90:	2b09      	cmp	r3, #9
 800cd92:	d80b      	bhi.n	800cdac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	0f1b      	lsrs	r3, r3, #28
 800cd98:	b2da      	uxtb	r2, r3
 800cd9a:	7dfb      	ldrb	r3, [r7, #23]
 800cd9c:	005b      	lsls	r3, r3, #1
 800cd9e:	4619      	mov	r1, r3
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	440b      	add	r3, r1
 800cda4:	3230      	adds	r2, #48	; 0x30
 800cda6:	b2d2      	uxtb	r2, r2
 800cda8:	701a      	strb	r2, [r3, #0]
 800cdaa:	e00a      	b.n	800cdc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	0f1b      	lsrs	r3, r3, #28
 800cdb0:	b2da      	uxtb	r2, r3
 800cdb2:	7dfb      	ldrb	r3, [r7, #23]
 800cdb4:	005b      	lsls	r3, r3, #1
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	440b      	add	r3, r1
 800cdbc:	3237      	adds	r2, #55	; 0x37
 800cdbe:	b2d2      	uxtb	r2, r2
 800cdc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	011b      	lsls	r3, r3, #4
 800cdc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cdc8:	7dfb      	ldrb	r3, [r7, #23]
 800cdca:	005b      	lsls	r3, r3, #1
 800cdcc:	3301      	adds	r3, #1
 800cdce:	68ba      	ldr	r2, [r7, #8]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cdd6:	7dfb      	ldrb	r3, [r7, #23]
 800cdd8:	3301      	adds	r3, #1
 800cdda:	75fb      	strb	r3, [r7, #23]
 800cddc:	7dfa      	ldrb	r2, [r7, #23]
 800cdde:	79fb      	ldrb	r3, [r7, #7]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d3d3      	bcc.n	800cd8c <IntToUnicode+0x18>
  }
}
 800cde4:	bf00      	nop
 800cde6:	bf00      	nop
 800cde8:	371c      	adds	r7, #28
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
	...

0800cdf4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b08a      	sub	sp, #40	; 0x28
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cdfc:	f107 0314 	add.w	r3, r7, #20
 800ce00:	2200      	movs	r2, #0
 800ce02:	601a      	str	r2, [r3, #0]
 800ce04:	605a      	str	r2, [r3, #4]
 800ce06:	609a      	str	r2, [r3, #8]
 800ce08:	60da      	str	r2, [r3, #12]
 800ce0a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce14:	d13a      	bne.n	800ce8c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce16:	2300      	movs	r3, #0
 800ce18:	613b      	str	r3, [r7, #16]
 800ce1a:	4b1e      	ldr	r3, [pc, #120]	; (800ce94 <HAL_PCD_MspInit+0xa0>)
 800ce1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce1e:	4a1d      	ldr	r2, [pc, #116]	; (800ce94 <HAL_PCD_MspInit+0xa0>)
 800ce20:	f043 0301 	orr.w	r3, r3, #1
 800ce24:	6313      	str	r3, [r2, #48]	; 0x30
 800ce26:	4b1b      	ldr	r3, [pc, #108]	; (800ce94 <HAL_PCD_MspInit+0xa0>)
 800ce28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce2a:	f003 0301 	and.w	r3, r3, #1
 800ce2e:	613b      	str	r3, [r7, #16]
 800ce30:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ce32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ce36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce38:	2302      	movs	r3, #2
 800ce3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce40:	2303      	movs	r3, #3
 800ce42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ce44:	230a      	movs	r3, #10
 800ce46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce48:	f107 0314 	add.w	r3, r7, #20
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	4812      	ldr	r0, [pc, #72]	; (800ce98 <HAL_PCD_MspInit+0xa4>)
 800ce50:	f7f5 fdf8 	bl	8002a44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ce54:	4b0f      	ldr	r3, [pc, #60]	; (800ce94 <HAL_PCD_MspInit+0xa0>)
 800ce56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce58:	4a0e      	ldr	r2, [pc, #56]	; (800ce94 <HAL_PCD_MspInit+0xa0>)
 800ce5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce5e:	6353      	str	r3, [r2, #52]	; 0x34
 800ce60:	2300      	movs	r3, #0
 800ce62:	60fb      	str	r3, [r7, #12]
 800ce64:	4b0b      	ldr	r3, [pc, #44]	; (800ce94 <HAL_PCD_MspInit+0xa0>)
 800ce66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce68:	4a0a      	ldr	r2, [pc, #40]	; (800ce94 <HAL_PCD_MspInit+0xa0>)
 800ce6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce6e:	6453      	str	r3, [r2, #68]	; 0x44
 800ce70:	4b08      	ldr	r3, [pc, #32]	; (800ce94 <HAL_PCD_MspInit+0xa0>)
 800ce72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce78:	60fb      	str	r3, [r7, #12]
 800ce7a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 2);
 800ce7c:	2202      	movs	r2, #2
 800ce7e:	2102      	movs	r1, #2
 800ce80:	2043      	movs	r0, #67	; 0x43
 800ce82:	f7f5 fd78 	bl	8002976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ce86:	2043      	movs	r0, #67	; 0x43
 800ce88:	f7f5 fd91 	bl	80029ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ce8c:	bf00      	nop
 800ce8e:	3728      	adds	r7, #40	; 0x28
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	40023800 	.word	0x40023800
 800ce98:	40020000 	.word	0x40020000

0800ce9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	4610      	mov	r0, r2
 800ceb4:	f7fd fe51 	bl	800ab5a <USBD_LL_SetupStage>
}
 800ceb8:	bf00      	nop
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	460b      	mov	r3, r1
 800ceca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ced2:	78fa      	ldrb	r2, [r7, #3]
 800ced4:	6879      	ldr	r1, [r7, #4]
 800ced6:	4613      	mov	r3, r2
 800ced8:	00db      	lsls	r3, r3, #3
 800ceda:	4413      	add	r3, r2
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	440b      	add	r3, r1
 800cee0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	78fb      	ldrb	r3, [r7, #3]
 800cee8:	4619      	mov	r1, r3
 800ceea:	f7fd fe8b 	bl	800ac04 <USBD_LL_DataOutStage>
}
 800ceee:	bf00      	nop
 800cef0:	3708      	adds	r7, #8
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b082      	sub	sp, #8
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	460b      	mov	r3, r1
 800cf00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cf08:	78fa      	ldrb	r2, [r7, #3]
 800cf0a:	6879      	ldr	r1, [r7, #4]
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	00db      	lsls	r3, r3, #3
 800cf10:	4413      	add	r3, r2
 800cf12:	009b      	lsls	r3, r3, #2
 800cf14:	440b      	add	r3, r1
 800cf16:	334c      	adds	r3, #76	; 0x4c
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	78fb      	ldrb	r3, [r7, #3]
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	f7fd ff24 	bl	800ad6a <USBD_LL_DataInStage>
}
 800cf22:	bf00      	nop
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b082      	sub	sp, #8
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7fe f858 	bl	800afee <USBD_LL_SOF>
}
 800cf3e:	bf00      	nop
 800cf40:	3708      	adds	r7, #8
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b084      	sub	sp, #16
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf4e:	2301      	movs	r3, #1
 800cf50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d102      	bne.n	800cf60 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	73fb      	strb	r3, [r7, #15]
 800cf5e:	e008      	b.n	800cf72 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	68db      	ldr	r3, [r3, #12]
 800cf64:	2b02      	cmp	r3, #2
 800cf66:	d102      	bne.n	800cf6e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	73fb      	strb	r3, [r7, #15]
 800cf6c:	e001      	b.n	800cf72 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cf6e:	f7f5 f835 	bl	8001fdc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf78:	7bfa      	ldrb	r2, [r7, #15]
 800cf7a:	4611      	mov	r1, r2
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7fd fff8 	bl	800af72 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f7fd ffa0 	bl	800aece <USBD_LL_Reset>
}
 800cf8e:	bf00      	nop
 800cf90:	3710      	adds	r7, #16
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
	...

0800cf98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fd fff3 	bl	800af92 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	6812      	ldr	r2, [r2, #0]
 800cfba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cfbe:	f043 0301 	orr.w	r3, r3, #1
 800cfc2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6a1b      	ldr	r3, [r3, #32]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d005      	beq.n	800cfd8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cfcc:	4b04      	ldr	r3, [pc, #16]	; (800cfe0 <HAL_PCD_SuspendCallback+0x48>)
 800cfce:	691b      	ldr	r3, [r3, #16]
 800cfd0:	4a03      	ldr	r2, [pc, #12]	; (800cfe0 <HAL_PCD_SuspendCallback+0x48>)
 800cfd2:	f043 0306 	orr.w	r3, r3, #6
 800cfd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cfd8:	bf00      	nop
 800cfda:	3708      	adds	r7, #8
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	e000ed00 	.word	0xe000ed00

0800cfe4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fd ffe3 	bl	800afbe <USBD_LL_Resume>
}
 800cff8:	bf00      	nop
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	460b      	mov	r3, r1
 800d00a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d012:	78fa      	ldrb	r2, [r7, #3]
 800d014:	4611      	mov	r1, r2
 800d016:	4618      	mov	r0, r3
 800d018:	f7fe f83b 	bl	800b092 <USBD_LL_IsoOUTIncomplete>
}
 800d01c:	bf00      	nop
 800d01e:	3708      	adds	r7, #8
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	460b      	mov	r3, r1
 800d02e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d036:	78fa      	ldrb	r2, [r7, #3]
 800d038:	4611      	mov	r1, r2
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fd fff7 	bl	800b02e <USBD_LL_IsoINIncomplete>
}
 800d040:	bf00      	nop
 800d042:	3708      	adds	r7, #8
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b082      	sub	sp, #8
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d056:	4618      	mov	r0, r3
 800d058:	f7fe f84d 	bl	800b0f6 <USBD_LL_DevConnected>
}
 800d05c:	bf00      	nop
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d072:	4618      	mov	r0, r3
 800d074:	f7fe f84a 	bl	800b10c <USBD_LL_DevDisconnected>
}
 800d078:	bf00      	nop
 800d07a:	3708      	adds	r7, #8
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d13c      	bne.n	800d10a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d090:	4a20      	ldr	r2, [pc, #128]	; (800d114 <USBD_LL_Init+0x94>)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4a1e      	ldr	r2, [pc, #120]	; (800d114 <USBD_LL_Init+0x94>)
 800d09c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d0a0:	4b1c      	ldr	r3, [pc, #112]	; (800d114 <USBD_LL_Init+0x94>)
 800d0a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d0a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d0a8:	4b1a      	ldr	r3, [pc, #104]	; (800d114 <USBD_LL_Init+0x94>)
 800d0aa:	2204      	movs	r2, #4
 800d0ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d0ae:	4b19      	ldr	r3, [pc, #100]	; (800d114 <USBD_LL_Init+0x94>)
 800d0b0:	2202      	movs	r2, #2
 800d0b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d0b4:	4b17      	ldr	r3, [pc, #92]	; (800d114 <USBD_LL_Init+0x94>)
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d0ba:	4b16      	ldr	r3, [pc, #88]	; (800d114 <USBD_LL_Init+0x94>)
 800d0bc:	2202      	movs	r2, #2
 800d0be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d0c0:	4b14      	ldr	r3, [pc, #80]	; (800d114 <USBD_LL_Init+0x94>)
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d0c6:	4b13      	ldr	r3, [pc, #76]	; (800d114 <USBD_LL_Init+0x94>)
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d0cc:	4b11      	ldr	r3, [pc, #68]	; (800d114 <USBD_LL_Init+0x94>)
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d0d2:	4b10      	ldr	r3, [pc, #64]	; (800d114 <USBD_LL_Init+0x94>)
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d0d8:	4b0e      	ldr	r3, [pc, #56]	; (800d114 <USBD_LL_Init+0x94>)
 800d0da:	2200      	movs	r2, #0
 800d0dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d0de:	480d      	ldr	r0, [pc, #52]	; (800d114 <USBD_LL_Init+0x94>)
 800d0e0:	f7f8 f9b4 	bl	800544c <HAL_PCD_Init>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d001      	beq.n	800d0ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d0ea:	f7f4 ff77 	bl	8001fdc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d0ee:	2180      	movs	r1, #128	; 0x80
 800d0f0:	4808      	ldr	r0, [pc, #32]	; (800d114 <USBD_LL_Init+0x94>)
 800d0f2:	f7f9 fbf4 	bl	80068de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d0f6:	2240      	movs	r2, #64	; 0x40
 800d0f8:	2100      	movs	r1, #0
 800d0fa:	4806      	ldr	r0, [pc, #24]	; (800d114 <USBD_LL_Init+0x94>)
 800d0fc:	f7f9 fba8 	bl	8006850 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d100:	2280      	movs	r2, #128	; 0x80
 800d102:	2101      	movs	r1, #1
 800d104:	4803      	ldr	r0, [pc, #12]	; (800d114 <USBD_LL_Init+0x94>)
 800d106:	f7f9 fba3 	bl	8006850 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d10a:	2300      	movs	r3, #0
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3708      	adds	r7, #8
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	20000990 	.word	0x20000990

0800d118 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d120:	2300      	movs	r3, #0
 800d122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d124:	2300      	movs	r3, #0
 800d126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d12e:	4618      	mov	r0, r3
 800d130:	f7f8 faa9 	bl	8005686 <HAL_PCD_Start>
 800d134:	4603      	mov	r3, r0
 800d136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d138:	7bfb      	ldrb	r3, [r7, #15]
 800d13a:	4618      	mov	r0, r3
 800d13c:	f000 f930 	bl	800d3a0 <USBD_Get_USB_Status>
 800d140:	4603      	mov	r3, r0
 800d142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d144:	7bbb      	ldrb	r3, [r7, #14]
}
 800d146:	4618      	mov	r0, r3
 800d148:	3710      	adds	r7, #16
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b084      	sub	sp, #16
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
 800d156:	4608      	mov	r0, r1
 800d158:	4611      	mov	r1, r2
 800d15a:	461a      	mov	r2, r3
 800d15c:	4603      	mov	r3, r0
 800d15e:	70fb      	strb	r3, [r7, #3]
 800d160:	460b      	mov	r3, r1
 800d162:	70bb      	strb	r3, [r7, #2]
 800d164:	4613      	mov	r3, r2
 800d166:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d168:	2300      	movs	r3, #0
 800d16a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d16c:	2300      	movs	r3, #0
 800d16e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d176:	78bb      	ldrb	r3, [r7, #2]
 800d178:	883a      	ldrh	r2, [r7, #0]
 800d17a:	78f9      	ldrb	r1, [r7, #3]
 800d17c:	f7f8 ff7a 	bl	8006074 <HAL_PCD_EP_Open>
 800d180:	4603      	mov	r3, r0
 800d182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d184:	7bfb      	ldrb	r3, [r7, #15]
 800d186:	4618      	mov	r0, r3
 800d188:	f000 f90a 	bl	800d3a0 <USBD_Get_USB_Status>
 800d18c:	4603      	mov	r3, r0
 800d18e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d190:	7bbb      	ldrb	r3, [r7, #14]
}
 800d192:	4618      	mov	r0, r3
 800d194:	3710      	adds	r7, #16
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b084      	sub	sp, #16
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1b4:	78fa      	ldrb	r2, [r7, #3]
 800d1b6:	4611      	mov	r1, r2
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7f8 ffc3 	bl	8006144 <HAL_PCD_EP_Close>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1c2:	7bfb      	ldrb	r3, [r7, #15]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f000 f8eb 	bl	800d3a0 <USBD_Get_USB_Status>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3710      	adds	r7, #16
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1f2:	78fa      	ldrb	r2, [r7, #3]
 800d1f4:	4611      	mov	r1, r2
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7f9 f883 	bl	8006302 <HAL_PCD_EP_SetStall>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d200:	7bfb      	ldrb	r3, [r7, #15]
 800d202:	4618      	mov	r0, r3
 800d204:	f000 f8cc 	bl	800d3a0 <USBD_Get_USB_Status>
 800d208:	4603      	mov	r3, r0
 800d20a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d20c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}

0800d216 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d216:	b580      	push	{r7, lr}
 800d218:	b084      	sub	sp, #16
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
 800d21e:	460b      	mov	r3, r1
 800d220:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d222:	2300      	movs	r3, #0
 800d224:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d226:	2300      	movs	r3, #0
 800d228:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d230:	78fa      	ldrb	r2, [r7, #3]
 800d232:	4611      	mov	r1, r2
 800d234:	4618      	mov	r0, r3
 800d236:	f7f9 f8c8 	bl	80063ca <HAL_PCD_EP_ClrStall>
 800d23a:	4603      	mov	r3, r0
 800d23c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d23e:	7bfb      	ldrb	r3, [r7, #15]
 800d240:	4618      	mov	r0, r3
 800d242:	f000 f8ad 	bl	800d3a0 <USBD_Get_USB_Status>
 800d246:	4603      	mov	r3, r0
 800d248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d24a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3710      	adds	r7, #16
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d254:	b480      	push	{r7}
 800d256:	b085      	sub	sp, #20
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	460b      	mov	r3, r1
 800d25e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d266:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	da0b      	bge.n	800d288 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d270:	78fb      	ldrb	r3, [r7, #3]
 800d272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d276:	68f9      	ldr	r1, [r7, #12]
 800d278:	4613      	mov	r3, r2
 800d27a:	00db      	lsls	r3, r3, #3
 800d27c:	4413      	add	r3, r2
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	440b      	add	r3, r1
 800d282:	333e      	adds	r3, #62	; 0x3e
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	e00b      	b.n	800d2a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d288:	78fb      	ldrb	r3, [r7, #3]
 800d28a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d28e:	68f9      	ldr	r1, [r7, #12]
 800d290:	4613      	mov	r3, r2
 800d292:	00db      	lsls	r3, r3, #3
 800d294:	4413      	add	r3, r2
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	440b      	add	r3, r1
 800d29a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d29e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3714      	adds	r7, #20
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d2c6:	78fa      	ldrb	r2, [r7, #3]
 800d2c8:	4611      	mov	r1, r2
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7f8 fead 	bl	800602a <HAL_PCD_SetAddress>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2d4:	7bfb      	ldrb	r3, [r7, #15]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f000 f862 	bl	800d3a0 <USBD_Get_USB_Status>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3710      	adds	r7, #16
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b086      	sub	sp, #24
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	60f8      	str	r0, [r7, #12]
 800d2f2:	607a      	str	r2, [r7, #4]
 800d2f4:	603b      	str	r3, [r7, #0]
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2fe:	2300      	movs	r3, #0
 800d300:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d308:	7af9      	ldrb	r1, [r7, #11]
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	f7f8 ffae 	bl	800626e <HAL_PCD_EP_Transmit>
 800d312:	4603      	mov	r3, r0
 800d314:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d316:	7dfb      	ldrb	r3, [r7, #23]
 800d318:	4618      	mov	r0, r3
 800d31a:	f000 f841 	bl	800d3a0 <USBD_Get_USB_Status>
 800d31e:	4603      	mov	r3, r0
 800d320:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d322:	7dbb      	ldrb	r3, [r7, #22]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3718      	adds	r7, #24
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b086      	sub	sp, #24
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	607a      	str	r2, [r7, #4]
 800d336:	603b      	str	r3, [r7, #0]
 800d338:	460b      	mov	r3, r1
 800d33a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d33c:	2300      	movs	r3, #0
 800d33e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d340:	2300      	movs	r3, #0
 800d342:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d34a:	7af9      	ldrb	r1, [r7, #11]
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	f7f8 ff42 	bl	80061d8 <HAL_PCD_EP_Receive>
 800d354:	4603      	mov	r3, r0
 800d356:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d358:	7dfb      	ldrb	r3, [r7, #23]
 800d35a:	4618      	mov	r0, r3
 800d35c:	f000 f820 	bl	800d3a0 <USBD_Get_USB_Status>
 800d360:	4603      	mov	r3, r0
 800d362:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d364:	7dbb      	ldrb	r3, [r7, #22]
}
 800d366:	4618      	mov	r0, r3
 800d368:	3718      	adds	r7, #24
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
	...

0800d370 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d378:	4b03      	ldr	r3, [pc, #12]	; (800d388 <USBD_static_malloc+0x18>)
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	370c      	adds	r7, #12
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop
 800d388:	20000e9c 	.word	0x20000e9c

0800d38c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]

}
 800d394:	bf00      	nop
 800d396:	370c      	adds	r7, #12
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr

0800d3a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b085      	sub	sp, #20
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d3ae:	79fb      	ldrb	r3, [r7, #7]
 800d3b0:	2b03      	cmp	r3, #3
 800d3b2:	d817      	bhi.n	800d3e4 <USBD_Get_USB_Status+0x44>
 800d3b4:	a201      	add	r2, pc, #4	; (adr r2, 800d3bc <USBD_Get_USB_Status+0x1c>)
 800d3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ba:	bf00      	nop
 800d3bc:	0800d3cd 	.word	0x0800d3cd
 800d3c0:	0800d3d3 	.word	0x0800d3d3
 800d3c4:	0800d3d9 	.word	0x0800d3d9
 800d3c8:	0800d3df 	.word	0x0800d3df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d3d0:	e00b      	b.n	800d3ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d3d2:	2303      	movs	r3, #3
 800d3d4:	73fb      	strb	r3, [r7, #15]
    break;
 800d3d6:	e008      	b.n	800d3ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	73fb      	strb	r3, [r7, #15]
    break;
 800d3dc:	e005      	b.n	800d3ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3de:	2303      	movs	r3, #3
 800d3e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d3e2:	e002      	b.n	800d3ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d3e4:	2303      	movs	r3, #3
 800d3e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d3e8:	bf00      	nop
  }
  return usb_status;
 800d3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3714      	adds	r7, #20
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <__libc_init_array>:
 800d3f8:	b570      	push	{r4, r5, r6, lr}
 800d3fa:	4d0d      	ldr	r5, [pc, #52]	; (800d430 <__libc_init_array+0x38>)
 800d3fc:	4c0d      	ldr	r4, [pc, #52]	; (800d434 <__libc_init_array+0x3c>)
 800d3fe:	1b64      	subs	r4, r4, r5
 800d400:	10a4      	asrs	r4, r4, #2
 800d402:	2600      	movs	r6, #0
 800d404:	42a6      	cmp	r6, r4
 800d406:	d109      	bne.n	800d41c <__libc_init_array+0x24>
 800d408:	4d0b      	ldr	r5, [pc, #44]	; (800d438 <__libc_init_array+0x40>)
 800d40a:	4c0c      	ldr	r4, [pc, #48]	; (800d43c <__libc_init_array+0x44>)
 800d40c:	f000 f82e 	bl	800d46c <_init>
 800d410:	1b64      	subs	r4, r4, r5
 800d412:	10a4      	asrs	r4, r4, #2
 800d414:	2600      	movs	r6, #0
 800d416:	42a6      	cmp	r6, r4
 800d418:	d105      	bne.n	800d426 <__libc_init_array+0x2e>
 800d41a:	bd70      	pop	{r4, r5, r6, pc}
 800d41c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d420:	4798      	blx	r3
 800d422:	3601      	adds	r6, #1
 800d424:	e7ee      	b.n	800d404 <__libc_init_array+0xc>
 800d426:	f855 3b04 	ldr.w	r3, [r5], #4
 800d42a:	4798      	blx	r3
 800d42c:	3601      	adds	r6, #1
 800d42e:	e7f2      	b.n	800d416 <__libc_init_array+0x1e>
 800d430:	0800d540 	.word	0x0800d540
 800d434:	0800d540 	.word	0x0800d540
 800d438:	0800d540 	.word	0x0800d540
 800d43c:	0800d544 	.word	0x0800d544

0800d440 <memcpy>:
 800d440:	440a      	add	r2, r1
 800d442:	4291      	cmp	r1, r2
 800d444:	f100 33ff 	add.w	r3, r0, #4294967295
 800d448:	d100      	bne.n	800d44c <memcpy+0xc>
 800d44a:	4770      	bx	lr
 800d44c:	b510      	push	{r4, lr}
 800d44e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d452:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d456:	4291      	cmp	r1, r2
 800d458:	d1f9      	bne.n	800d44e <memcpy+0xe>
 800d45a:	bd10      	pop	{r4, pc}

0800d45c <memset>:
 800d45c:	4402      	add	r2, r0
 800d45e:	4603      	mov	r3, r0
 800d460:	4293      	cmp	r3, r2
 800d462:	d100      	bne.n	800d466 <memset+0xa>
 800d464:	4770      	bx	lr
 800d466:	f803 1b01 	strb.w	r1, [r3], #1
 800d46a:	e7f9      	b.n	800d460 <memset+0x4>

0800d46c <_init>:
 800d46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46e:	bf00      	nop
 800d470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d472:	bc08      	pop	{r3}
 800d474:	469e      	mov	lr, r3
 800d476:	4770      	bx	lr

0800d478 <_fini>:
 800d478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d47a:	bf00      	nop
 800d47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d47e:	bc08      	pop	{r3}
 800d480:	469e      	mov	lr, r3
 800d482:	4770      	bx	lr
